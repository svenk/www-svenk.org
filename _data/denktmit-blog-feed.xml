
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Der DenktMit Tech-blog</title>
    <link>https://denktmit.de</link>
    <description></description>
    <language>en-us</language>
    <lastBuildDate>2024-05-08T11:52:27Z</lastBuildDate>
    <atom:link href="https://every-layout.dev/feed.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to auth your API in 2020</title>
      <link>https://denktmit.de/blog/2020-02-07-how-to-auth-your-api-in-2020/</link>
      <pubDate>2020-02-07T00:00:00Z</pubDate>
      <guid>https://denktmit.de/blog/2020-02-07-how-to-auth-your-api-in-2020/</guid>
      <description>&lt;p&gt;What kind if auth mechanism exist?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml&quot;&gt;IANA HTTP authschemas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Getting acquainted with OAuth2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.okta.com/blog/2017/06/21/what-the-heck-is-oauth&quot;&gt;What the heck is OAuth?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mastercard.com/blog/why-mastercard-doesnt-use-oauth-20/&quot;&gt;Why Mastercard Doesn&#39;t Use OAuth 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.okta.com/blog/2019/10/want-to-secure-your-apis-youll-need-oauth-2-0-for-that/&quot;&gt;Want to Secure Your APIs? You’ll Need OAuth 2.0 for That&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thoughts on why JWT for Session might not be the best choice&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.pingidentity.com/fr/company/blog/posts/2019/the-hard-parts-of-jwt-security-nobody-talks-about.html&quot;&gt;The hard parts of JWT scurity nobody talks about&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/&quot;&gt;Stop using JWT for sessions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cryto.net/~joepie91/blog/2016/06/19/stop-using-jwt-for-sessions-part-2-why-your-solution-doesnt-work/&quot;&gt;Stop using JWT for sessions, part 2. Why your solution does not work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.okta.com/blog/2017/08/17/why-jwts-suck-as-session-tokens&quot;&gt;Why JWTs suck as session tokens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.okta.com/blog/2018/06/20/what-happens-if-your-jwt-is-stolen&quot;&gt;What happens, if your JWT is stolen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using Keycloak for Auth&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zakariaamine.com/2019-06-14/extending-keycloak&quot;&gt;Extending Keycloak: adding API key authentication&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What are the the big ones using?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html&quot;&gt;AWS Signature V4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Storypoints should estimate cognitive load</title>
      <link>https://denktmit.de/blog/2020-07-21-storypoints-should-estimate-cognitive-load/</link>
      <pubDate>2020-07-21T00:00:00Z</pubDate>
      <guid>https://denktmit.de/blog/2020-07-21-storypoints-should-estimate-cognitive-load/</guid>
      <description>&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;Most of the projects we do today use an agile software development approach, be it SCRUM or Kanban or the like. Most of the time, the work to be done is estimated based on story points. At first glance, this may seem easy, but at some point your project team could debate what a story point actually represents. Some might argue that story points somehow value time. Others are convinced that they somehow assess the academic complexity of a task. And a third group does not hesitate to point out that they are only ever allowed for user stories and not for bugs or minor technical tasks. After all, almost everyone agrees that the Fibonacci numbers are great candidates for story points.&lt;/p&gt;
&lt;p&gt;In our opinion, story points should estimate the &lt;strong&gt;total cognitive load&lt;/strong&gt; to get some well enough defined pile of work done. We derive possible story point values from Fibonacci numbers &amp;lt;= 21, allow an additional 0.5 value and we apply them for everything. The rest of this blog post is, &lt;strong&gt;why&lt;/strong&gt; we do it that way.&lt;/p&gt;
&lt;h2&gt;Goals of estimating tasks&lt;/h2&gt;
&lt;p&gt;To prioritize work properly, it is essential to figure out the expected return of invest (ROI) as ratio of expected business value and expected effort. In order monitor the quality of our forecast, we would continuously compare the expected with the actual outcome and try to reduce the deviation. In order to enhance the forecast, we want to it to become as efficient (low-cost, fast and easy), effective (concise, non-misleading insights) and appropriate (only asking for the measures and granularity needed) as possible.&lt;/p&gt;
&lt;h2&gt;Story points are a better fit for human guessing&lt;/h2&gt;
&lt;p&gt;Before using story points, we tried to estimate the amount of time to get a certain workload done. One of the pain point was, that we as humans are surprisingly bad and overoptimistic in guessing how long something new is going to take. At the same time we want be accurate in our statements. Treating those estimates as binding cost estimates, in many cases definitely added some pressure.&lt;/p&gt;
&lt;p&gt;As a countermeasure, many developers, including us, designed some fancy Excel sheets to enter their guess work and deliver educated overestimates to compensate for our optimism. That made us feel better and lightened some pressure by moving unused times between work items. The approach was time-consuming because of the fancy guess work. It also did not deliver accurate results because of the intrinsic lack of knowledge in doing something new and the safe-guarding over-estimates.&lt;/p&gt;
&lt;p&gt;As it turned out, story points improve the estimation part of the ROI equation. We humans are surprisingly good at guessing the relative difficulty of tasks we only have partial knowledge of. Most of the time, we can easily say: &amp;quot;This will be A LOT harder than that. Doing ABC is more easy peasy compared to XZY&amp;quot;. We do not even need to remember the exact effort of the reference work to make that guess.&lt;/p&gt;
&lt;p&gt;Additionally, we are easily overwhelmed with too much choice[^1]. Having choices between hours, days, weeks and maybe even months makes it harder for us to decide. It is a smart move to limit the number of available choices to accelerate a decision process. Using a limited set of possible story points, applies choice architecture[^2] on effort estimation.&lt;/p&gt;
&lt;p&gt;We still have some freedom what number sequence to take. Ideally, the sequence of valid story point values should reflect the fact, that estimates lack more accuracy, the bigger the subject to estimate is. Using the Fibonacci numbers fits this requirement nicely, because consecutive numbers have an increasing gap between them. Of course, you could use another number sequence, but Fibonacci numbers will always be more cool. They have an italian name, a strong relation to the golden ratio and you do not have to explain them yourself[^3].&lt;/p&gt;
&lt;p&gt;We like to add a 0.5 story point option to be assigned for very small tasks that are often neglected as &lt;strong&gt;to small to be estimated at all&lt;/strong&gt;. In doing so, if those tasks come in numbers, they at least show up in the forecast. We limit our story point values to nine options in total to support quick decision-making. We usually consider a story point value of 21 as &lt;strong&gt;too big, should usually be broken up into smaller parts&lt;/strong&gt;. Anything that feels bigger than even a 21 is rejected and must be refined first.&lt;/p&gt;
&lt;h2&gt;The gain of story points&lt;/h2&gt;
&lt;p&gt;In summary the two effects improve the efficiency and effectiveness of the estimation process. Since estimating is lot faster with story points, it quickly became a team effort increasing the quality by averaging between independent guesses. Using Planning poker avoids being biased by other opinions.&lt;/p&gt;
&lt;p&gt;This whole team approach results into a better quality of the effort estimates. By monitoring the story points a developer team delivers over time, one finds, that the total amount of story points per sprint usually converges into an expectancy value. In our experience, the ROI forecast derivable from that value is of better quality than the one derived from time estimations. Therefore, we consider story points more appropriate.&lt;/p&gt;
&lt;h2&gt;Story points should estimate total cognitive load&lt;/h2&gt;
&lt;p&gt;Let us focus on why we are estimating at all: We want to know the expected return on invest and everything that improves that forecast is good. We are already convinced, that using story points are pragmatic in delivering a better ROI forecast. However, story points are an abstract concept. Some definition what exactly they represent is needed. Maybe for that reason, there seems to be some fear of not doing story points right.&lt;/p&gt;
&lt;p&gt;Keep in mind, that the whole agile development approach should be adapted to what works best for you. We think, story points should have meaning, that feels natural and explaining them should be very easy. Since software is a brain child, we feel comfortable in treating story points as &lt;strong&gt;expected total cognitive load&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Everything becomes quite clear with this definition. If a task is more difficult than another, it causes more cognitive load. You need to research something new. Some business process might be complex, so you need to meet with the business experts and learn about it. A task is simple, but it contains a lot of repetitive work, and that needs time and focus. It all adds up on the cognitive load.&lt;/p&gt;
&lt;p&gt;Doing a task a second time but on an evolved system where it has become a lot easier, results into less cognitive load. Assigning fewer story point is totally fine. The product is more sophisticated now and allows for a higher ROI.&lt;/p&gt;
&lt;p&gt;Some developer has more foreknowledge than the others? Sharing it causes cognitive load. If he is done quicker than the team average: be it so. It will just result into a slightly better actual ROI than expected for the team average and shows good resource allocation.&lt;/p&gt;
&lt;p&gt;Not sure if to assign story points to a bug or task? Well, they also produce cognitive load. So we just assign them story points, because in the end, we want to obtain a more accurate forecast.&lt;/p&gt;
&lt;p&gt;Keep the cognitive load buffers clean and happy estimating.&lt;/p&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;p&gt;[^1]: &lt;a href=&quot;https://en.wikipedia.org/wiki/Choice#Number_of_options_and_paradox&quot;&gt;Choice: Number of options and paradox&lt;/a&gt;
[^2]: &lt;a href=&quot;https://en.wikipedia.org/wiki/Choice_architecture&quot;&gt;Choice architecture&lt;/a&gt;
[^3]: &lt;a href=&quot;https://en.wikipedia.org/wiki/Fibonacci_number&quot;&gt;Fibonacci-Numbers&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gendern im Markup und in Programmiersprachen</title>
      <link>https://denktmit.de/blog/2021-06-07-gendern-in-markup/</link>
      <pubDate>2021-06-07T00:00:00Z</pubDate>
      <guid>https://denktmit.de/blog/2021-06-07-gendern-in-markup/</guid>
      <description>&lt;p&gt;&lt;a href=&quot;https://de.wikipedia.org/wiki/Geschlechtergerechte_Sprache&quot;&gt;Geschlechtergerechte Sprache&lt;/a&gt;
ist in aller Munde. In diesem Blogpost möchte ich die politische Dimension außer Acht lassen
und als gesetzt nehmen, dass in einem (Programmier-)projekt das Gendern von Kund(inn)enseite aus
gewünscht ist. Wie ist damit umzugehen? Welche technische Unterstützung und welche Hürden sind
zu erwarten?&lt;/p&gt;
&lt;h2&gt;Eine Momentaufnahme der Internationalisierung und UX&lt;/h2&gt;
&lt;p&gt;Soziale Strukturen bilden sich in der Software ab, dies ist ein bekanntes
&lt;a href=&quot;https://en.wikipedia.org/wiki/Anti-pattern&quot;&gt;Anti-Pattern&lt;/a&gt; der Softwareentwicklung. Leider ist
die Männerquote in der IT immer noch
weit über der absoluten Mehrheit. Das zeigt sich in Systemen, die solche Personen schreiben.
Veraltete Libraries sind nicht umbedingt das Problem: So unterstützen
Internationalisiserungs-Bibliotheken wie &lt;em&gt;gettext&lt;/em&gt; die Sprachgestaltung nicht nur hinsichtlich
Pluralformen, sondern mit &lt;em&gt;Kontexten&lt;/em&gt; auch hinsichtlich Geschlechtern, vgl. etwa diese
StackOverflow-Frage: &lt;a href=&quot;https://stackoverflow.com/questions/6143547/handling-grammatical-gender-with-gettext&quot;&gt;Handling grammatical gender with Gettext&lt;/a&gt;.
Ein solcher Kontext würde prinzipiell auch nicht-binäre Varianten erlauben. Eine andere
Problematik ergibt sich im User Interfacing (UX): Liberale Positionen sind hier eigentlich
schon lange zur Auffassung gekommen, die Wahl der Anrede (zB. &lt;em&gt;du&lt;/em&gt;/&lt;em&gt;sie&lt;/em&gt;, &lt;em&gt;Herr&lt;/em&gt;/&lt;em&gt;Frau&lt;/em&gt;, aber auch
&lt;em&gt;er&lt;/em&gt;/&lt;em&gt;sie&lt;/em&gt;/&lt;em&gt;es&lt;/em&gt; bzw. komplett Freiform) der ausfüllenden/anmeldenden Person zu überlassen.
Aus Perspektive einer Softwareschmiede kann man hier nur die Position einer Unternehmensberatung
einnehmen, welche Kund(inn)en darin berät, diese Prinzipien anzuwenden.&lt;/p&gt;
&lt;h2&gt;Gendern im Markup-Fließtext&lt;/h2&gt;
&lt;p&gt;Die eigentliche Problematik beginnt aber beim Umgang mit &lt;em&gt;User generated Content&lt;/em&gt;, etwa
in seiner freisten Form als Fließtext mit Formatierungsanweisungen (Markup). So habe ich es
vor zwei Jahren einmal bei dem kleinen Zeitungsstartup
&lt;a href=&quot;https://perspective-daily.de/&quot;&gt;Perspective Daily&lt;/a&gt; erlebt, welches aus einer progressiven
Autor(innen)schaft bestand, welche seinerzeit das &lt;a href=&quot;https://de.wikipedia.org/wiki/Gendersternchen&quot;&gt;Gendersternchen&lt;/a&gt;
verwendete --- allerdings in Texten, die mit &lt;a href=&quot;https://de.wikipedia.org/wiki/Markdown&quot;&gt;Markdown&lt;/a&gt;
ausgezeichnet wurden. Das Ergebnis war technisches Versagen, denn das Sternchen
(&lt;a href=&quot;https://de.wikipedia.org/wiki/Sternchen_(Schriftzeichen)&quot;&gt;Asterisk, ASCII-Zeichen&lt;/a&gt; wird
bei Markdown verwendet, um &lt;a href=&quot;https://de.wikipedia.org/wiki/Kursivschrift&quot;&gt;Kursivschrift&lt;/a&gt; zu
markieren. Korrekterweise muss die Person, die einen Text in Markdown gendern möchte, dazu
angehalten werden, das Gendersternchen zu &lt;a href=&quot;https://de.wikipedia.org/wiki/Maskierungszeichen&quot;&gt;maskieren&lt;/a&gt;.
Statt &lt;code&gt;Programmierer*innen&lt;/code&gt; müsste die Autorenschaft dann &lt;code&gt;Programmierer&#92;*innen&lt;/code&gt;
schreiben, damit es als &lt;em&gt;Programmierer*innen&lt;/em&gt; dargestellt wird. Da dies wiederum als der
Autorenschaft nicht zuzumuten galt, habe ich seinerzeit versucht die Problematik zu entschärfen,
in dem ich mit regulären Ausdrücken als Preprocessing das Gendern erkannt und maskiert habe,
hier etwa in Python (siehe &lt;a href=&quot;https://gist.github.com/svenk/0e60864a7bbe34a3d3dba07468f67b83&quot;&gt;Github Gist&lt;/a&gt;
für weiteren Code):&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token for-or-select variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Gender*nnen&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;foo *bar* baz&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;foo *bar*baz&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;Und *das* ist wirklich Mensch*nnen *und* toll.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;:
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;      print&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;re.sub&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;r&lt;span class=&quot;token string&quot;&gt;&quot;(^|&#92;s)(&#92;w+)&#92;*([^.&#92;s]*&#92;w+)($|&#92;s)&quot;&lt;/span&gt;, r&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token entity&quot; title=&quot;&#92;1&quot;&gt;&#92;1&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;&#92;2&quot;&gt;&#92;2&lt;/span&gt;&#92;*&lt;span class=&quot;token entity&quot; title=&quot;&#92;3&quot;&gt;&#92;3&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;&#92;4&quot;&gt;&#92;4&lt;/span&gt;&quot;&lt;/span&gt;, x&lt;span class=&quot;token punctuation&quot;&gt;))&lt;/span&gt;

Gender&lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;*nnen
foo *bar* baz
foo *bar*baz
Und *das* ist wirklich Mensch&lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;*nnen *und* toll.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An den Testbeispielen sieht man, dass der vorgeschlagene reguläre Ausdruck einigermaßen
zu klappen scheint, aber die Praxis lehrt, dass der eine oder andere Randfall dann doch
unberücksichtigt bleibt. Aus Sicht der Programmierenden handelt es sich um ein klassisches
Problem der Kontextwechsel; über dieses Problem hat ein Kollege von mir schon vor über
10 Jahren einen Artikel im Zusammenhang mit SQL-Injections geschrieben, damals noch bei
SELFHTML: &lt;a href=&quot;https://wiki.selfhtml.org/wiki/Programmiertechnik/Kontextwechsel&quot;&gt;Programmiertechnik/Kontextwechsel&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Kontextwechsel und Orthogonalität als grundlegendes Problem in der angewandten Informatik&lt;/h2&gt;
&lt;p&gt;Die Grundproblematik ist also, dass eine Markupsprache wie Markdown davon ausgeht, dass
der Asterisk (also das Sternchen) im Fließtext selten vorkommt. Nur mit dieser Annahme
ist es sinnvoll, den Asterisk als Markup-Zeichen zu verwenden. Das zugrundeliegende
Konzept kann auch mit der &lt;a href=&quot;https://de.wikipedia.org/wiki/Orthogonalit%C3%A4t_(Informatik)&quot;&gt;Orthogonalität&lt;/a&gt;
in der Informatik verglichen werden: Markup-Sprache und zugrundeliegende Sprache stehen
orthogonal aufeinander, weil sie wenig gemeinsame Zeichen teilen. Steueranweisungen und
menschliche Sprache stehen orthogonal aufeinander. Es gibt hier natürlich eine einfache
Lösung, etwa den Wechsel der Auszeichnungssprache, z.B. von Markdown zu
&lt;a href=&quot;https://docutils.sourceforge.io/docs/user/rst/cheatsheet.html&quot;&gt;reStructuredText&lt;/a&gt; oder
etwa dem &lt;a href=&quot;https://www.mediawiki.org/wiki/Help:Formatting&quot;&gt;MediaWiki-Markup&lt;/a&gt;, in welchem
Kursiv- und Dickschrift mit &lt;code&gt;&#39;&#39;einfachen&#39;&#39; Anführungsstrichen&lt;/code&gt; ausgezeichnet werden.
Generell sind diese Markupschriften als vereinfachte Formen von Sprachen wie
&lt;a href=&quot;https://en.wikipedia.org/wiki/HTML&quot;&gt;HTML&lt;/a&gt; oder XML entstanden, welches den Kontextwechsel
stets mit eckigen Klammern vornimmt. Grundsätzlich lässt sich Markup nicht losgelöst
vom Inhalt betrachten. Eine solche Kodierung lässt sich nur ermöglichen, wenn man
maschinennähere Textrepräsentationen erwägt, bei welchen es keine Vermischung mehr
von Inhalt und Formatierungsanweisungen gibt. Im Grunde genommen sind Benutzer:innen
derartiges von &lt;a href=&quot;https://en.wikipedia.org/wiki/Word_processor&quot;&gt;Wortprozessoren&lt;/a&gt;
gewohnt, die von der internen Textrepräsentation abstrahieren und ein
&lt;em&gt;WYSIWYG&lt;/em&gt;-Interface anbieten, was kurz steht für &lt;em&gt;What You See Is What You Get&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Solche &lt;em&gt;WYSIWYG&lt;/em&gt;-Benutzerschnittstellen haben in den letzten Jahren etwas an Boden
verloren. Der schnelle technische Fortschritt hat da sicher beigetragen, Anforderungen
haben sich mehr an den Entwickeldnen als an den Benutzenden orientiert. Das kleine
Zeitungs-Startup, von dem ich oben schrieb, verwendete eine Markupsprache, damit sie
ihr Zeitungsportal schneller &amp;quot;gelauncht&amp;quot; bekamen. Und soziale Netzwerke wie Twitter
verwenden Markup --- und dazu zählt konzeptionell auch der berühmte
&lt;a href=&quot;https://de.wikipedia.org/wiki/Hashtag&quot;&gt;Hashtag&lt;/a&gt; --- vermascht mit anderem
&lt;a href=&quot;https://de.wikipedia.org/wiki/Plain_text&quot;&gt;Plaintext&lt;/a&gt; zwecks schneller Bearbeitung
von Tweets. Eine Notiz hier nur am Rande: Tatsächlich wurden Hashtags von den Benutzenden
der Plattform selbst erfunden und eingeführt, die Plattform hat sich diese erfolgreiche
Technik letztlich zu eigen gemacht. Diese Erfindung wäre nicht anders als mit einer
Auszeichnungssprache, die &amp;quot;ontop&amp;quot; des menschlichen Textes erfunden wurde, möglich gewesen,
da Benutzende nicht in die Programmierung der proprietären Anwendung eingreifen können.&lt;/p&gt;
&lt;h2&gt;Doppelpunkt, Auslassungszeichen oder Sternchen?&lt;/h2&gt;
&lt;p&gt;Vor dem dargelegten Hintergrund von Vermaschung konstruierter (technischer)
Programmiersprache und menschlicher Sprache ist es doch seltsam, dass der Doppelpunkt
als Genderzeichen (wie in &lt;code&gt;Programmierer:innen&lt;/code&gt;) eingeführt wurde, just um technischen
Limitationen zu umgehen: Es wurde nämlich beobachtet, dass der Doppelpunkt von
&lt;a href=&quot;https://de.wikipedia.org/wiki/Plain_text&quot;&gt;Sprachsyntheseprogrammen (Text-to-Speech)&lt;/a&gt;
zu einer kurzen Pause führte, welcher ähnlich wie der
&lt;a href=&quot;https://de.wikipedia.org/wiki/Glottaler_Plosiv&quot;&gt;Glottisschlag&lt;/a&gt; interpretiert wurde.
Es dauert nicht lange, um Beispiele zu finden, wo der Doppelpunkt hingegen wieder
negativ mit der Technik interferiert, etwa innerhalb der verbreiteten
Auszeichnungssprache &lt;a href=&quot;https://de.wikipedia.org/wiki/YAML&quot;&gt;YAML&lt;/a&gt;, in der es (angelehnt
an viele Programmiersprachen) zur Trennung von Schlüssel und Wert bei der Definition
einer Tabelle/Abbildung/Dictionary dient. Die Lösung ist hier, da ein strukturgebender
Kontext vorliegt, allerdings einfacher, da der Wert (Textstring) einfach durch
Anführungsstriche maskiert wird. Aus &lt;code&gt;schlüssel:wert&lt;/code&gt; kann nämlich equivalent
&lt;code&gt;&amp;quot;schlüssel&amp;quot;:&amp;quot;wert&amp;quot;&lt;/code&gt; werden, sodass &lt;code&gt;&amp;quot;Programmierer:innen sind&amp;quot;:&amp;quot;auch Anwender:innen&amp;quot;&lt;/code&gt;
valides YAML ist.&lt;/p&gt;
&lt;p&gt;So entsteht eine kleine Matrix, welche Genderform mit welcher Markupsprache einfach
zu benutzen (&amp;quot;kompatibel&amp;quot;) ist:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Paarform&lt;/th&gt;
&lt;th&gt;Markdown&lt;/th&gt;
&lt;th&gt;RST&lt;/th&gt;
&lt;th&gt;LaTeX&lt;/th&gt;
&lt;th&gt;HTML&lt;/th&gt;
&lt;th&gt;YAML&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Lehrer(innen)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Lehrerinnen/Lehrer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;🟡 (Quirky)&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Lehrer*innen&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Lehrer_innen&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Lehrer:innen&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Die Tabelle zeigt, dass manche Sprachen wie &lt;em&gt;reStructuredText&lt;/em&gt; (RST) oder HTML mit fast
jeder Variante klarkommen, wohingegen es in anderen Sprachen häufig Probleme gibt, die
eine Maskierung (Escaping) nötig machen. Nur die in natürlichen Sprachen recht häufigen
runden Klammern stellen in keiner der verglichenen Sprachen ein Problem dar.&lt;/p&gt;
&lt;h2&gt;Abgünde des Parsings&lt;/h2&gt;
&lt;p&gt;Die Probleme mit Markierungszeichen für Sprachformen gehen aber über bloße Darstellungsfehler
hinaus:
Das Gendern von Texten kann die AnwenderInnen zur regelrechten
Verzweiflung bringen. Das Zeitungs-Startup benutzte intern auch das freie Textsatzprogramm
&lt;a href=&quot;https://de.wikipedia.org/wiki/LaTeX&quot;&gt;LaTeX&lt;/a&gt;. LaTeX ist heute der defakto-Standard zum
Schreiben von wissenschaftlichen Aufsätzen, vor allem in dem naturwissenschaftlich-technischen
Bereich. Es ist außerdem Defakto-Standard für die Repräsentation von komplizierten
mathematischen Formeln sowie ihrer Darstellung (Rendering). Latex-Code ist auf dem
Kontinuum zwischen Programmiersprachen und Markup-Sprachen noch ein Stück näher an der
Maschine, als es vielleicht YAML ist. Im Grunde genommen ist ein Latex-Code ein ausführbares
Computerprogramm, welches von dem Interpreter in eine andere Darstellung, etwa ein
PDF-Dokument umgewandelt ist. Es ist damit mit der Seitenbeschreibungssprache
&lt;a href=&quot;https://en.wikipedia.org/wiki/PostScript&quot;&gt;Postscript&lt;/a&gt; vergleichbar, die wiederum die
Grundlage für das PDF-Format darstellt. An dieser Stelle möchte ich gerne das &lt;a href=&quot;https://en.wikipedia.org/wiki/PostScript#%22Hello_world%22&quot;&gt;Hello-World-Beispiel
über Postscript aus Wikipedia&lt;/a&gt;
zitieren:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt; %&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;PS
 /Courier
 &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt; selectfont
 &lt;span class=&quot;token number&quot;&gt;72&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt; moveto
 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Hello world&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; show
 showpage&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dieser Code liest sich wie ein Buch zeile für zeile von links nach rechts. Postscript ist
eine stackorientierte Programmiersprache, weswegen zunächst alle erwähnten Dinge auf einen
virtuellen &amp;quot;Stapel&amp;quot; gelegt werden, wo sie von Anweisungen, die Postscript versteht, dann
&amp;quot;heruntergeholt&amp;quot; werden. So landet auch die Zeichenkette &lt;code&gt;Hello world!&lt;/code&gt; auf dem Stapel,
ehe sie von &lt;code&gt;show&lt;/code&gt; zur Anzeige gebracht wird. Wieder haben wir es mit einem Escape-Problem
zu tun, es wäre gar nicht einfach &lt;code&gt;Hello (cruel) world&lt;/code&gt; zu schreiben, ohne mit den runden
Klammern von Postscript ins Gehege zu kommen. Der binäre Zugang, der allerdings in keiner
praktikablen Programmiersprache gewählt wird, wäre an so einer Stelle im Übrigen die
Definition des Strings als &lt;em&gt;fixed length string&lt;/em&gt;, sodass der String selber von keinem
Compiler auf Escape-Sequenzen interpretiert werden muss. Auf diese Weise funktionieren die
allermeisten Netzwerkprotokolle und auch die meisten Stringinterpretationen auf Maschinenebene.
Wer sich darüber etwas informieren möchte, findet mit der
&lt;a href=&quot;https://en.wikipedia.org/wiki/ASN.1&quot;&gt;Abstract Syntax Notation One (ASN.1)&lt;/a&gt; einen guten
Startpunkt.&lt;/p&gt;
&lt;p&gt;Was passiert nun, wenn man bei Latex mit Unterstrich gendert? Probieren wir es mit einem
&lt;a href=&quot;http://tug.ctan.org/info/dickimaw/dickimaw-minexample.pdf&quot;&gt;minimally&lt;/a&gt;
not &lt;a href=&quot;https://tex.meta.stackexchange.com/questions/228/ive-just-been-asked-to-write-a-minimal-working-example-mwe-what-is-that&quot;&gt;working example&lt;/a&gt;
aus:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;documentclass&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;article&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;begin&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
DenktMit Programmier_innen sind Gött_innen &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; schwarz.
&lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;end&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dieses Dokument mit &lt;code&gt;pdflatex&lt;/code&gt; kompliert gibt bei mir folgende Ausgabe:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;sven@localhost /tmp/foo % pdflatex gender.tex
This is pdfTeX, Version &lt;span class=&quot;token number&quot;&gt;3.14159265&lt;/span&gt;-2.6-1.40.21 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;TeX Live &lt;span class=&quot;token number&quot;&gt;2020&lt;/span&gt;/Arch Linux&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;preloaded &lt;span class=&quot;token assign-left variable&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;pdflatex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 restricted &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;write18 enabled.
entering extended mode
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;./gender.txt
LaTeX2e &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2020&lt;/span&gt;-10-0&lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;1&lt;/span&gt;&gt;&lt;/span&gt; patch level &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
L3 programming layer &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2020&lt;/span&gt;-12-0&lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;3&lt;/span&gt;&gt;&lt;/span&gt; xparse &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2020&lt;/span&gt;-03-0&lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;3&lt;/span&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;/usr/share/texmf-dist/tex/latex/base/article.cls
Document Class: article &lt;span class=&quot;token number&quot;&gt;2020&lt;/span&gt;/04/10 v1.4m Standard LaTeX document class
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;/usr/share/texmf-dist/tex/latex/base/size10.clo&lt;span class=&quot;token punctuation&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;/usr/share/texmf-dist/tex/latex/l3backend/l3backend-pdftex.def&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
No &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; gender.aux.
&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; Missing $ inserted.
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;inserted text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
                $
l.3 DenktMit Programmier_
                         innen sind Gött_innen &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; schwarz.
? &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;PDFLatex ist abgestürzt. Das tut es bei Syntaxfehlern immer, und hier liegt ein
solcher Syntaxfehler vor. Der Unterstrich ist ein
&lt;a href=&quot;http://latexref.xyz/Reserved-characters.html&quot;&gt;reserviertes Zeichen&lt;/a&gt; und
damit Teil der Menge &lt;code&gt;# $ % &amp;amp; { } _ ~ ^ &#92; &lt;/code&gt;. Latex ist eine alte Software mit
vielen &lt;em&gt;Quirks&lt;/em&gt;, man sagt nur Latex könne Latex parsen. Je nach Kontext ist der
Unterstrich doch wieder zulässig, etwa in einer Mathematikumgebung (die ihrerseits
mit einem Dollarzeichen &lt;code&gt;$&lt;/code&gt; eingeleitet wird), oder in einer URL (aber
nur, wenn &lt;a href=&quot;https://ctan.org/pkg/hyperref&quot;&gt;Hyperref&lt;/a&gt; das richtig versteht).
Sobald ein Texcode geringfügig komplizierter wird als das hier gezeigte,
sind die Fehlermeldungen schnell kryptisch und die Fehlerursachen nicht mehr
so schnell zu finden, wenn man nicht ein paar Jahre Latex-Erfahrung angesammelt
hat. Wo Markdown einfach still und &amp;quot;resistent&amp;quot; ein Markup erstellt, welches so
nicht gedacht war, stoppt Latex die Ausführung komplett. Für Benutzende ist
das frustrierend.&lt;/p&gt;
&lt;h2&gt;Quo vadis, Programmiersprache?&lt;/h2&gt;
&lt;p&gt;Eine Programmiersprache, die sich an den Bedürfnissen der echten Sprache anpasst,
ist mir bislang noch nicht begegnet. Es ist eher ein Trial-and-Error, ein
gegenseitiges Austarieren zwischen wirtschaftlichem Einsatz von programmierenden
und benutzendem Personal. Immerhin haben Sprachdebatten und Neuentwicklungen bei
Programmiersprachen eine Gemeinsamkeit: Beide sind geführt vom Geist der
Veränderung. Sprache, egal ob natürlich oder künstlich, ist ein menschgemachtes
Konstrukt und ein Konsens. Als Entwickler maße ich es mir nicht an, über den
Inhalt meiner datenverarbeitenden Systeme zu werten.&lt;/p&gt;
&lt;h2&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;Zuguterletzt gebe ich doch noch meine Meinung zu diesem strittigen Thema ab.
Sie ist wahrscheinlich auch schon hier und da durchgeblitzt. Als typischer
&amp;quot;alter weißer Mann&amp;quot; und Partner und Vater von Frau(en) versuche ich, mir die systemische
Geschlechterdiskriminierung (etwa gegenüber Frauen) und meine &amp;quot;Vormachtposition&amp;quot;
gelegentlich zu vergegenwärtigen. Ich lehne das generische Maskulinum ab
und halte das &amp;quot;Genus vs. Sexus&amp;quot;-Argument für einen Vorwand, sich mit der
sprachlichen und gesellschaftlichen Wirklichkeit nicht auseinandersetzen zu müssen.
Ich experimentiere gerne gleichermaßen mit Programmiersprachen und mit natürlicher
Sprache. Da ich mir wünschen würde, dass ich etwa vom deutschen Staat
nicht mit meinem Geschlecht angesprochen werde, halte ich in diesen Zusammenhängen
eine Sprachvorschrift in Behörden oder Firmen für angemessen. Leider argumentieren
sowohl Befürworter:innen als auch Gegner_innen sehr offensiv und extrem, an einem
Konsens ist oft wenig Interesse. Mehr gemäßigte Mitte und Empathie würde der
Debattenkultur gut tun.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Plaintext ist Trumpf</title>
      <link>https://denktmit.de/blog/2021-06-08-plaintext/</link>
      <pubDate>2021-06-08T00:00:00Z</pubDate>
      <guid>https://denktmit.de/blog/2021-06-08-plaintext/</guid>
      <description>&lt;p&gt;In der Softwarearchitektur gibt es einige Weisheiten die zeitlos sind. Dazu gehört
die &lt;a href=&quot;https://blog.finxter.com/the-unix-philosophy/&quot;&gt;Unix-Philosophie&lt;/a&gt;, auch als
&lt;em&gt;principles of Unix Software design&lt;/em&gt; bekannt. Unix ist eines der erfolgreichsten
Betriebssysteme und direkt oder indirekter Vorgänger aller moderner Desktop- oder
Mobilgerätbetriebssysteme.&lt;/p&gt;
&lt;p&gt;In diesem Blogpost möchte ich das Prinzip &lt;em&gt;Plaintext over XYZ&lt;/em&gt; erläutern, wobei
&lt;em&gt;XYZ&lt;/em&gt; alles mögliche sein kann: Ganz allgemein binäre Strukturen, spezielle
Dateiformate oder komplizierte Austauschformate. Um das zu verstehen, hole ich etwas
aus, wie man Unix für gewöhnlich bedient.&lt;/p&gt;
&lt;h2&gt;Die Unix-Shell&lt;/h2&gt;
&lt;p&gt;Die Unix-Shell ist eine Kommandozeile, auf der man Zugriff zu vielen hundert
installierten Anwendungen hat. Wenn ich auf einem modernen Linux in der
&lt;a href=&quot;https://www.gnu.org/software/bash/&quot;&gt;Bash&lt;/a&gt; zweimal die Tabulatortaste drücke,
kriege ich auf meinem Rechner fast 6000 Kommandos angezeigt, die ich benutzen
kann. Ein guter Teil davon implementiert die drei Kernpfeiler der Unix-Philosophie:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Schreibe Programme die (nur) &lt;em&gt;eine&lt;/em&gt; Sache machen und die sie dafür sehr gut
machen.&lt;/li&gt;
&lt;li&gt;Schreibe Programme, die zsuammen arbeiten.&lt;/li&gt;
&lt;li&gt;Schreibe Programme, die Textstreams verarbeiten, denn dies ist eine universelle
Schnittstelle.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In einem Satz: Unix-Tools sind nach dem Baukastenprinzip gestaltet und verarbeiten
&lt;a href=&quot;https://de.wikipedia.org/wiki/Plain_text&quot;&gt;Plaintext&lt;/a&gt;. Erstaunlich daran ist, dass
viele dieser Tools viele Jahrzehnte alt sind und heute genauso gut funktionieren
wie damals, vor allem weil sie eine klare Schnittstelle darstellen. Zum Beispiel
kann ich die Protokolle meines Kernels nach der Marke meiner Tastatur durchsuchen:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;% &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;dmesg&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-B2&lt;/span&gt; Cherry &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-n3&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;9.003189&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; usb &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;-2.1.4: New USB device strings: &lt;span class=&quot;token assign-left variable&quot;&gt;Mfr&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;token assign-left variable&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;token assign-left variable&quot;&gt;SerialNumber&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;9.003190&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; usb &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;-2.1.4: Product: USB keyboard
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;9.003191&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; usb &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;-2.1.4: Manufacturer: Cherry&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dabei habe ich &lt;a href=&quot;https://de.wikipedia.org/wiki/Grep&quot;&gt;grep&lt;/a&gt; verwendet, welches in
Textstreams sucht und matchende Zeilen ausgibt. Grep ist einfach, es kann nur suchen.
Durch &lt;a href=&quot;https://de.wikipedia.org/wiki/Pipeline_(Unix)&quot;&gt;Pipes&lt;/a&gt; kann man es mit anderen
Programmen verbinden, z.B. &lt;a href=&quot;https://de.wikipedia.org/wiki/Head_(Unix)&quot;&gt;head&lt;/a&gt;.
Grep ist gut geschrieben, und viele Leute haben sich schon gefragt:
&lt;a href=&quot;https://stackoverflow.com/questions/12629749/how-does-grep-run-so-fast&quot;&gt;Why is grep so fast?&lt;/a&gt;.
In die Optimierung von Grep sind viele Softwareiterationen geflossen, und
&lt;a href=&quot;https://blog.burntsushi.net/ripgrep/&quot;&gt;das Ende der Fahnenstange ist noch nicht erreicht&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Die Logging-Hölle&lt;/h2&gt;
&lt;p&gt;Tatsächlich ist das gegebene Beispiel ganz hervorragend, weil es auch die Schwächen
von Textformaten anzeigt. Das Systemjournal, welches hier von &lt;code&gt;dmesg&lt;/code&gt; (Kernel
Ringbuffer) ausgegeben wurde, ist zeilenbasiert. Jede Zeile stellt eine Ausgabe
eines &lt;code&gt;printk(...)&lt;/code&gt;-Aufrufs im Kernel dar, welche vom Puffer um einen Timestamp
ergänzt wurde (links in den eckigen Klammern, zählt hoch aufgelöst
die Sekunden seit Systemstart). Alles dahinter ist Konvention, so etwa die Tatsache
dass das &lt;code&gt;usb&lt;/code&gt;-Modul sich zu erkennen gibt (sprich per Konvention jeder &lt;code&gt;printk&lt;/code&gt;-Aufruf
im USB-Modul in etwa wie &lt;code&gt;printk(&amp;quot;usb ...&amp;quot;)&lt;/code&gt; aussieht).&lt;/p&gt;
&lt;p&gt;Vor einer Weile stieß ich über den interessanten Blogartikel
&lt;a href=&quot;https://techblog.bozho.net/the-syslog-hell/&quot;&gt;The Syslog Hell&lt;/a&gt;, in der der Autor sich
über die vielen Standard beim Syslog-Interface vieler Unix-Betriebssysteme aufregt.
Auf &lt;a href=&quot;https://news.ycombinator.com/item?id=27104469&quot;&gt;Hackernews hingegen kommentiert man trocken&lt;/a&gt;:
»&lt;em&gt;And yet syslog works to the point where anything sold as an syslog replacement ends up adding
complexity (along with features) rather then an simplification of the core problem.
It&#39;s in general a trend for old unix tools to work better in reality then in theory something
thats rare for more modern tools.
Sure it&#39;s nice been able to use more modern query tools and have graphing libraries available
but syslog grep and awk does get the job done and dont require a lot of resources to
set up and maintain.&lt;/em&gt;«&lt;/p&gt;
&lt;p&gt;Hat diese Person recht? Das mittlerweile im Rahmen von &lt;em&gt;systemd&lt;/em&gt; weit verbreitete
&lt;em&gt;journald&lt;/em&gt; erlaubt binäres Journaling und bringt syslog damit gedanklich ins 21.
Jahrhundert. Das obige Beispiel funktioniert mit einem Austauschformat, welches
eine einfache programmatorische Weiterverarbeitung erlaubt -- nämlich
&lt;a href=&quot;https://www.json.org/&quot;&gt;JSON&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;% journalctl --since=yesterday --output=json | grep -B &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; Cherry | head -n1 | jq
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;__REALTIME_TIMESTAMP&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1623049286198966&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;_MACHINE_ID&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;99[redacted]d5&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;_KERNEL_DEVICE&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;c189:11&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;_HOSTNAME&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sveto&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;SYSLOG_FACILITY&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;_UDEV_SYSNAME&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1-2.1.4&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;_SOURCE_MONOTONIC_TIMESTAMP&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;245529094761&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;_TRANSPORT&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;kernel&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;PRIORITY&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;6&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;MESSAGE&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;usb 1-2.1.4: New USB device found, idVendor=046a, idProduct=b090, bcdDevice= 1.03&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;__CURSOR&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;s=c0[redacted]f0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;SYSLOG_IDENTIFIER&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;kernel&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;_BOOT_ID&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;5f[redacted]d&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;_UDEV_DEVNODE&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/dev/bus/usb/001/012&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;__MONOTONIC_TIMESTAMP&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;29696437839&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;_KERNEL_SUBSYSTEM&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;usb&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Die schillernde Welt der objektorientierten Shells und -Sprachen&lt;/h2&gt;
&lt;p&gt;Tatsächlich tun sich Unix-Shells schwer damit, ein Kommando-Ökosystem zur Bearbeitung von
komplexen Datenformaten zu etablieren. Mit JSON ist mittlerweile ein Standard aus dem Web
in die Systemprogrammierung gekommen, der das schrittweise ändert, doch diese Entwicklung
passiert viele Jahre, nachdem Microsoft mit der
&lt;a href=&quot;https://docs.microsoft.com/de-de/powershell/scripting/overview?view=powershell-7.1&quot;&gt;Windows PowerShell&lt;/a&gt;
eine moderne Alternative zur &lt;a href=&quot;https://de.wikipedia.org/wiki/Cmd.exe&quot;&gt;DOS-Befehlszeile&lt;/a&gt;
entwickelt hat. Diese transportiert Objekte zwischen den Kommandos, welche etwa zum
Beispiel mit SQL-Abfragen weiter bearbeitet werden können. Mangels Windows kann ich
an dieser Stelle keine Beispiele zeigen, aber es gibt jede Menge schönes Material, wenn
man nach »&lt;a href=&quot;https://duckduckgo.com/?t=ffab&amp;amp;q=powershell+example&amp;amp;ia=web&quot;&gt;powershell examples&lt;/a&gt;«
sucht.&lt;/p&gt;
&lt;p&gt;Vor ein paar Tagen habe ich über ein
&lt;a href=&quot;https://twitter.com/denktmit/status/1400808910836150273&quot;&gt;interessantes ACM-Paper getwittert&lt;/a&gt;,
welches die Unix-Shell im Zeichen der Zeit interpretiert:
&lt;em&gt;Greenberg, Kallas, Vasilakis&lt;/em&gt;:
&lt;a href=&quot;https://dl.acm.org/doi/10.1145/3458336.3465294&quot;&gt;Unix Shell Programming: The Next 50 Years&lt;/a&gt;.
Hier werden die beiden experimentellen Shells
&lt;a href=&quot;https://www.usenix.org/conference/atc20/presentation/raghavan&quot;&gt;POSH&lt;/a&gt; und
&lt;a href=&quot;https://github.com/andromeda/pash&quot;&gt;PaSh&lt;/a&gt;
erläutert, die interessante Herausforderungen des modernen Manycore-Processings oder der
&lt;em&gt;data awareness&lt;/em&gt; angehen. Trotzdem habe ich das Gefühl, dass die gängige Praxis des
Shell-Scriptings ist, für leicht komplexere Probleme auf Scriptsprachen wie Ruby, Python
oder Perl auszuweichen. Sie sind etablierter und das Tooling ist besser. Man verlässt
allerdings schnell das Ökosystem der textbasierten Unix-Welt mit ihren &lt;em&gt;einfachen&lt;/em&gt; und
kurzen Tools. Das rächt sich schnell: Alle drei erwähnten Scriptsprachen leiden unter
einem &amp;quot;Global Interpreter Lock&amp;quot;, der ein (effizientes) Multithreading verhindert und
Parallelisierung daher nur per aufwändigem Multiprocessing ermöglicht. Gerade allerdings
Arbeitsverteilung und -Parallelisierung sind Stärken der Shell und damit verbundener
Tools (wie etwa der Job-Managament-Scheduler &lt;a href=&quot;https://slurm.schedmd.com/&quot;&gt;Slurm&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Der Erfolg der textbasierten Standards&lt;/h2&gt;
&lt;p&gt;Die Softwarearchitektur ist häufig Trends und Wellen unterworfen. In meinen Augen ist
eine Konstante, dass Systeme, die für Menschen und Einfachheit geschrieben wurden, viel
Erfolg hatten. Viele Protokolle, die auf TCP/IP basieren, funktionieren in Plaintext,
darunter FTP, HTTP und SMTP. &lt;em&gt;Flat File&lt;/em&gt;-Datenbanken leiden nicht unter einem Vendor
Lockin und ermöglichen das Einlesen und Verabeiten mit diversen Tools. Das
Versionsverwaltungstool &lt;em&gt;git&lt;/em&gt; ist ein Beispiel für eine sehr erfolgreiche Umsetzung
dieses Konzepts. Git ist so einfach und Datei-/Plaintextbasiert, dass es eine
&lt;a href=&quot;https://git.sr.ht/~sircmpwn/shit&quot;&gt;Implementierung gibt, die ausschließlich die POSIX-Shell verwendet&lt;/a&gt;.
Dadurch werden Git-Repositories noch brauchbar sein, lange nachdem viele proprietäre
Datenbankformate nicht mehr lesbar sind. Und auch die gute alte &lt;em&gt;CSV-Tabelle&lt;/em&gt; erfreut
sich ähnlich wie das Plaintext-Markup in &lt;em&gt;Markdown&lt;/em&gt; in manchen Kreisen einer regen
Beliebtheit, als wäre sie nie weg gewesen.&lt;/p&gt;
&lt;p&gt;Auf Plaintext zu verzichten, ist oft einer
&lt;a href=&quot;https://en.wiktionary.org/wiki/premature_optimization&quot;&gt;premature optimization&lt;/a&gt;
geschuldet. Irregeleitete Entwickler:innen sind der Meinung, eine Serialisierung
ihrer Datenstrukturen in einer maschinenlesbaren Form reicht aus. In Folge dessen
lassen sich die Dateien nur noch mit Spezialwerkzeugen bearbeiten, das Debugging ist
aufwändiger als es sein müsste. Unnötige Komplexität ist einer der Killer in Software,
die über kurz und lang auch dessen Autor:in niederstreckt. Für eine Plaintext-Zukunft
der offenen und menschenlesbaren Austauschformate!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Der Blick über den Tellerrand, Volume 1: Stackbasierte Programmiersprachen</title>
      <link>https://denktmit.de/blog/2021-06-29-tellerrand-stackbasierte-programmiersprachen/</link>
      <pubDate>2021-06-29T00:00:00Z</pubDate>
      <guid>https://denktmit.de/blog/2021-06-29-tellerrand-stackbasierte-programmiersprachen/</guid>
      <description>&lt;p&gt;Dieser Artikel ist Teil einer neuen Serie von Blogartikeln, die ich über
&lt;em&gt;Programmierparadigmen&lt;/em&gt; schreiben möchte. Sie sollen dazu anregen, einen
sprichwörtlichen &lt;em&gt;Blick über den Tellerrand&lt;/em&gt; zu wagen: Raus aus den eigenen Strick-
und Entwurfsmustern für Software, den gewohnten Trampelpfaden der Programmiersprache,
die man für Projekte seit Jahren, vielleicht Jahrzehnten verwendet. Dazu folgt zunächst einmal
eine Einordnung, wie dieser Trampelpfad für die allermeisten von uns aussieht.&lt;/p&gt;
&lt;h2&gt;Unser Trampelpfad ist multiparadigmenfähig&lt;/h2&gt;
&lt;p&gt;Die prototypische moderne Programmiersprache ist gar nicht so dogmatisch, wie man meinen
könnte. Wer heute eine Software schreibt, tut dies meistens in einer Sprache, die mindestens
drei Programmierparadigmen ihr eigen nennt:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Imperatives Programmieren&lt;/em&gt;: Der Programmcode ist eine sequentielle Anordnung von
Befehlen, die der Computer abarbeitet. Dabei gibt es in der Regel das Konzept von
&lt;em&gt;Variablen&lt;/em&gt; im Sinne von Speicherplätzen, mit denen gearbeitet wird. Durch &lt;em&gt;Subroutinen&lt;/em&gt;
wird das Programm strukturiert, zu denen gesprungen werden kann. Beliebige Sprungstellen
(&lt;a href=&quot;https://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf&quot;&gt;Goto considered harmful&lt;/a&gt;)
gibt es seit vielen Jahrzehnten nicht mehr in modernen Programmiersprachen.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Objektorientiertes Programmieren&lt;/em&gt;: Datenstrukturen werden mit zugehörigen Subroutinen
in Form von &lt;em&gt;Klassen&lt;/em&gt; organisiert. Mit den originären Konzepten vom objektorientierten
Programmieren (&lt;em&gt;Message Passing&lt;/em&gt;) hat der Defacto-Standard nicht mehr viel zu tun: Wir
sind Polymorphie, Typisierung und Reflektion gewohnt. Konzepte wie protypenbasierte
Klassen, wie sie in JavaScript vorkommen, sind in den verbreiteten &amp;quot;echten&amp;quot; Programmiersprachen
(das muss an der Stelle so sarkastisch und unkommentiert stehen bleiben) nicht verbreitet.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Funktionales Programmieren&lt;/em&gt;: Anonyme Funktionen (Lambdas) und Funktionen als Objekte
erlauben es auch, funktionale Aspekte in moderne Programme einzubringen. So lassen sich
Callbacks, verkettete Funktionsaufrufe, Map/Reduce oder rekursive Algorithmen einfach
umsetzen. Aus der Welt der funktionalen Programmierung haben wir auch Dinge wie Closures,
Funktoren, unveränderliche (immutable) Datentypen geerbt.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ausnahmslos alle populären Programmiersprachen, die man heute vorfindet, folgen diesem Muster.
Lohnt es sich dann überhaupt, etwas anderes zu lernen? Das mentale Programmiermodell muss ja
eigentlich nur ein paar dieser Paradigmen verstehen, um mit Programmcode zurecht zu kommen.
Zunächst also zur Frage: Was ist eigentlich ein Paradigma?&lt;/p&gt;
&lt;h2&gt;Zum Programmierparadigma: Eine Denkschule und Rechnerabstraktion&lt;/h2&gt;
&lt;p&gt;Wer Programmierparadigma verstehen will, der muss ihre historische Entwicklung verfolgen. Sie
war stets eine Abfolge von technischen Möglichkeiten und Anwendungsnötigkeiten. Wer sich auf
die Geschichte von Programmiersprachen macht, entdeckt etwa die berühmte
&lt;a href=&quot;https://de.wikipedia.org/wiki/Softwarekrise&quot;&gt;Softwarekrise&lt;/a&gt; der 1960er-Jahre, als das erste
mal auf großen Skalen die Komplexität von Software ihre Entwickler:innen blockierte.&lt;/p&gt;
&lt;p&gt;In den 1960er-Jahren gab es die ersten &lt;em&gt;Hochsprachen&lt;/em&gt;, welche die Programmierung von Computern
auf einem abstrakteren Level als mittels Maschinenbefehlen (Assemblerinstruktionen) erlaubten.
In Anbetracht der wenigen Kilobyte von Speicher, über die die Digitalrechner dieser Zeit verfügten,
mutet es doch als ziemlicher Luxus an, diesen Speicher nicht mehr direkt anzusprechen, sondern mit ihm
indirekt zu agieren und einen Compiler die Abbildung des Programmcodes auf die tatsächliche
Maschine durchführen zu lassen. Daran hat sich in den letzten 70 Jahren vergleichsweise wenig
geändert: Auch moderner Code wird zu Maschinencode kompiliert. Die Aufgabe des Compilers ist es
also stets, ein abstrakteres Rechenmodell, welches die Entwickelnden im Kopf haben, auf die echte
&lt;em&gt;Registermaschine&lt;/em&gt; mit ihren physischen Bausteinen wie CPU-Registern, Arbeitsspeicher oder
nicht-flüchtigem Speicher (traditionell der Festplattenspeicher, heute SSDs) abzubilden. Eine
Aufgabe von &lt;em&gt;Libraries&lt;/em&gt; ist es, Computerressourcen zu abstrahieren und darüberhinaus also auch
etwa den Zugang zu Speicher- und Netzwerkressourcen in eine sprachliche Form zu bringen, welche
den Entwickelnden erlaubt darauf in geeigneter Form zuzugreifen – also in der Regel vor allem
unkompliziert, mit wenigen Anweisungen und die Komplexität und Verschiedenheit der technischen
Implementierung versteckend. Noch weiter gehen &lt;em&gt;Frameworks&lt;/em&gt;, die sich von &lt;em&gt;Libraries&lt;/em&gt; vor allem
darin unterscheiden, dass sie in der Regel den Programmfluss übernehmen und so eine &lt;em&gt;Inversion
der Kontrolle&lt;/em&gt; zur Folge haben. Das Framework erlaubt so die besonders schnelle und
gleichartige Entwicklung von Standardsoftware nach einem Muster.&lt;/p&gt;
&lt;p&gt;Die Gesamtheit von Frameworks, Libraries, Programmiersprachen und &lt;em&gt;Build-Systemen&lt;/em&gt;, welche den
damit geschriebenen Code zu etwas Ausführbarem umwandeln, führt zu einer Art gedanklichem
Korsett. Das ist keineswegs ausschließlich so negativ gemeint, wie der Begriff meint: Das
&lt;em&gt;Tooling&lt;/em&gt; stellt sich als eine effektive Methode heraus, gewisse Probleme zu bearbeiten.&lt;/p&gt;
&lt;p&gt;Ein typisches Beispiel ist der bahnbrechende Erfolg, den
&lt;a href=&quot;https://de.wikipedia.org/wiki/JQuery&quot;&gt;jQuery&lt;/a&gt; zu seiner Entstehungszeit ca. 2006 herum hatte.
Es ist wahrscheinlich nicht untertrieben, diese Library als einen Motor des
&lt;a href=&quot;https://de.wikipedia.org/wiki/Web_2.0&quot;&gt;Web 2.0&lt;/a&gt; zu bezeichnen. Die Library ermöglichte es,
auf Webseiten typische interaktive Tätigkeiten (z.B. einen Button einzublenden oder einen
Inhalt nachzuladen) in nur wenigen Zeichen Code zu implementieren. Dieser lief fortan auf einer
Großzahl der damals sehr verschiedenen Browser zuverlässig. Die Library bot also nicht nur
eine Abstraktionsstufe zu den Browser-Schnittstellen (Application Interfaces, kurz APIs)
dieser Zeit, sondern durch ihr objektorientiert-funktionales Programmiermodell, das
querybasierte Arbeiten mit einer &lt;em&gt;Selektorengine&lt;/em&gt; (welche das DOM-Parsing durch
CSS-artige Queries erlaubte) und das &lt;em&gt;Method Chaining&lt;/em&gt; auch eine Möglichkeit sehr prägnanten
Code zu schreiben. Durch die höhere Abstraktionsstufe fiel die mentale Last für Entwickelnde
und komplexere Webanwendungen waren möglich: Es war die Geburtsstunde des &lt;em&gt;Web 2.0&lt;/em&gt; mit seiner
erhöhten Interaktivität und neuen Anwendungsmodellen, die etwa &lt;em&gt;User-Generated Content&lt;/em&gt; in
den Vordergrund stellten.&lt;/p&gt;
&lt;p&gt;Solche Paradigma sind immer auch &lt;em&gt;Denktschulen&lt;/em&gt;, weil eine ganze Generation von Entwickelnden
erstmalig nicht mehr mit der vorangegangenen Art, Software zu entwickeln, konfrontiert wird,
sondern nur noch mit der neuen, abstrakteren Art. Ich habe das Beispiel &lt;em&gt;jQuery&lt;/em&gt; bewusst
gewählt, weil es nun schon 15 Jahre alt ist und tatsächlich mehrere »Entwicklergenerationen«
zurück liegt! Danach kamen noch viel mehr Abstraktionsstufen, die Konzepte wie Virtual DOM,
double data binding, »Reaktivität« und vieles mehr einführten. Die junge Generation von
Entwickelnden kennt daher nur noch begrenzt den Mehrwert von »einfachen« Libraries wie jQuery.
Ihnen fehlt letztlich ein älteres Programmierparadigma, welches sie nur in den Geschichtsbüchern
nachschlagen können.&lt;/p&gt;
&lt;p&gt;Doch der Blick lohnt sich: Verschiedene Paradigma sind zur Lösung verschiedener Probleme
geeignet. Auch heute noch gibt es Webseiten, die besser &lt;em&gt;statisch&lt;/em&gt; als &lt;em&gt;dynamisch&lt;/em&gt; geschrieben
werden, wo andere Zugänge als die abstrakteren unserer Zeit sich also besser eignen. Genauso
sieht es auch mit anderen Bereichen der Softwaretechnik aus, wo weniger Abstraktion hilfreich
ist. Man denke an den immerwährenden »Kampf« von &lt;em&gt;interpretiertem&lt;/em&gt; Programmcode zu solchem,
der &lt;em&gt;kompiliert&lt;/em&gt; wird. Diese Unterscheidung bezeichnet traditionell die Grenze zwischen
einfachen &lt;em&gt;Scriptsprachen&lt;/em&gt; und komplexeren &lt;em&gt;Programmiersprachen&lt;/em&gt;. Hier gilt die klassische
Weisheit, dass es für jedes Problem das richtige Werkzeug gibt und mehr Abstraktion, wie sie
die interpretierten Scripte einführen, nicht immer hilfreich ist.&lt;/p&gt;
&lt;h2&gt;Here to be dragons: In die Welt der Stacks&lt;/h2&gt;
&lt;p&gt;Tauchen wir also ein in unseren ersten Blick über den Tellerrand: In die Welt der
&lt;em&gt;stackorientierten Programmiersprachen&lt;/em&gt;. Jeder, der sich schon einmal mit den Programmiersprachen
C oder C++ beschäftigt hat, kennt die Unterscheidung von &lt;em&gt;Stack&lt;/em&gt; (engl. Stapel) zu &lt;em&gt;Heap&lt;/em&gt;
(engl. Haufen): Während der &lt;em&gt;Stack&lt;/em&gt; typischerweise den Zustand des Programmflusses
speichert (&lt;a href=&quot;https://de.wikipedia.org/wiki/Aufrufstapel&quot;&gt;Aufrufstapel&lt;/a&gt;) und geeignet ist,
eine endliche und überschaubare Menge von temporären und in ihrer Größe vorhersagbaren Variablen
zu speichern, ist der &lt;em&gt;Heap&lt;/em&gt; eher für eine große Menge von dynamischen Daten geeignete, die
zur Laufzeit &lt;a href=&quot;https://de.wikipedia.org/wiki/Allokation_(Informatik)&quot;&gt;alloziiert&lt;/a&gt; werden.
Diese dynamischen Datentypen werden in der Regel über &lt;em&gt;Pointer&lt;/em&gt; miteinander verknüpft, welche
die eigentliche Dynamik ermöglichen. Gleichzeitig ist die Traversierung solcher Datenstrukturen
langsamer, da eben diese Pointer aufgelöst werden müssen, um die Speicheradressen der
angesprochenen Datenstrukturen herauszufinden. Performanceorientierte Entwickler:innen die
maschinennah arbeiten, versuchen daher oft, dynamische Datenstrukturen auf dem Heap zu vermeiden
und auf dem Stack zu arbeiten, denn ein Sprichwort sagt, der &lt;em&gt;Stack ist immer warm&lt;/em&gt;, befindet
sich also wegen vielen Aufrufen/Sprüngen stets im Prozessorcache.&lt;/p&gt;
&lt;p&gt;Tatsächlich ist diese Einführung in die Stacks leider nur begrenzt hilfreich, um stackorientiertes
Programmieren zu lernen. Wer in einer stackorientierten Programmiersprache arbeitet, dem stellen
sich solche Fragen nämlich gar nicht, da es dort eigentlich &lt;em&gt;nur&lt;/em&gt; einen Stack gibt und sonst
gar nichts. Sie war eher zur Einordnung gedacht, als Brücke in die Welt der &lt;em&gt;Stackmaschinen&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Stackmaschinen, Forth und Real Life-Anwendungen?&lt;/h2&gt;
&lt;p&gt;Viele Programmierparadigmen wurden im ausgehenden 20. Jahrhundert erfunden und waren in ihrer
Zeit prohibitiv aufwändig zu implementieren oder benötigten ein ganz anderes physisches
Rechenmodell. So ähnlich ist es auch bei den
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_machine&quot;&gt;Stackmaschinen&lt;/a&gt;, die als abstraktes Rechnermodell
ähnlich zu den (uns viel geläufigeren) Registermaschinen oder der mathematisch abstrakten
Turingmaschine arbeiten.&lt;/p&gt;
&lt;p&gt;Eine recht populäre Stackprogrammiersprache ist
&lt;a href=&quot;https://en.wikipedia.org/wiki/Forth_(programming_language)&quot;&gt;Forth&lt;/a&gt;. Die verlinkte Wikipedia-Seite
beinhaltet viele Beispiele, wie eine Programmierung mit so einer Sprache aussieht. Solche
Beispiele beschränken sich in der Regel auf gänzlich grundlegende Rechenoperationen, etwa
die Implementierung von arithmetischen Operationen (Grundrechenarten auf Zahlen oder Objekten
der linearen Algebra). Der exotische Beitrag entsteht noch durch Nutzung etwa der
&lt;em&gt;Reverse Polish Notation&lt;/em&gt; (daran kann man sich gewöhnen), es sieht schlicht und ergreifend
alles komplett anders aus als in einem gewöhnlichen Programm einer heutzutage verbreiteten
Programmiersprache. Wie macht man damit etwas komplizierteres?&lt;/p&gt;
&lt;p&gt;Nun, zum einen gibt es natürlich auch hier die Möglichkeit Programme in Subroutinen zu
organisieren. So gibt es letztlich auch Libraries und Frameworks, z.B.
&lt;a href=&quot;http://www.1-9-9-1.com/&quot;&gt;das Webframework »1991« für Forth&lt;/a&gt; welches mit seinem Democode doch
eigentlich ganz familiär aussieht für jeden, der Webframeworks kennt:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt; Load &lt;span class=&quot;token number&quot;&gt;1991&lt;/span&gt;.
include &lt;span class=&quot;token number&quot;&gt;1991&lt;/span&gt;.fs

&lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt; Define our route handlers.
&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; handle-/ &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; -- addr u &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt; Any string returned by the handler
    &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt; will be output to the browser.
    s&lt;span class=&quot;token string&quot;&gt;&quot; Hello, 1991.&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt; Set up our routes.
/1991 / handle-/

&lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt; Start the server on port &lt;span class=&quot;token number&quot;&gt;8080&lt;/span&gt;.
&lt;span class=&quot;token number&quot;&gt;8080&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1991&lt;/span&gt;:&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Auf der Seite des Frameworks finden sich viele Beispiele, wie auch Templateverarbeitung mit
Forth funktionieren kann. Dieser Anwendungsfall zeigt, dass man mit stackorientierten Sprachen
auch »from first Principles« komplexe Anwendungen schreiben kann. Wem dieses Beispiel gefällt
und wer etwas in der Forth-Welt stöbern möchte, kann sich die
&lt;a href=&quot;https://news.ycombinator.com/item?id=19146767&quot;&gt;zugehörige Hackernews-Diskussion&lt;/a&gt; einmal
anschauen.&lt;/p&gt;
&lt;p&gt;Darüber stößt man auch schnell auf andere stackorientierte Sprachen, z.B. die
&lt;a href=&quot;http://kittenlang.org/&quot;&gt;Kitten Programming Language&lt;/a&gt; welche starke Typisierung mitbringt.
Die Programmierung dieser Sprache sieht überhaupt nicht mehr so sehr nach stackorientiert
aus, sondern bereits ziemlich High-Level. Tatsächlich ist das eine der großen Stärken der
stackorientierten Welt, dass man mit dem Maschinenmodell leicht große Abstraktionen hinbekommen
kann. So basiert zB. auch die berühmte &lt;em&gt;embedded Scriptingsprache&lt;/em&gt;
&lt;a href=&quot;https://www.lua.org/&quot;&gt;Lua&lt;/a&gt; auf einem Stackmaschinenmodell bzw. auf einer stackorientierten
Programmiersprache, obwohl Lua eine moderne Multiparadigmensprache ist.&lt;/p&gt;
&lt;p&gt;Zuguterletzt hier noch einige Materialien für die Leserschaft, die sich weiter am Beispiel von
Forth in der Welt der stackorientierten Sprachen erkundigen möchte: Es gibt eine jährliche
&lt;a href=&quot;http://www.complang.tuwien.ac.at/anton/euroforth/&quot;&gt;europäische Forth-Konferenz&lt;/a&gt;, eine
&lt;a href=&quot;https://www.forth.com/resources/forth-web-sites/&quot;&gt;Liste von Forth-Webseiten&lt;/a&gt; oder zB.
eine &lt;a href=&quot;https://www.taygeta.com/fsl/sciforth.html&quot;&gt;wissenschaftliche Forth-Library&lt;/a&gt;. Ich denke
die Materialien zeigen, dass Forth weit weg davon ist, in den Programmiereralltag Einklang
zu finden. Wer Forth nur eine Chance geben will, wenn seine IDE eine Unterstützung dafür
bereithält, wird schnell aufgeben müssen. Wo stackorientierte Modelle aber durchaus lebendig
sind, ist sowohl in der Hardware- und Firmware-Szene (hauptsächlich dank ihrer geringen
Anforderungen an die Compiler- und Laufzeitinfrastruktur) sowie als eingebettete Systeme
in größere Anwendungen. Es gibt eine ganz wunderbare Diskussion dazu auf Stack Overflow,
mit der ich hier schließen möchte:
&lt;a href=&quot;https://stackoverflow.com/questions/1415910/forth-interpreter-in-java&quot;&gt;Forth Interpreter in Java – Will it be efficient?&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Die IDE-Wars</title>
      <link>https://denktmit.de/blog/2021-07-02-repl-cli-ide-wars/</link>
      <pubDate>2021-07-02T00:00:00Z</pubDate>
      <guid>https://denktmit.de/blog/2021-07-02-repl-cli-ide-wars/</guid>
      <description>&lt;p&gt;Heute möchte ich einmal über ein Thema schreiben, welches in der Genossenschaft sehr
intensiv diskutiert wird: Integrierte Entwicklungsumgebungen, kurz &lt;em&gt;IDEs&lt;/em&gt; (für englisch
&lt;em&gt;Integrated Development Environments&lt;/em&gt;). Dem gegenüber stehen vor allem die &lt;em&gt;REPLs&lt;/em&gt;,
englisch für &lt;em&gt;Read Eval Print Loop&lt;/em&gt;, also ein Arbeitsablauf, der sich auf deutsch
vielleicht mit &lt;em&gt;LAPS&lt;/em&gt; abkürzen ließe, für Lesen, Ausführen, Ausgeben, Schleife.
Dieses Prinzip erinnert etwas an &lt;a href=&quot;https://de.wikipedia.org/wiki/Eat_Pray_Love&quot;&gt;Eat Pray Love&lt;/a&gt;
oder &lt;a href=&quot;https://medium.com/study-tips/eat-sleep-exercise-repeat-7a12ba07c84d&quot;&gt;Eat Exercise Sleep Repeat&lt;/a&gt;.
Es handelt sich durchaus um ein Paradigma, ist aber nicht so exotisch, dass er Teil
meiner Blogartikelserie &lt;em&gt;Blick über den Tellerrand&lt;/em&gt; wäre, welche ich diese Woche
mit einem Text über
&lt;a href=&quot;https://denktmit.de/2021/06/29/tellerrand-stackbasierte-programmiersprachen.html&quot;&gt;stackbasierte Programmiersprachen&lt;/a&gt;
angefangen habe.&lt;/p&gt;
&lt;p&gt;Tatsächlich wurde ich für diesen Blogartikel motiviert von einem Blogartikel
&lt;a href=&quot;https://vlaaad.github.io/clj-vs-cli&quot;&gt;REPL vs CLI: IDE wars&lt;/a&gt;, der gestern erschien. Dort
geht es vor allem um die &lt;a href=&quot;https://clojure.org/&quot;&gt;Programmiersprache Clojure&lt;/a&gt; und die
&lt;a href=&quot;https://clojure.org/guides/repl/introduction#_what_is_a_repl&quot;&gt;Clojure-REPL&lt;/a&gt;.
Der &lt;a href=&quot;https://vlaaad.github.io/about/&quot;&gt;schwedische Autor&lt;/a&gt; verweist auch am Anfang seines
Artikels darauf, dass er nicht der erste ist, der über die Frage, was denn nun alles eine IDE
sein kann, philosophiert.&lt;/p&gt;
&lt;h2&gt;Die Liebe zur Entwicklungsumgebung&lt;/h2&gt;
&lt;p&gt;Softwareentwickler:innen pflegen oft eine Affinität zu Computern, die sich über ihre Arbeit
hinaus auf das Betriebssystem, seine Konfiguration bis hin zur verwendeten Hardware und
physischen Arbeitsumgebung fortsetzt. Wo es früher darum ging, mit welchem Farbschema man
unter Windows 95 am besten entwickeln kann, waren es später Texteditoren und Syntaxhighlighting,
&lt;a href=&quot;https://duckduckgo.com/?t=ffab&amp;amp;q=best+programming+font&amp;amp;ia=web&quot;&gt;die verwendete Schriftart&lt;/a&gt;,
die Anzahl und Ausrichtung der Monitore, Tastaturen, mobile Endgeräte, usw – die Liste lässt
sich fast endlos fortsetzen.&lt;/p&gt;
&lt;p&gt;Besondere Vorlieben gibt es selbstverständlich auch zum Software-Ökosystem (oder &lt;em&gt;Softwarestack&lt;/em&gt;),
mit welchem am liebsten programmiert und entwickelt wird. Dazu gehört nicht nur die
&lt;a href=&quot;https://duckduckgo.com/?t=ffab&amp;amp;q=favourite+programming+language&amp;amp;ia=web&quot;&gt;Lieblingsprogrammiersprache&lt;/a&gt;,
sondern auch die &lt;a href=&quot;https://duckduckgo.com/?t=ffab&amp;amp;q=favourite+web+framework&amp;amp;ia=web&quot;&gt;Lieblings-Frameworks&lt;/a&gt;
und -Libraries, die &lt;a href=&quot;https://duckduckgo.com/?t=ffab&amp;amp;q=favourite+database&amp;amp;ia=web&quot;&gt;Lieblingsdatenbank&lt;/a&gt;,
und so weiter. Zum Entwickeln gehört ferner das
&lt;a href=&quot;https://duckduckgo.com/?t=ffab&amp;amp;q=favourite+build+system&amp;amp;ia=web&quot;&gt;Lieblings-Buildsystem&lt;/a&gt;,
welches sich um das Aufrufen des nötigen Compilers (auch da gibt es manchmal Varianten, die
zur Präferenzenbildung einladen) kümmert.&lt;/p&gt;
&lt;p&gt;Zum Entwickeln kann aber auch noch mehr gehören: Etwa Werkzeuge, die die Entwickler:in beim Suchen und
Finden von Fehlern unterstützt. Die Rede ist etwa vom &lt;a href=&quot;https://duckduckgo.com/?t=ffab&amp;amp;q=favourite+debugger&amp;amp;ia=web&quot;&gt;Lieblings-Debugger&lt;/a&gt;
(langsam ein bisschen viel &lt;em&gt;Lieblings-...&lt;/em&gt;, oder?) oder vom
&lt;a href=&quot;http://stackoverflow.com/questions/26663/ddg#266969&quot;&gt;Lieblings-Profiler&lt;/a&gt;
(diesmal kein DuckDuckGo-Link!).&lt;/p&gt;
&lt;h2&gt;Anatomie und Benutzung einer IDE&lt;/h2&gt;
&lt;p&gt;Um all diese Werkzeuge irgendwie ansprechen zu können, haben Entwickler:innen irgendwann angefangen,
ein Superwerkzeug zu entwickeln welches alle anderen Werkzeuge integriert. Das Ergebnis war die
&lt;em&gt;integrierte Entwicklungsumgebung&lt;/em&gt;, die eierlegende Wollmilchsau welche den Anspruch hat, alle
Wünsche zu beantworten und den Entwickler:innen-Alltag komplett abzubilden. Idealerweise läuft
diese Umgebung immer im Hintergrund, startet morgens beim Aufstehen und geht abends zum
Zu-Bett-Gehen wieder aus. Da Entwickler:innen ja auch gerne teure schnelle Computer
kaufen (siehe oben), gehören Entwicklungsumgebungen häufig zu den anspruchsvollsten Programmen,
die ein solcher Computer bewältigen kann. Komplex und langsam werden sie vor allem durch
große speicherintensive Datenbanken und zugehörige Indexierer, welche etwa den Code ständig
im Hintergrund parsen und Cross-Referenzing ermöglichen, die zugehörigen Dokumentationen
zu Code, Sprache und Libraries (oft viele tausend Seiten dicke Bücher) vorhalten und eben
nebenbei auch noch alle obengenannten Tools per Mausklick verfügbar machen. Zu einer modernen
Entwicklungsumgebung für spezielle Plattformen gehört oft noch ein Simulator jener
Plattform (z.B. eines Smartphones). Auch die komplette Entwicklungsgeschichte des Codes wird
per Anschluss an ein Revisionskontrollsystem (z.B. &lt;em&gt;git&lt;/em&gt;) vorgehalten.&lt;/p&gt;
&lt;p&gt;Um all die Funktionen unter einen Hut zu bringen, sehen die Benutzeroberflächen von
Entwicklungsumgebungen aus wie das Cockpit eines Jumbojets. An allen Ecken und Kanten gibt es
Buttons und Menüs, Ausklappfenster und Indikatorzeichen in allen Farben des Regenbogens.
Für den eigentlichen Quellcode, der den Kern der Arbeit der Entwickler:in ausmacht, bleibt
auf dem Bildschirm so wenig Platz übrig. Und auch der Quellcode ist durchzogen von farbigen
Linien, gerade, gewellt oder gestrichelt, um die vielen Anmerkungen, die die IDE vorschlägt,
unterzubringen.&lt;/p&gt;
&lt;p&gt;Um mit einer solchen IDE effizient zu arbeiten, muss die Entwickler:in eine enorme
Lernkurve bewältigen. Idealerweise lernt sie zunächst die eigentliche Programmiersprache,
die zu benutzenden Frameworks und Libraries sowie Domänenwissen in der Anwendung, die sie
vorhat zu schreiben. Anschließend muss sie lernen, welche Werkzeuge sie benötigt (z.B. einen
Debugger) und wie sie ihn über die IDE anspricht. Erst nach Bewältigung der Lernkurve
stellt sich der Vorteil einer IDE ein, und zwar zuvorerst die Zeitersparnis, da alle
Werkzeuge zur Hand sind. Viele Vorteile kann eine IDE auch erst ausspielen, wenn der
damit bearbeitete Code sehr groß geworden ist, sodass eine computerunterstützte Navigation
schneller als eine händische vonstatten geht. Nachdem ein solches Wissen aufgebaut wurde,
kann eine IDE sich als sehr mächtiges Werkzeug herausstellen, was die Effizienz der
Entwickler:in erhöht.&lt;/p&gt;
&lt;h2&gt;Die Zukunft der IDE: Programmieren mit der künstlichen Intelligenz&lt;/h2&gt;
&lt;p&gt;Ich beobachte generell die letzten Jahrzehnte eine Tenden zu immer komplexeren Frameworks
und Libraries, die sich eigentlich auch nur mit immer komplexeren Entwicklungsumgebungen
beherrschen lassen. Dabei verschmelzt die Idee, dass der Computer der Entwickler:in beim
Programmieren hilft, mittlerweile mit Ansätzen der künstlichen Intelligenz, den Computer
beim Entwickeln zu unterstützen. Vor wenigen Tagen wurde etwa der
&lt;a href=&quot;https://copilot.github.com/&quot;&gt;Github Coplit&lt;/a&gt; angekündigt, ein Tool zum Erzeugen von
Textblöcken in &lt;em&gt;Programmiersprache&lt;/em&gt; auf Basis von von der Entwickler:in in
&lt;em&gt;natürlicher Sprache&lt;/em&gt; formulierten Kommentaren.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://denktmit.de/E5D6uw2XIBAkU4u.jpeg&quot; alt=&quot;Github Copilot Screenshot&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Mit Bildern wie dem obigen wurde der &lt;em&gt;Copilot&lt;/em&gt; angekündigt.
&lt;a href=&quot;https://twitter.com/nickjshearer/status/1409902649625956361?s=20&quot;&gt;In den sozialen Medien&lt;/a&gt;
wurde gerade dieser Screenshot zerrissen, weil er die Todsünde vorschlägt, Geldbeträge
als binäre Fließkommazahlen darzustellen (statt als Dezimalzahlen).&lt;/p&gt;
&lt;h2&gt;Flink im Geiste: Eat, Sleep, Exercise, Repeat&lt;/h2&gt;
&lt;p&gt;Nach dieser Exkursion zu den &lt;a href=&quot;https://en.wikipedia.org/wiki/Frontier&quot;&gt;Frontiers&lt;/a&gt; der
Softwareentwicklung nun zurück zur Kernfrage, was das Softwareentwickeln eigentlich
ausmacht. Die Referenz auf &lt;em&gt;Eat, Sleep, Exercise, Repeat&lt;/em&gt; war nicht nur anekdotisch
gemeint, sondern gehört auch irgendwie zum Selbstverständnis des Berufes der
Softwareentwickler:in. &lt;em&gt;Lebenslanges Lernen&lt;/em&gt; setzt man bei den praktizierenden
Informatiker:innen in der Regel voraus, um auf Trends und aktuelle Entwicklungen
Rücksicht zu nehmen. Sowas institutionalisieren wir Entwickler:innen z.B. auch
mit &lt;a href=&quot;https://duckduckgo.com/?t=ffab&amp;amp;q=coding+dojo&amp;amp;ia=web&quot;&gt;Coding-Dojos&lt;/a&gt;. Das
&lt;em&gt;Exercise&lt;/em&gt; ist also nicht (nur) auf unser körperliches Wohlbefinden gemeint,
sondern auch auf unser geistiges.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Komplexität&lt;/em&gt; ist der Erzfeind von Entwickler:innen und einer der Tode, die ein
Softwareprojekt sterben kann. Natürlich gehört es zu den wesentlichen Aufgaben bzw.
Kompetenzen von uns als &lt;em&gt;Denktmitties&lt;/em&gt;, Komplexität zu strukturieren,
organisieren und beherrschbar zu machen. Eine IDE kann dabei eine große Hilfe sein,
vor allem wenn ein &lt;em&gt;Legacy-Projekt&lt;/em&gt; (also ein Projekt, in dem es viel alten Code
gibt) übernommen wird. Mit viel Erfahrung kann sich eine Entwickler:in dabei auch
eine gewisse &lt;em&gt;Flinkheit&lt;/em&gt; erhalten, vor allem nachdem eine Einarbeitungszeit
überwunden wurde.&lt;/p&gt;
&lt;p&gt;In dieser Einarbeitungszeit geht viel Zeit darauf, herauszufinden welche Aufgabe
bestimmte Code-Abschnitte übernehmen. Eine solche sprichwörtlich »forensische
Studie« (man könnte auch &lt;em&gt;Leichenschau&lt;/em&gt; sagen, aber das wäre sehr abwertend)
kann bis runter auf die Bedeutung einzelner Code-Zeilen oder Teilen von Zeilen
gehen.&lt;/p&gt;
&lt;p&gt;Sehr hilfreich kann es in so einem Zusammenhang sein, einfach einmal Teile von
Code in einer möglicherweise isolierten Umgebung ausführen zu können, um ihre
Wirkung (etwa in Form eines Rückgabewertes) zu untersuchen. Hier kommen wir in
die Welt der &lt;em&gt;REPLs&lt;/em&gt;, worüber
&lt;a href=&quot;https://vlaaad.github.io/clj-vs-cli&quot;&gt;der zugrundeliegende Blogeintrag für Clojure ausführlich spricht&lt;/a&gt;.
Besonders bemerkenswert ist ein über diesen Blogeintrag gemachter
&lt;a href=&quot;https://news.ycombinator.com/item?id=27700206&quot;&gt;Kommentar auf Hackernews&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
There is a significant, qualitative difference between using a language that designed for REPL use and one that isn’t.
&lt;p&gt;Those boundaries you talk of are the crux of the issue. A highly dynamic, completely expression based language is going to enable a much different experience. Homoiconicity also plays an important role here, because you can ispect and parse code within the language, with the same functions and algorithms as everything else.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Dieser erste Satz ist zu betonen: &lt;em&gt;Es gibt einen signifikanten qualitativen
Untesrschied dazwischen, eine Sprache zu benutzen, die für die Benutzung
in einer REPL designt wurde und einer die es nicht wurde&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Beispiele für Sprachen, für die eine REPL primär nicht angedacht war, sind
klassische Programmiersprachen wie Java, C, C++ oder Fortran, aber auch
Scriptsprachen wie Perl oder Ruby bis hin zu JavaScript. Das heißt natürlich
nicht, dass es nicht trotzdem REPLs für diese Sprachen gibt. In jedem Browser
findet sich etwa mittlerweile eine &lt;em&gt;Entwicklerkonsole&lt;/em&gt;, in der man JavaScript
im Kontext des aktuellen Browserfensters in einer REPL ausführen kann. Auch
für C++ gibt es mittlerweile einen Interpreter
(&lt;a href=&quot;https://github.com/root-project/cling&quot;&gt;cling&lt;/a&gt;) mit einer REPL.&lt;/p&gt;
&lt;p&gt;Beide Sprachen sind in ihrer REPL benutzbar, aber nicht besonders gut. Das
liegt eben genau daran, dass die Sprachen nicht zur Benutzung einer REPL
»designt« wurden. Zu dem Design gehört vor allem die frühe Verfügbarkeit
einer REPL und ihrem häufigen Einsatz etwa in Dokumentationen.
Interessant ist an der Stelle auch der Blogartikel
&lt;a href=&quot;http://vvvvalvalval.github.io/posts/what-makes-a-good-repl.html&quot;&gt;What makes a good REPL?&lt;/a&gt;
Zu den zentralen Punkten gehört etwa, dass eine REPL die Programmiersprache
&lt;em&gt;zugänglich&lt;/em&gt; macht, in dem sie es erlaubt kleine Bruchstücke gut und
unabhängig testen zu können. Dabei geht es weniger darum, ob die Sprache z.B.
viele mächtige Einzeiler hervorbringt (wie etwa Perl), sondern darum wie die
Libraries (das »Ökosystem«) funktionieren. Gibt es in einer Sprache mit
anwendungsspezifischen Libraries die Möglichkeit, gehaltvolle Einzeiler zu
schreiben? Die REPL steht und fällt mit aussagekräftigen kurzen Statements,
ansonsten verliert sie ihre Praktikabilität.&lt;/p&gt;
&lt;p&gt;Ich möchte an dieser Stelle den ebengenannten Blogartikel zitieren:
&lt;em&gt;What makes a programming language REPL-friendly?&lt;/em&gt; Als Antwort wird
geliefert:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Data literals&lt;/em&gt;. That is, the values manipulated in the programs have a textual representation which is both readable for humans and executable as code. The most famous form of data literals is the JavaScript object Notation (JSON). Ideally, the programming language should make it idiomatic to write programs in which most of the values can be represented by data literals.
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Immutability&lt;/em&gt;. When programming in a REPL, you&#39;re both holding on to evaluation results and viewing them in a serialized form (text in the output); what&#39;s more, since most of the work you&#39;re doing is experimental, you want to be able confine the effects of evaluating code (most of the time, to no other effect than showing the result and saving it in memory). This means you&#39;ll tend to program with values, not side-effects. As such, programming languages which make it practical to program with immutable data structures are more REPL-friendly.
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Top-level definitions&lt;/em&gt;. Working at the REPL consists of (re-)defining data and behaviour globally. Some languages provide limited support for this (especially some class-based languages); sometimes they ship with REPLs that &#39;patch&#39; some additional features to the language for this sole purpose, but in practice this results in an impedance mismatch between the REPL and an existing codebase - you should really be able to seamlessly transfer code from one to the other. More generally, the language should have semantics for re-defining code while the program is running - interactivity should not be an afterthought in language design!
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Expressive power&lt;/em&gt;. You may think it&#39;s a bit silly to mention this one, but it&#39;s not a given. For the levels of sophistication we are aiming for, we need our languages to have clear and concise syntax which can express powerful abstractions that we know how to run efficiently, and there is no level of interactivity that can make up for those needs. This is why we don&#39;t write most of our programs as Bash scripts.
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Python&lt;/em&gt; soll als positives Beispiel einer Programmiersprache dienen,
die als REPL-Sprache konzipiert wurde. So wird in der Standardbibliothek der
Kernsprache großer Wert darauf gelegt, dass es für Datenstrukturen sinnvolle textuelle
Repräsentationen gibt. Viele wichtige Libraries nehmen dieses Konzept auf, sodass man
oft die Ausgabe direkt (in die Zwischenablage) kopieren kann und an anderer Stelle
einfügen kann.&lt;/p&gt;
&lt;h2&gt;Fazit&lt;/h2&gt;
&lt;p&gt;Eine REPL kann auch Teil einer IDE sein, die beiden Konzepte schließen sich nicht aus.
Als unabhängiges Tool ist die REPL ein Werkzeug, welches experimentelles und
schnelles Entwickeln unterstützt und dabei eine enge Zusammenarbeit der Entwickler:in
mit dem Code in den Vordergrund rückt. Bewusst habe ich in diesem Artikel nicht die
Ökosysteme um meine sonst gern genannte Programmiersprache &lt;em&gt;LISP&lt;/em&gt; erwähnt, welche das
Schreiben eines Codes mit seiner Ausführung verschmelzen lassen. Auch habe ich
versucht, nicht wieder das Java-Ökosystem zu zerreißen, wie ich es sonst gerne mache.
Es gibt sicherlich eine Berechtigung für das Schreiben von großen, unübersichtlichen
Codes die sich als Monolith auch nicht einfacher zergliedern lassen, oder von – im
kompletten Gegenteil – einer unüberschaubaren Anzahl von Libraries, deren Zusammenarbeit
sich nicht anders als mit IDEs warten lässt. Meine persönliche Meinung über IDEs vs.
REPLs ist in diesem Text sicher an einigen Stellen durchgescheint, sodass ich mir hier
kein weiteres Urteil erlaube. Mit dem Motto des Textes möchte ich schließen: Vergesst
nicht vor lauter Essen, Trainieren und Wiederholen das Schlafen! :-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Martialische Redewendungen im beruflichen Alltag</title>
      <link>https://denktmit.de/blog/2021-08-25-kriegs-sport-sprache/</link>
      <pubDate>2021-08-25T00:00:00Z</pubDate>
      <guid>https://denktmit.de/blog/2021-08-25-kriegs-sport-sprache/</guid>
      <description>&lt;p&gt;Das Thema &lt;em&gt;Sprache&lt;/em&gt; ist öfters Gegenstand dieses Blogs: Sowohl natürliche
als auch Programmiersprachen werden hier regelmäßig diskutiert.
Heute soll es wieder einmal um die natürliche Umgangssprache gehen, wie wir
sie vor allem im beruflichen Kontext verwenden. Dabei werde ich mich vor allem
auf die deutsche Sprache konzentrieren.&lt;/p&gt;
&lt;h2&gt;Das willensstarke Geschäftstreffen&lt;/h2&gt;
&lt;p&gt;In vielen Zusammenhängen gilt immer noch das recht des Stärkeren: Wer seinen
Willen aggressiv und furchteinflößend ausdrückt, macht damit klar, dass
er es ernst meint, wichtige Ziele verfolgt und gewillt ist, Hindernisse in
Kauf zu nehmen. Da die Gewaltausübung in unseren Breiten mittlerweile verpönt
ist, sind Drohgebärden wie das Hauen mit der Faust auf den Tisch nicht mehr
angebracht. Stattdessen dient Sprache dazu, seine Motivation unter Beweis
zu stellen. In diesem Posting wird es um &lt;em&gt;kriegerische&lt;/em&gt; und &lt;em&gt;kämpferische&lt;/em&gt;
Formulierungen gehen, wie sie auch im Gruppensport zum Alltag gehören.
Dabei möchte ich stets &lt;em&gt;Alternativen&lt;/em&gt; aufzeigen, sich weniger aggressiv
auszudrücken. Die Intention ist, die Verwendung von Kraftausdrücken zu
reduzieren.&lt;/p&gt;
&lt;p&gt;Am Rande: Historisch ist diese Sprache klassischen Männerdomänen zuzuordnen.
Sowohl Sport als auch Krieg wird meiner Wahrnehmung nach auch heute noch vor
allem von Männern dominiert. Häufig
ist Sprache ein probates Mittel, um vermeintlich körperliche Defizite zu
kompensieren, also seine Minderwertigkeitskomplexe zu kaschieren.
Das Sprecher-Geschlecht spielt eigentlich eine untergeordnete Rolle.&lt;/p&gt;
&lt;h2&gt;Der tägliche Ballsport im Büro&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Am Ball bleiben&lt;/strong&gt;: Wer beim Projekt den Faden oder Anschluss nicht verlieren
will, hat &lt;em&gt;am Ball zu bleiben&lt;/em&gt;. Die harmlosere Variante &lt;em&gt;dranbleiben&lt;/em&gt; hat
weniger sportliche Konnotation. Warum stattdessen nicht konkretisieren,
welche Handlung gemeint ist? &lt;em&gt;Probleme im Blick behalten&lt;/em&gt; etwa, oder
&lt;em&gt;täglich nach dem Rechten schauen&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aufschlag machen&lt;/strong&gt;: Wer den ersten Entwurf eines Dokumentes macht, der
&lt;em&gt;macht den Aufschlag&lt;/em&gt; im Pingpong-Tennis der Dokumentenbearbeitung. Obwohl
es 2021 ist, werden immer noch Worddokumente mit obskuren Versionsnamen per
E-Mail hin- und hergeschickt und die technische Unzulänglichkeit mittlerweile
flotten sportlichen Sprüchen übergangen? Vielleicht einfach mal als Alternative:
Git benutzen oder weiterhin altertümlich &lt;em&gt;die erste Version schreiben/schicken&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Den Ball flach halten&lt;/strong&gt; sollen einzelne oder das Team, um dem &lt;em&gt;Gegner&lt;/em&gt; nicht
zu viele Informationen zur Verfügung zu stellen. Und das, ohne den Sportsgeist
zu verlieren! Der Ball, das steht sinnbildlich für Geschäftsgeheimnisse,
Zeugnisse der Arbeit, oder einfach nur der ganzen eigenen Unternehmung.
Wer die Öffentlichkeit und Konkurrenz scheut, kann mit dieser Formulierung
scheinbar sportlich sein Gesicht wahren. Siehe auch weiter unten &lt;em&gt;Unter dem
Radar fliegen&lt;/em&gt;. Weniger drakonisch wäre die Formulierung &lt;em&gt;still halten&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Das &lt;strong&gt;Eigentor&lt;/strong&gt; schießt, wer seinem Geschäftsgegner einen unfreiwilligen
Vorteil verschafft hat. Man(n) nimmt es sportlich! Eine Alternative wäre
die ehrlichere aber härtere Formulierung &lt;em&gt;geschäftsschädigend&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gut aufgestellt&lt;/strong&gt; ist die eigene Mannschaft, wenn der Chef sich handlungsfähig
sieht. Ob sie wirklich alle Kompetenzen abdeckt oder effizient ist, kann ganz
sportlich übergangen werden, dafür gibt es ja Hierarchien. Wie wäre es zur
Abwechslung mal mit einem &lt;em&gt;diversen&lt;/em&gt; Team, welches Expert:innen diverser
Disziplinien versammelt?&lt;/li&gt;
&lt;li&gt;Den &lt;strong&gt;Ball in der Luft halten&lt;/strong&gt; muss das Team, damit es nicht zum Showstopper
kommt. Jetzt muss geliefert werden! Alternative:
&lt;a href=&quot;https://en.wikiquote.org/wiki/Shut_up_and_calculate&quot;&gt;&lt;em&gt;Shut up and calculate!&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Mit den Kollegen im Schwimmbecken oder auf dem Eis&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Zu viele Themen vor der Brust&lt;/strong&gt; haben gestresste Manager, die ihren
sportlichen Ehrgeiz trotzdem weiterhin unter Beweis stellen wollen. Wie ein Ochse
können sie zwar auch mit &lt;em&gt;zu vielen Themen vor der Brust&lt;/em&gt; weiterlaufen oder
-schwimmen, kommen dabei aber nicht weit voran. Ein ehrliches
&lt;em&gt;ich hab zu viel zu tun und bin überfordert&lt;/em&gt; mag sich niemand eingestehen, es
würde menschliche Schwächen offenlegen. Wäre mal ein Versuch wert!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zurückrudern&lt;/strong&gt; tut, wer seine Meinung ändert oder gar eine 180°-Wende
einlegt. Wie immer währt man sportlich sein Gesicht, denn es ist ja alles
nicht so ganz ernst gemeint. Hier gibt es keine Alternative, man muss sich
leider so ausdrücken als ob man Kassenwart eines Ruderbootvereins ist.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Go where the Puk is going, not where it has been&lt;/strong&gt; ist eine englischsprachige
Redewendung, die Wayne Gretzky nachgesagt wird. Der &lt;em&gt;Player&lt;/em&gt; handelt
vorausschauend und motiviert sein Team. Weiter so, Männers!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Mit Krawatte im Fliegerhorst und dsytopischer Technikschmiede&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unter dem Radar bleiben/fliegen&lt;/strong&gt;, siehe &lt;em&gt;Den Ball flachhalten&lt;/em&gt; weiter oben.
Passt auf, nicht vom toten Pferd zu fallen!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Der Bürohengst im Manöver auf dem Schlachtfeld oder hoch zur See&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Das &lt;strong&gt;Manöver&lt;/strong&gt; ist bitterernst und taktisch durchgeführt. Runter vom
Sportplatz und ran an die Waffen! Es gilt den Gegner zu verwirren, auszuspielen
und letztlich zu eliminieren. Wo Mord und Totschlag den Takt angeben, ist
der Sprache nicht mehr zu helfen.&lt;/li&gt;
&lt;li&gt;Wer die &lt;strong&gt;Linien absteckt&lt;/strong&gt;, ist vielleicht schon in Vorbereitung der
Friedensverhandlungen. Weiter so!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Von hinten durch die Brust ins Auge&lt;/strong&gt; ist eine eher humoristische
Umschreibung eines unnötig komplizierten Vorgehens. Der kriegerische
Kontext ist wahrscheinlich eher konstruiert, mit kommt die
Dolchstoßlegende in den Kopf, aber eigentlich kann man sich so ruhig
ausdrücken. Die Welt ist brutal, und so ist es auch das Geschäft. Nicht
wahr?&lt;/li&gt;
&lt;li&gt;Einen &lt;strong&gt;Überraschungsangriff&lt;/strong&gt; kann man ruhig einmal fahren. Schließlich
geht es am Ende um die feindliche Übernahme.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aus allen Rohren schießen&lt;/strong&gt; tut man, wenn es um Laib und Leben geht.
Völlig alternativlos.&lt;/li&gt;
&lt;li&gt;Were &lt;strong&gt;schwere Geschütze auffährt&lt;/strong&gt;, plant den ganz großen Angriff. Immer
dann anwenden, wenn eine Börsenübernahme geplant ist.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unter Beschuss stehend&lt;/strong&gt; kann die Gegenpartei sich dann identifizieren.
&lt;em&gt;Wir weden angegriffen&lt;/em&gt; ist eine weniger blumige Ausdrucksweise.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mit gefangen, mit gehangen&lt;/strong&gt; heißt es schon im Kindergarten.
That&#39;s it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;In den Hinterhalt locken&lt;/strong&gt; kann man den Gegner, wenn man Strategie und
Taktik perfektioniert. Süß ist das Gift des Sieges! Hier bieten sich alternativ
auch Metaphern aus dem Tierreich an, vielleicht von einer Spinne, die ihren
Gegner aussaugt.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Grobes am Pissoir weit unterhalb der Gürtellinie&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Die &lt;strong&gt;Mannschaft&lt;/strong&gt; mit Glied und Gürtel. Frauen sind mitgemeint.&lt;/li&gt;
&lt;li&gt;Wer einen &lt;strong&gt;Schnellschuss&lt;/strong&gt; landet, hat sich vorher wahrscheinlich nicht
richtig gedehnt. Oder die Waffe falsch geladen. Nicht gleich die Flinte ins
Korn werfen! Die Formulierung hat auch eine voyeuristisch-sexistische
Konnotation: Der vorzeitige Samenerguss wird auch gerne mit einem
&lt;em&gt;Schnellschuss&lt;/em&gt; umschrieben. So verstehen sich Männer ganz ohne Worte.
Alternative: Bitte etwas möglichst weit&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pulver schon verschossen&lt;/strong&gt;, siehe &lt;em&gt;Schnellschuss&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Zu guterletzt drückt die grobe Formulierung &lt;strong&gt;Kameradenschwein&lt;/strong&gt; eine
herbe Enttäuschung aus, welche den Verrat am Korpsgeist zum Ausdruck bringt
und gleichzeitig die wunderbare Tierart der Schweine durch den Dreck zieht.
Hier bietet sich alternativ etwas wie &lt;em&gt;Zimtzicke&lt;/em&gt; oder &lt;em&gt;Dreckskerl&lt;/em&gt; an,
welches weniger militärisch assoziiert ist. &lt;em&gt;Verräter(in)&lt;/em&gt; passt auch
ganz inklusiv.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Geplant ist, diese Liste weiterhin fortzusetzen. Letzte Änderung am 25.08.2021.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Show your Workspace! Der Auftakt</title>
      <link>https://denktmit.de/blog/2021-08-26-show-your-Workspace/</link>
      <pubDate>2021-08-26T00:00:00Z</pubDate>
      <guid>https://denktmit.de/blog/2021-08-26-show-your-Workspace/</guid>
      <description>&lt;p&gt;In einer neuen Reihe innerhalb dieses Blogs stellen die Mitglieder und Mitarbeiter von DenktMit
ihren Arbeitsplatz (oder ihre Arbeitsplätze) vor. Als Menschen, die primär an einem Computer ihre
Arbeit verrichten, ist die effiziente Ausgestaltung dieses Arbeitsplatzes für uns meist sehr wichtig.
Als Vorlage dient etwa das wunderbare und sehr ausführliche Essay von Stephen Wolfram:
&lt;a href=&quot;https://writings.stephenwolfram.com/2019/02/seeking-the-productive-life-some-details-of-my-personal-infrastructure/&quot;&gt;Seeking the Productive Life: Some Details of My Personal Infrastructure&lt;/a&gt; oder Webseiten, die sich der
systematischen Erfassung von Computer-Arbeitsplätzen gewidmet haben, etwa
&lt;a href=&quot;https://workspace.style/&quot;&gt;workspace.style&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Mobile First: Meine Arbeitsumgebung&lt;/h2&gt;
&lt;p&gt;Den Anfang mache ich mit der Vorstellung meines typischen Arbeitsortes. Und da fängt es auch
schon an: Ich habe mir an meinem derzeitigen Wohnort in Münster/Westfalen ein schönes
&lt;em&gt;Homeoffice&lt;/em&gt; eingerichtet, würde mich aber in einem mehrere Jahre andauernden Zustand
zum &lt;em&gt;digitalen Normadentum&lt;/em&gt; bezeichnen. So hatte ich diesen Sommer für längere Tage oder Wochen
meine primären Arbeitsplätze sowohl im Urlaub auf Westerland/Sylt als auch auf Geschäftsreisen
im Raum Frankfurt aufgebaut.&lt;/p&gt;
&lt;p&gt;Absolutes Minimum für einen ernsthaften temporären Arbeitsplatz ist für mich ein großer
(Schreib-)tisch, ein stationärer Monitor, eine USB-Webcam, eine richtige Maus und natürlich das
Arbeitsgerät (Laptop). Die Webcam ermöglicht mir Flexibilität bei Videokonferenzen, der externe
Monitor mehr Platz auf dem Bildschirm, die Maus die Möglichkeit, präzise Grafikbearbeitung
durchzuführen. Was ich gerne noch dazu habe, ist eine USB-Tastatur sowie ein erhöhter Aufbau
(improvisierter Stehschreibtisch) für eine ergonomischere Arbeitshaltung. Natürlich ist gutes
Internet wichtig, für wirklich abgelegene Arbeitsplätze schwöre ich dafür auf ein gutes
LTE-Modem wie das &lt;em&gt;Huawei B618&lt;/em&gt;, welches etwa ein Standargerät bei den
&lt;a href=&quot;https://www.vodafone.de/mobiles-internet/internet-auf-dem-land.html&quot;&gt;Vodafone GigaCube&lt;/a&gt;-Tarifen
ist. Gegenüber Smartphone-Tethering benötigt ein solches Gerät mehr Platz im Gepäck, verfügt
aber über eine überragende Antenne und hat an Orten guten Empfang, wo mein Handy längst aufgibt.&lt;/p&gt;
&lt;h2&gt;Der Laptop: Thinkpad!&lt;/h2&gt;
&lt;p&gt;Ich hatte bis ca. 2016 stets einen Tower-PC an meinem primären Arbeitsplatz stehen. Mein Professor
während meiner Promotion hat mir dann vorgemacht, wie mobiles Arbeiten geht: Mit dem Notebook
als primäres Arbeitsgerät und einer Docking-Station an verschiedenen Schreibtischen. So hat er
die gesamte Arbeitsgruppe ausgestattet, was wirklich eine ganz andere Dynamik hervorbrachte, als
ich es vorher gewohnt war. Menschen nahmen ihren leistungsfähigen &amp;quot;Firmen&amp;quot;-Laptop mit in Meetings,
auf Konferenzen oder in den Urlaub. Ich hab damals mein privates betagtes Thinkpad T420 gegen ein
Thinkpad Yoga X1 der ersten Generation ausgetauscht bekommen, damals mit formidablen 1TB SSD-Speicher.
Diese Konfiguration fande ich derart brilliant, dass ich sie mir nach meiner Promotion (und Rückgabe
der Geräte) nochmal privat zugelegt habe, dann mit einem Thinkpad X1 der vierten Generation und
gleicher Speicherausstattung.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://denktmit.de/Lenovo-ThinkPad-X1-Yoga-2019-1.webp&quot; alt=&quot;Thinkpad&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Ein Festplattenspeicher von 1TB ermöglicht mir, so gut wie alle relevanten Files auf dem Notebook zu
haben. Als Data Scientists kann ich so auch größere Analysen auf dem Laptop machen. Den
Wacom-Digitizer (Stift) sowie Tabletmodus benutze ich kaum, was aber wohl vor allem an der schlechten
Linux-Unterstützung liegt. Denn: Ich nutze Linux kompromisslos. Für eine Dual Boot-Installation hatte
ich seit vielen Jahren keine Verwendung mehr.&lt;/p&gt;
&lt;p&gt;Meine primäre Arbeitsumgebung ist seit ein paar Jahren KDE, wobei ich intensiv virtuelle Desktops
verwende. Gut gefällt mir an der Distribution &lt;em&gt;Arch&lt;/em&gt;, dass die Rolling Releases für häufige (in der
Regel positive) Überraschungen in Form neuer Software-Features führen. Die Distribution hat aber auch
ihre Schattenseiten: Mehr als ein Jahr lang ging das eingebaute Mikrofon wegen Treiberproblemen nicht,
während Ubuntu hier keine Probleme hatte. Generell sind solche Themen für mich nach mehr als 10 Jahren
Linux auf dem Desktop keine Diskussion mehr wert. Wer mit Linux zurecht kommt, soll damit arbeiten, alle
anderen sollen es eben lassen.&lt;/p&gt;
&lt;h2&gt;Höhenverstellbarer Schreibtisch&lt;/h2&gt;
&lt;p&gt;Kommen wir nun zu meinem primären Arbeitsplatz in Münster/Westfalen:&lt;/p&gt;
&lt;p&gt;Kaum etwas hat meinen Arbeitskomfort so erleichtert wie der höhenverstellbare Schreibtisch, den ich mir
erst vor wenigen Jahren zugelegt habe. Leider war ich etwas knausrig und wählte ein Modell mit
mechanischer Kurbel statt elektrischem Motor, was ich heute täglich beklage, da ich mit Motor deutlich
häufiger die Position wechseln würde. Der Schreibtisch ist ein mittlerweile nicht mehr verfügbares
Modell von &lt;em&gt;IKEA&lt;/em&gt;, welches leider eine ziemlich kleine Arbeitsfläche von nur 80x160cm hat. Ich habe
fast 10 Jahre lang einen 100x200cm großen Schreibtisch verwendet, sodass das für mich eine echte
Umstellung war. Allerdings ist der kleinere Tisch auch wendiger und leichter.&lt;/p&gt;
&lt;p&gt;Meinen Schreibtisch beleuchte ich seit Jahren mit zwei
&lt;a href=&quot;https://www.ikea.com/de/de/p/tertial-arbeitsleuchte-weiss-70355455/&quot;&gt;IKEA TERTIAL&lt;/a&gt; von beiden Seiten
mit starken LED-Leuchtmitteln (je 800-1000 Lumen). Die Arbeitsleuchte ist eine Design-Ikone und extrem
praktisch, um das Licht genau zu steuern.&lt;/p&gt;
&lt;p&gt;Um den kleinen Schreibtisch zu kompensieren, habe ich in der Regel eine zusätzliche Arbeitsplatte
auf Böcken aufgebaut sowie nutze diverse Regale und Ablagesysteme drumherum. Der zweite Tisch ist in
der Regel leer und wird nur für Projekte aufgebaut, z.B. für eine temporäre Lötstation, zum Sortieren
von Akten oder für einen zweiten Computer. Dann steht auch schnell ein oder mehrere Bildschirme auf
der Zweitplatte, die ähnliche Maße hat. Beide Tische sind wie alle Möbel weiß.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://denktmit.de/2021-08-26-Workspace-Desk.webp&quot; alt=&quot;Thinkpad&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;SuperWide-Display und Kabel&lt;/h2&gt;
&lt;p&gt;Im Januar 2021 hab ich mir einen besonderen Luxus gegönnt und meine beiden 16:9-Bildschirme durch einen
einzelnen 32:9-Bildschirm ersetzt. Dadurch hat sich effektiv die Anzahl der Pixel nur unwesentlich
geändert, allerdings der Komfort enorm erhöht: Das teure &lt;em&gt;Philips 499P9H&lt;/em&gt;-Display hat nämlich eine
integrierten Docking-Station mit USB-Hub, Ethernet, Lautsprecher und Webcam. Das alles kann inklusive
des Displays mit nur einem einzigen USB-C-Kabel vom Laptop angesprochen werden, der während des
Anschlusses auch noch darüber geladen wird. Für mich ein echter Game-Changer, da der Arbeitsplatz nun
mit jedem USB-C-fähigen Laptop (etwa auch einem Macbook) sehr schnell in Benutzung genommen werden kann.
Dass die Hardware mit Linux so gut tadellos funktioniert, hat mich ehrlich gesagt auch etwas überrascht.&lt;/p&gt;
&lt;p&gt;Der Standfuß des Displays nimmt auf dem kleinen Schreibtisch natürlich einiges an Platz weg. Ich habe
bereits überlegt, eine Monitorhalterung einzukaufen, konnte mich dazu aber noch nicht durchringen.&lt;/p&gt;
&lt;p&gt;An das Display sind völlige Commodity-Eingabegeräte angeschlossen: Eine simple &lt;em&gt;Cherry&lt;/em&gt;-Tastatur
(&lt;em&gt;KC 1000&lt;/em&gt; o.ä.) und eine billige Logitech-Maus. Immerhin ist alles kabelgebunden, was ich unter
Datensicherheitsaspekten sehr beruhigend finde.&lt;/p&gt;
&lt;h2&gt;Dokumentenmanagament&lt;/h2&gt;
&lt;p&gt;Das papierlose Büro sucht man bei mir vergeblich. Die Konsequenz, jeden einkommenden Brief zu
digitalisieren, bringe ich nicht auf. Trotzdem kommt der &lt;a href=&quot;https://www.brother.de/scanner/ads-1700w&quot;&gt;Brother ADS-1700W&lt;/a&gt;
regelmäßig zum Einsatz. Der kompakte Duplex-Dokumentenscanner kann mehrere Dutzend Seiten in einem
Durchgang und recht flott farbig scannen, hat Wifi und einen kleinen Touchscreen, über den man ihn
autonom bedienen kann. Ich scanne stets auf ein Netzwerklaufwerk, von dem ich mir die Files auf dem
Rechner runterhole.&lt;/p&gt;
&lt;p&gt;Zur Ent-Digitalisierung schwöre ich auf schwarz/weiß-Laserdrucker. Ich genieße solange er es tut noch
meinen betagten &lt;em&gt;HP Laserjet 4050TN&lt;/em&gt;, der über Netzwerk druckt und druckt und druckt... Meiner Meinung
nach bieten SW-Laserdrucker das beste Preis-Leistungsverhältnis für Gelegenheitsdrucker. Für das gute
Gefühl ist aber eine offene Aufstellung an einem gut belüfteten Platz Pflicht, um krebserregenden
Feinstaub zu reduzieren. Ohne Not werde ich mir keinen Farb-Tintenstrahldrucker kaufen, Bilder drucke
ich lieber günstig bei der Drogerie auf Fotopapier aus.&lt;/p&gt;
&lt;p&gt;Meine komplette Ablage und Korrespondenz läuft seit einigen Jahren recht erfolgreich über ein paar
Nextcloud-Instanzen. Diese Software hat bei mir komplett und erfolgreich Dropbox ersetzt (bislang nie
ohne größere Pannen) und stellt nebenbei dank Synchronisation auf verschiedene Notebooks eine kleine
Backup-Strategie dar. Außerdem ist sie selbstgehostet und damit autonom. Ich hoste aber grundsätzlich
nur im Internet (d.h. 100mbit symmetrisch), da ich die langsamen Upstream-Breiten aus Heimnetzen nicht
ausstehen kann.&lt;/p&gt;
&lt;h2&gt;Netzwerk und Internet&lt;/h2&gt;
&lt;p&gt;Ich bin zwar kein Gegner von Wifi, aber es geht doch nichts über kabelgebundenes Ethernet. Es gibt
prinzipbedingt keine Ausfälle oder ungewöhnlichen Ping-Spikes, und was die Nachbarn machen spielt
keine Rolle.  Ich hab mir auch die Mühe gemacht, das Ethernet durch die Wände bis zum Router zu verlegen,
um mich nicht überflüssigerweise mit WLAN-Empfang ärgern zu müssen. Als Uplink habe ich seit ein paar
Jahren einen &lt;em&gt;Unitymedia Buisness&lt;/em&gt;-Tarif, weil dieser eine fixe IPv4-Adresse in Verbindung mit guten
Upstream-Breiten anbietet. Den werde ich wahrscheinlich aber bald ändern, weil er mir zu teuer ist.&lt;/p&gt;
&lt;p&gt;Ich versuche die Anzahl von aktiven Netzwerkgeräten zu reduzieren, trotzdem laufen natürlich ein paar
Switches (in der Regel in Access Point-Doppelfunktion) bei mir rum. Ich habe viele Jahre ein tolles
kleines energiesparsames (&amp;lt;20W) NAS betrieben, was ich aber irgendwann eingestellt habe ohne davon im
Alltag etwas zu bemerken.&lt;/p&gt;
&lt;h2&gt;Handschriftlich: Whiteboard und Labbook&lt;/h2&gt;
&lt;p&gt;Es geht doch nichts über die Handschrift, vor allem wenn sie groß ist: Wir haben einen ganzen Schwung
90*180cm großer Whiteboards (die sind mit ca. 30€ pro Stück recht erschwinglich) in verschiedenen
Räumen zum inhaltlichen Austausch. Für meine Haupttätigkeit verwende ich außerdem ein klassisches
Labbook, was man mit Kugelschreiber beschreiben kann. Das lässt sich zwar nicht durchsuchen, aber
ist schneller gezückt als eine Notiz-App auf dem Handy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Release and ship your e2e tests as containers alongside your product</title>
      <link>https://denktmit.de/blog/2021-11-21-release-and-ship-your-e2e-tests-as-containers-alongside-your-product/</link>
      <pubDate>2021-11-21T00:00:00Z</pubDate>
      <guid>https://denktmit.de/blog/2021-11-21-release-and-ship-your-e2e-tests-as-containers-alongside-your-product/</guid>
      <description>&lt;h2&gt;E2E Testcontainers&lt;/h2&gt;
&lt;p&gt;Let&#39;s start with a short reminder on E2e-Tests. While unit and integration tests verify, that a system under test does
things right, the E2E-Tests verify that a system does the right thing. They are therefore acceptance tests and should
provide an every
increasing &lt;a href=&quot;https://ronjeffries.com/xprog/articles/jatrtsmetric/&quot;&gt;Running tested features (Brought up by Ron Jeffries)&lt;/a&gt;
metric understandable by business users.&lt;/p&gt;
&lt;p&gt;Often those tests are run on the local developers machine and in the CI to pass the quality gates. This is usually
enough for a centrally managed system existing in a single configuration. As soon as we talk about turnkey solutions,
the system under tests might be living on many different environments and installations. Wouldn&#39;t it be nice to have a
uniform way to verify, the software is working as expected on those different environments? At least have some smoke
tests running? Well, why not somehow release these E2E-Tests alongside the product and make them self-explanatory to be
used on any environment whenever needed?&lt;/p&gt;
&lt;p&gt;This is, what I propose to achieve with E2E Testcontainers. The rest of this post gives you a hands-on introduction of
the idea based on &lt;a href=&quot;https://github.com/DenktMit-eG/de.denktmit.blog.e2e-test-containers&quot;&gt;a sample I prepared on Github&lt;/a&gt;.
Make sure you clone it to your local machine to follow this text. At the end of this post, you will have your own base
image for test containers as well as a fully working sample of some Selenium based browser testing wrapped in a
self-explanatory and CI friendly container.&lt;/p&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;You will need to have a fully working Docker installation as well as at least a working Java 11+ JDK to run the full
build.&lt;/p&gt;
&lt;p&gt;By &lt;strong&gt;running the main build.sh&lt;/strong&gt; script of this project, you can locally create both the base image and the sample webgui
image. In resemblance to most UNIX command line tools, the test containers are designed to reveal their features
included by just using them.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;./build.sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It might take some time until docker pulled everything, but once the process is done, you are ready to go and explore
your freshly baked docker images.&lt;/p&gt;
&lt;h3&gt;Exploring a test-container&lt;/h3&gt;
&lt;p&gt;The most basic thing you can do to a docker image is, to just run it. Run the container for the first time:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run &lt;span class=&quot;token parameter variable&quot;&gt;--rm&lt;/span&gt; e2e-test-base-image:latest&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a result, you will get some output reading like this&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; cli.sh &lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt;-11-01T11:11:25Z Exporting config &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.

E2E Tests CLI CLI-Version: &lt;span class=&quot;token number&quot;&gt;1.0&lt;/span&gt;.0 Usage: /cli/cli.sh &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;command&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Commands:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;e2etests Display e2etests Help
    
* Help

Description:
This is the e2e-test-base-image cli, that only contains a small sample setup. The base image is designed to be extended
by product specific E2E-Test containers, overwriting behavior and usage instructions.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So basically, the container advises us to use the entry script /cli/cli.sh. We&#39;ll end up with the message above again&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run &lt;span class=&quot;token parameter variable&quot;&gt;--rm&lt;/span&gt; e2e-test-base-image:latest /cli/cli.sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what can we do from here? Well obviously, the script helps us to recognise accidentally wrong input in showing the
help page again for every argument, that does not map onto a command. Try it if you like:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run &lt;span class=&quot;token parameter variable&quot;&gt;--rm&lt;/span&gt; e2e-test-base-image:latest /cli/cli.sh unknown 
&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run &lt;span class=&quot;token parameter variable&quot;&gt;--rm&lt;/span&gt; e2e-test-base-image:latest /cli/cli.sh boring three params 
&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run &lt;span class=&quot;token parameter variable&quot;&gt;--rm&lt;/span&gt; e2e-test-base-image:latest /cli/cli.sh *
&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run &lt;span class=&quot;token parameter variable&quot;&gt;--rm&lt;/span&gt; e2e-test-base-image:latest /cli/cli.sh e2etests&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s get serious, how to use the actual tests? The last line of the former code block with the param e2etests gave us a
different help text. So we are one steps further it seems.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; cli.sh &lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt;-11-01T11:18:24Z Exporting config &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. 
&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; e2etests.sh &lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt;-11-01T11:18:24Z HELP

Command: e2etests

Usage:
e2etests run &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;tags&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;     Runs all tests e2etests specs Prints defined specs e2etests * Help

Description:
This &lt;span class=&quot;token builtin class-name&quot;&gt;command&lt;/span&gt; executes Gauge specifications provided &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; the /tests/specs directory of this container when called with &lt;span class=&quot;token string&quot;&gt;&#39;
run&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; If you run the tests without providing tags, all tests will be run. Otherwise, &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; you submit a tags specification,
only the tests that match it are run. For detailed explanation,
visit https://docs.gauge.org/execution.html&lt;span class=&quot;token comment&quot;&gt;#tag-expressions. If all tests succeed, this script returns with exit code 0,&lt;/span&gt;
otherwise with &lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt; code &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;.

Configurable environment variables:
This is an overview of configurable environment variables. Mandatory variables must be provided as &lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt;
variables, otherwise the run &lt;span class=&quot;token builtin class-name&quot;&gt;command&lt;/span&gt; will fail. Optional variables on the other hand might be used &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; needed. If
both lists are empty, it means, that your current &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; container does not need any setup to run the tests &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;.

&lt;span class=&quot;token comment&quot;&gt;###################################&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Mandatory environment variables #&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;###################################&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;none &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; this sample&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;###################################&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Optional environment variables  #&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;###################################&lt;/span&gt;

GAUGE_JVM_ARGS
    - arguments provided to the JVM, that is started by the gauge-java &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; runner. Defaults to
    &lt;span class=&quot;token string&quot;&gt;&quot;-Dlogback.configurationFile=/common/logback.xml&quot;&lt;/span&gt; to provide a logging configuration
GAUGE_LOG_LEVEL: enum
    - The log level of the Gauge spec runner itself. Must be debug, info, warning, error or
    critical &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;default &lt;span class=&quot;token string&quot;&gt;&quot;info&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

Available &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; tags:
The available tags and their purpose. For example a tag smoke might only run some quick tests to verify a system is
ready.

poems
    - Sample E2E tests about poems. Includes all tests
smoke
    - Includes a single successful &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt;
failing
    - Includes a single failing &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt;

Mount points of interest:
The &lt;span class=&quot;token function&quot;&gt;mount&lt;/span&gt; points of interests describe container paths you might want to &lt;span class=&quot;token function&quot;&gt;mount&lt;/span&gt; to your &lt;span class=&quot;token function&quot;&gt;host&lt;/span&gt; machine.

/tests/reports
    - The gauge tests generate a &lt;span class=&quot;token function&quot;&gt;nice&lt;/span&gt; XML and HTML reports that end up here
/tests/logs
    - Logs created by gauge are available &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Take a look at the specs&lt;/h3&gt;
&lt;p&gt;Since I built the test containers using the &lt;a href=&quot;https://gauge.org/&quot;&gt;gauge testing framework&lt;/a&gt;, there are specs. Specs are
written in Markdown and describe a certain feature of the system under test in a human readable way. Show the
containered specs with&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run &lt;span class=&quot;token parameter variable&quot;&gt;--rm&lt;/span&gt; e2e-test-base-image:latest /cli/cli.sh e2etests specs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The specs command simply outputs the available spec&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; cli.sh &lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt;-11-01T12:09:30Z Exporting config &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. 
&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; e2etests.sh &lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt;-11-01T12:09:30Z PRINT E2E SPECS Rose validity
&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;

End the poem correctly
----------------------
tags: poems, smoke

* A rose is a rose is a &lt;span class=&quot;token string&quot;&gt;&quot;rose&quot;&lt;/span&gt;

End the poem incorrectly
------------------------
tags: poems, failing

* A rose is a rose is a &lt;span class=&quot;token string&quot;&gt;&quot;lily flower&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;as we can see, we only defined a single feature here. The test is about a short quotation, sometimes considered a poem
in its own by Gertrude Stein. Since the little poem can be read as a statement for validity and identity of things I
found it very fitting. There are three tags across the specs: poems, smoke and failing. The first scenario is an always
succeeding while the second one is always failing. If you ran the the smoke tests only, you end up with succeeding
otherwise with failing tests Run all E2E tests&lt;/p&gt;
&lt;p&gt;Since we do not need any additional setup, you can run the tests as easy as&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run &lt;span class=&quot;token parameter variable&quot;&gt;--rm&lt;/span&gt; e2e-test-base-image:latest /cli/cli.sh e2etests run&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After a short time, you should see this output&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; cli.sh &lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt;-11-01T12:22:14Z Exporting config &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. 
&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; e2etests.sh &lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt;-11-01T12:22:14Z RUN E2E TESTS

&lt;span class=&quot;token comment&quot;&gt;# Rose validity&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;## End the poem correctly&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;## End the poem incorrectly&lt;/span&gt;
    
Failed Step: A rose is a rose is a &lt;span class=&quot;token string&quot;&gt;&quot;lily flower&quot;&lt;/span&gt;
Specification: specs/01-SayRose.spec:14
Error Message: java.lang.AssertionError: The answer &lt;span class=&quot;token string&quot;&gt;&#39;lily flower&#39;&lt;/span&gt; is wrong
Stacktrace: 
io.gec.example.RosePoemSteps.poemSuccessful&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;RosePoemSteps.java:10&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Native Method&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;NativeMethodAccessorImpl.java:62&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;DelegatingMethodAccessorImpl.java:43&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
java.base/java.lang.reflect.Method.invoke&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Method.java:566&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
com.thoughtworks.gauge.execution.MethodExecutor.execute&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;MethodExecutor.java:28&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
com.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;StepExecutionStage.java:66&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
com.thoughtworks.gauge.execution.StepExecutionStage.executeStep&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;StepExecutionStage.java:59&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
com.thoughtworks.gauge.execution.StepExecutionStage.execute&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;StepExecutionStage.java:41&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
com.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;AbstractExecutionStage.java:14&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
com.thoughtworks.gauge.execution.HookExecutionStage.execute&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;HookExecutionStage.java:33&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
com.thoughtworks.gauge.execution.ExecutionPipeline.start&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ExecutionPipeline.java:19&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
com.thoughtworks.gauge.processor.ExecuteStepProcessor.process&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ExecuteStepProcessor.java:44&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
com.thoughtworks.gauge.RunnerServiceHandler.lambda&lt;span class=&quot;token variable&quot;&gt;$executeStep&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;RunnerServiceHandler.java:166&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
java.base/java.util.concurrent.ThreadPoolExecutor.runWorker&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ThreadPoolExecutor.java:1128&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
java.base/java.util.concurrent.ThreadPoolExecutor&lt;span class=&quot;token variable&quot;&gt;$Worker&lt;/span&gt;.run&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ThreadPoolExecutor.java:628&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
java.base/java.lang.Thread.run&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Thread.java:829&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

Successfully generated html-report to &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /tests/reports/html-report/index.html

Successfully generated xml-report to &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /tests/reports/xml-report

Specifications:    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; executed &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; passed &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; failed &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; skipped Scenarios:    &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; executed &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; passed &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; failed &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; skipped

Total &lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt; taken: 148ms&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Run the smoke tests only&lt;/h3&gt;
&lt;p&gt;If you run the smoke tests only, you can do so by adding &amp;quot;smoke&amp;quot; as parameter&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run &lt;span class=&quot;token parameter variable&quot;&gt;--rm&lt;/span&gt; e2e-test-base-image:latest /cli/cli.sh e2etests run smoke&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the tests succeed&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; cli.sh &lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt;-11-01T12:23:48Z Exporting config &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. 
&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; e2etests.sh &lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt;-11-01T12:23:48Z RUN E2E TESTS

&lt;span class=&quot;token comment&quot;&gt;# Rose validity&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;## End the poem correctly&lt;/span&gt;

Successfully generated html-report to &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /tests/reports/html-report/index.html

Successfully generated xml-report to &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /tests/reports/xml-report

Specifications:    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; executed &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; passed &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; failed &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; skipped Scenarios:    &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; executed &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; passed &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; failed &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; skipped

Total &lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt; taken: 138ms&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;What about CI integration?&lt;/h3&gt;
&lt;p&gt;We can easily evaluate, if all tests succeeded in e.g. a CI process using by evaluating the return code.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Returns &#39;Smoke tests succeeded&#39;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run &lt;span class=&quot;token parameter variable&quot;&gt;--rm&lt;/span&gt; e2e-test-base-image:latest /cli/cli.sh e2etests run smoke &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Smoke tests succeeded&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Smoke
tests failed&quot;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Returns &#39;All tests failed&#39;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run &lt;span class=&quot;token parameter variable&quot;&gt;--rm&lt;/span&gt; e2e-test-base-image:latest /cli/cli.sh e2etests run &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;All tests succeeded&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;All tests
failed&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;A more sophisticated example: Webtests using Selenium&lt;/h2&gt;
&lt;p&gt;Lets see, what the sample Web GUI container has to offer in E2E tests an just run a webtest docker&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;run &lt;span class=&quot;token parameter variable&quot;&gt;--rm&lt;/span&gt; e2e-test-sample-webgui:latest /cli/cli.sh e2etests&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output is different than for the other container&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; cli.sh &lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt;-11-01T11:27:55Z Exporting config &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. 
&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; e2etests.sh &lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt;-11-01T11:27:55Z HELP

Command: e2etests

Usage:
e2etests run &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;tags&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;     Runs all tests e2etests specs Prints defined specs e2etests * Help

Description:
This &lt;span class=&quot;token builtin class-name&quot;&gt;command&lt;/span&gt; executes Gauge specifications provided &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; the /tests/specs directory of this container when called with &lt;span class=&quot;token string&quot;&gt;&#39;
run&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; If you run the tests without providing tags, all tests will be run. Otherwise, &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; you submit a tags specification,
only the tests that match it are run. For detailed explanation,
visit https://docs.gauge.org/execution.html&lt;span class=&quot;token comment&quot;&gt;#tag-expressions. If all tests succeed, this script returns with exit code 0,&lt;/span&gt;
otherwise with &lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt; code &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;.

Configurable environment variables:
This is an overview of configurable environment variables. Mandatory variables must be provided as &lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt;
variables, otherwise the run &lt;span class=&quot;token builtin class-name&quot;&gt;command&lt;/span&gt; will fail. Optional variables on the other hand might be used &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; needed. If
both lists are empty, it means, that your current &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; container does not need any setup to run the tests &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;.

&lt;span class=&quot;token comment&quot;&gt;###################################&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Mandatory environment variables #&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;###################################&lt;/span&gt;
EXPECTED_RESULT_CONTAINS
    - The text snippet expected to be part of the search results

&lt;span class=&quot;token comment&quot;&gt;###################################&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Optional environment variables  #&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;###################################&lt;/span&gt;
GAUGE_JVM_ARGS
    - arguments provided to the JVM, that is started by the gauge-java &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; runner. Defaults to
    &lt;span class=&quot;token string&quot;&gt;&quot;-Dlogback.configurationFile=/common/logback.xml&quot;&lt;/span&gt; to provide a logging configuration
GAUGE_LOG_LEVEL: enum
    - The log level of the Gauge spec runner itself. Must be debug, info, warning, error or
    critical &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;default &lt;span class=&quot;token string&quot;&gt;&quot;info&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
HEADLESS_BROWSER: BOOLEAN
    - Determines &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; to run a headless browsers. Defaults to true.
SEARCH_TERM
    - The term to be searched &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;

Available &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; tags:
The available tags and their purpose. For example a tag smoke might only run some quick tests to verify a system is
ready.

search
    - Sample E2E tests. Includes all tests
smoke
    - Includes a single successful test, &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; this &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt;
custom
    - Includes a single failing &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt;

Mount points of interest:
The &lt;span class=&quot;token function&quot;&gt;mount&lt;/span&gt; points of interests describe container paths you might want to &lt;span class=&quot;token function&quot;&gt;mount&lt;/span&gt; to your &lt;span class=&quot;token function&quot;&gt;host&lt;/span&gt; machine.

/tests/reports
    - The gauge tests generate a &lt;span class=&quot;token function&quot;&gt;nice&lt;/span&gt; XML and HTML reports that end up here
/tests/logs
    - Logs created by gauge are available &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Run the web tests&lt;/h3&gt;
&lt;p&gt;Okay, we need to setup a mandatory environment variables and might also want to change some optionals. This time, we&#39;d
also like to have a look at the generated reports. To make them more fun, we use a full-fledged browser and disable the
headless mode. This leaves us with nice screenshots when a test fails and makes it easier to track down bugs. So, lets
give it a first try. Lets run a failing webtest&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run &lt;span class=&quot;token parameter variable&quot;&gt;--rm&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
&lt;span class=&quot;token parameter variable&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SEARCH_TERM=denktmit.de&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
&lt;span class=&quot;token parameter variable&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;EXPECTED_RESULT_CONTAINS=denktmit.de is the coolest co-op in the world&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
&lt;span class=&quot;token parameter variable&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;HEADLESS_BROWSER=false&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
&lt;span class=&quot;token parameter variable&quot;&gt;-v&lt;/span&gt; /home/&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;youruser&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;/reports:/tests/reports &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
e2e-test-sample-webgui:latest /cli/cli.sh e2etests run&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Evaluate the results and why the tests are failing&lt;/h3&gt;
&lt;p&gt;Once the test is completed, we might want to take a look at the HTML reports, we so wisely mounted into our file system.
This is, what the Gauge generated reports look like&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://denktmit.de/release-your-e2e-containers-gauge-report-screenshot.webp&quot; alt=&quot;Gauge report page&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Clicking on the screenshot gives you a great inside into what the browser was seeing while running the tests. Obviously
the DenktMit eG is not yet listed as the coolest co-op in the world, but at least we get the information what went wrong&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://denktmit.de/release-your-e2e-containers-search-results-screenshot.webp&quot; alt=&quot;Duck Duck Go search results&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Obviously, the search term is not giving us the expected result. Let&#39;s do a query, this humble presenter knows to work
most of the time.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run &lt;span class=&quot;token parameter variable&quot;&gt;--rm&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
&lt;span class=&quot;token parameter variable&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SEARCH_TERM=denktmit.de&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
&lt;span class=&quot;token parameter variable&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;EXPECTED_RESULT_CONTAINS=Zwischen Programmierergenossenschaft und Unternehmensberatung&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
&lt;span class=&quot;token parameter variable&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;HEADLESS_BROWSER=false&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
&lt;span class=&quot;token parameter variable&quot;&gt;-v&lt;/span&gt; /home/&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;youruser&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;/reports:/tests/reports &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
e2e-test-sample-webgui:latest /cli/cli.sh e2etests run&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This time we have a more satisfying outcome, all the tests were successful. That is the end of this little tutorial,
I hope you enjoyed it. Have fun building and releasing your own test containers.&lt;/p&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@brotandgames/build-a-custom-cli-with-bash-e3ce60cfb9a4&quot;&gt;Build a Custom CLI with Bash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gauge.org/&quot;&gt;Gauge testing framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/getgauge/gauge-java&quot;&gt;Gauge java language bindings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://denktmit.de/outreach.html&quot;&gt;DenktMit eG tech blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Mein Zukunftstraum von Silicon Orschel</title>
      <link>https://denktmit.de/blog/2022-01-14-mein-zukunftstraum-von-silicon-orschel/</link>
      <pubDate>2022-01-14T00:00:00Z</pubDate>
      <guid>https://denktmit.de/blog/2022-01-14-mein-zukunftstraum-von-silicon-orschel/</guid>
      <description>&lt;p&gt;Biontech hat vorgemacht, dass bereits ein einziges hocherfolgreiches High-Tech Unternehmen dem jeweiligen Standort ungeahntes Entwicklungspotential eröffnet. Derart extreme Erfolgsgeschichten sind allerdings eher selten und eine enorme Abhängigkeit vom Erfolg eines Einzelunternehmens auch nicht immer erstrebenswert.&lt;/p&gt;
&lt;p&gt;Ich wünsche mir, dass Oberursel zu einem Silicon Orschel von vielen kleinen, mittleren und großen Biontechs, aber auch zu einem europäischen Vorzeigestandort wird, der Menschen, Digitalisierung, Nachhaltigkeit und Umweltbelange smart vereint. Dieser Post ist meine Vision, wie ein Silicon Orschel der Zukunft aussehen könnte.&lt;/p&gt;
&lt;h2&gt;Gründerheimat&lt;/h2&gt;
&lt;p&gt;Silicon Orschel ist der Wohnort an dem High-Tech Gründer ihre Reise starten wollen, an dem sie gerne leben und dem sie sich verbunden fühlen und der ihnen beste Bedingung für die schwierige Aufgabe bietet, etwas Neues zu schaffen.&lt;/p&gt;
&lt;p&gt;Oberursel ist umgeben von Hochschulen mit MINT Angeboten. Im direkten Einzugsgebiet liegen &lt;a href=&quot;https://www.thm.de/&quot;&gt;THM&lt;/a&gt;, &lt;a href=&quot;https://www.frankfurt-university.de/&quot;&gt;UAS&lt;/a&gt;, &lt;a href=&quot;https://www.accadis.com/&quot;&gt;Accadis&lt;/a&gt; die &lt;a href=&quot;https://www.uni-giessen.de/&quot;&gt;Universität Gießen&lt;/a&gt; und natürlich die &lt;a href=&quot;https://www.uni-frankfurt.de/&quot;&gt;Goethe Universität Frankfurt&lt;/a&gt; und das &lt;a href=&quot;https://fias.institute/&quot;&gt;FIAS&lt;/a&gt;. Genau genommen ist der naturwissenschaftliche &lt;a href=&quot;https://de.wikipedia.org/wiki/Campus_Riedberg&quot;&gt;Campus Riedberg&lt;/a&gt; von Oberursel aus besser zu erreichen als von fast jedem Frankfurter Stadtteil.&lt;/p&gt;
&lt;p&gt;Aus eigener Erfahrung kann ich sagen, Gründer gründen gerne dort, wo sie leben und lieben und ihr lokales Netzwerk und Freunde haben. Zu gründen ist anstrengend und manchmal überfordernd, umso wichtiger ist das soziale Drumherum. Oberursel ist liebenswert und lädt sehr zum bleiben ein, aber das muss man erst einmal wissen.&lt;/p&gt;
&lt;p&gt;In Silicon Orschel wohnen die zukünftigen Gründer im Studentenwohnheim am Orscheler Innovation Campus, der neben dem Wohnheim das &lt;a href=&quot;https://de.wikipedia.org/wiki/Gr%C3%BCnderzentrum&quot;&gt;Startup Hub&lt;/a&gt; und günstige Labs für die erste Gründung beherbergt. Ein Shuttlebus sorgt für gute Anbindung an die umgebenden Unis und Orschels Außengastronomie muss zumindest an Wochenenden nicht schon um zehn leise sein.&lt;/p&gt;
&lt;h2&gt;Entfaltungsräume&lt;/h2&gt;
&lt;p&gt;Gute Ideen müssen gedeihen und manches muss einfach in kleinem Rahmen ausprobiert werden. In Silicon Orschel finden interessierte Kinder und Jugendliche nicht nur den richtigen Sport- oder Kulturverein. Auch für diejenigen mit technischem Interesse gibt es tolle Angebote wie &lt;a href=&quot;https://www.hackerspace-ffm.de/&quot;&gt;Hackerspace&lt;/a&gt; und Coder Club in denen man schon früh seine Interessen schärfen kann. Richtig Spaß machen die regelmäßig von der Stadt veranstalteten Hackathons, auf denen Jung- und Alt prototypisch Lösungen für konkrete Probleme entwickeln.&lt;/p&gt;
&lt;p&gt;Die Stadtbibliothek wird zur &lt;a href=&quot;https://hochschulforumdigitalisierung.de/de/dossiers/open-science&quot;&gt;Open Science&lt;/a&gt; Bibliothek erweitert und bietet Oberurseler Bürgern online den Direktzugang zu Papers aus Wissenschaft und Forschung, die ansonsten hinter Paywall stehen.&lt;/p&gt;
&lt;p&gt;Wo aus dem Hobby vielleicht eine Geschäftsidee wird, ist es leicht, die ersten Schritte zu gehen. Der &lt;a href=&quot;https://de.wikipedia.org/wiki/One-Stop-Shop&quot;&gt;One-Stop-Shop&lt;/a&gt; Silicon Orschels berät zur Rechtsform und ermöglicht die Online Gründung in einem Rutsch. Direkt danach kann man für die ersten zwei Jahre die günstigen Labs am Innovation Campus beziehen und findet dort sogleich die passenden Werkstudenten.&lt;/p&gt;
&lt;p&gt;Benachbart zum Campus glänzen Satellite Offices und &lt;a href=&quot;https://de.wikipedia.org/wiki/Coworking&quot;&gt;Coworking Spaces&lt;/a&gt; etablierter Firmen, die erkannt haben, dass es unnötig ist, dass der Hochtaunuskreis bis in die Frankfurter Innenstadt fährt.&lt;/p&gt;
&lt;p&gt;Das kürzt die Wege zu Silicon Orschels Startup-Hub, wo sich sich regelmäßig alte, neue und zukünftige Gründer mit interessierten Investoren und Firmenkunden austauschen. Aber auch so läuft man sich oft über den Weg. An finanzieller Förderung und Erfolg der lebendigen Orscheler StartUp Landschaft können sich Bürgerinnen und Bürger per Bürgerfonds beteiligen.&lt;/p&gt;
&lt;h2&gt;Die smarte Stadt&lt;/h2&gt;
&lt;p&gt;Seit die Verwaltung mit &lt;a href=&quot;https://www.dataport.de/was-wir-bewegen/portfolio/dphoenixsuite/&quot;&gt;Projekt Phönix&lt;/a&gt; auf &lt;a href=&quot;https://de.wikipedia.org/wiki/Open_Source&quot;&gt;Open Source&lt;/a&gt; Komponenten umgestellt wurde und Datensouveränität erlangte, konnte man die freiwerdenden Lizenzkosten und Daten gut nutzen, um den Bürgerdialog zu vertiefen. Eigenentwicklungen werden gemäß &lt;a href=&quot;https://www.wikimedia.de/2019/themen/oeffentlich-rechtlicher-rundfunk-oeffnet-sich-oeffentliches-geld-oeffentliches-gut/&quot;&gt;Öffentliches Geld - Öffentliches Gut&lt;/a&gt; grundsätzlich gemeinfrei gestellt.&lt;/p&gt;
&lt;p&gt;Die Cyberstelle der Stadt nimmt Hinweise auf Bugs und Sicherheitslücken professionell entgegen. Für kritische Erstmeldungen gibt es über das &lt;a href=&quot;https://de.wikipedia.org/wiki/Bug-Bounty-Programm&quot;&gt;Bug-Bounty-Program&lt;/a&gt; der Stadt sogar eine kleine Belohnung.&lt;/p&gt;
&lt;p&gt;Ein Meinungsbild der Bürger erhält das Stadtparlament schnell und einfach per &lt;a href=&quot;https://liqd.net/de/about/&quot;&gt;Liquid Democracy&lt;/a&gt;. Das Freifunk Netz der Stadt sorgt für eine flächig verfügbare WLAN Grundversorgung im gesamten Stadtgebiet, falls der eigene Provider einmal ausfällt.&lt;/p&gt;
&lt;p&gt;Die Schnittstellen zur Stadt sind öffentlich und gut verständlich und durch die Stadt erhobene Informationen stehen grundsätzlich als &lt;a href=&quot;https://de.wikipedia.org/wiki/Open_Data&quot;&gt;Open Data&lt;/a&gt; bereit. Freie Parkplätze, Schadstoffsammlung oder Altkleidercontainer werden ebenso interaktiv angezeigt, wie künftige Baustellen oder Entwicklungsmaßnahmen. Die spontane Mitfahrgelegenheit zum Einkauf ergibt sich per digital ausgestrecktem Daumen.&lt;/p&gt;
&lt;p&gt;In Eigenregie konnte die Orscheler Bürgerinitiative pro Windkraft per &lt;a href=&quot;https://de.wikipedia.org/wiki/Digitaler_Zwilling&quot;&gt;Digital Twin&lt;/a&gt; der Stadt die besten Standorte für Windkraftanlagen bezüglich Wirkungsgrad und Lärmbelastung einfach vorab simulieren. Die anonymisierte Standortanfrage an den Grundstückseigentümer wurde direkt im Nachgang per digitalem Kataster übermittelt.&lt;/p&gt;
&lt;p&gt;Aber auch der Stadt selbst hilft der Digital-Twin. Seit Erfassung der Wärmedaten an tausenden Messpunkten kann die Stadt bei eigenen Bauvorhaben die wärmetechnischen Belastungen im Detail berücksichtigen. Mülltonnen melden Ihren Füllstand selbst und erlauben dynamische Leerungsplanung.&lt;/p&gt;
&lt;p&gt;Funk-Wasseruhren erlauben den perfekten Überblick über Wasserverbrauch, Leckagen und Reserven und Feuchtigkeitssensoren zeigen auf, welche Grünflächen leiden. Straßenlaternen reagieren auf Bewegung und schalten bei wenig Betrieb ab. Ohnehin wurden aber vielerorts bereits &lt;a href=&quot;https://www.mdr.de/wissen/leuchtende-baeume-als-strassenlaternen100.html&quot;&gt;biolumineszente Bäume&lt;/a&gt; gepflanzt, die auf umweltfreundliche Art und Weise für eine Grundbeleuchtung sorgen.&lt;/p&gt;
&lt;h2&gt;Zum Weiterlesen&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Die Stadt Münster &lt;a href=&quot;https://opendata.stadt-muenster.de/&quot;&gt;betreibt ein Open-Data Portal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Startup-Hubs gibt es &lt;a href=&quot;https://www.digitalhub.ms/&quot;&gt;zum Beispiel in Münster&lt;/a&gt; oder &lt;a href=&quot;https://www.lift99.co/&quot;&gt;Tallinn&lt;/a&gt;, oder universitär als &lt;a href=&quot;https://goetheunibator.de/unibator-info/startup-programm/&quot;&gt;Startup Programme wie Goethe Unibator&lt;/a&gt; oder an der TU München das &lt;a href=&quot;https://unternehmertum.de/&quot;&gt;Unternehmertum&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Warum wir &lt;a href=&quot;https://hochschulforumdigitalisierung.de/de/dossiers/open-science&quot;&gt;Open Science&lt;/a&gt; brauchen und warum es &lt;a href=&quot;https://hochschulforumdigitalisierung.de/de/blog/schattenbibliotheken-ein-krisensymptom-der-wissenschaft&quot;&gt;Schattenbibliotheken&lt;/a&gt; gibt.&lt;/li&gt;
&lt;li&gt;Es existieren sogar weltweite &lt;a href=&quot;https://www.fiware.org/about-us/smart-cities/&quot;&gt;Open-Source Ansätze für Smart Cities wie beispielsweise Fiware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Der &lt;a href=&quot;https://www.hackerspace-ffm.de/&quot;&gt;Hackerspace FFM e.V. hat eine Adresse in Oberursel&lt;/a&gt; ein Code Club für Software fehlt meines Wissens in Orschel noch.&lt;/li&gt;
&lt;li&gt;Die  Bundesverwaltung der Schweiz zeigt sich im &lt;a href=&quot;https://www.it-markt.ch/cybersecurity/2021-06-04/so-ist-das-erste-bug-bounty-programm-der-bundesverwaltung-verlaufen&quot;&gt;Review des Bug-Bounty Programms&lt;/a&gt; zufrieden.&lt;/li&gt;
&lt;li&gt;IT-daily gibt einen kurzen Einstieg in &lt;a href=&quot;https://www.it-daily.net/it-management/digitalisierung/29483-digital-twins-bilden-die-grundlage-fuer-smart-city-konzepte&quot;&gt;Digital Twins für Smart Cities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ein Essay zur Digitalisierung und Gründergeist in Rhein-Main</title>
      <link>https://denktmit.de/blog/2022-01-20-Rhein-Main-Denken/</link>
      <pubDate>2022-01-20T00:00:00Z</pubDate>
      <guid>https://denktmit.de/blog/2022-01-20-Rhein-Main-Denken/</guid>
      <description>&lt;p&gt;Vor einer Woche schrieb Marius Schmidt &lt;a href=&quot;https://denktmit.de/blog.html&quot;&gt;an dieser Stelle&lt;/a&gt; ein brennendes
Plädoyer für das &lt;a href=&quot;https://denktmit.de/2022/01/14/mein-zukunftstraum-von-silicon-orschel.html&quot;&gt;Silicon Oschel&lt;/a&gt;,
eine Vision für die Stadt, in er die Genossenschaft ihren Sitz hat und vier von
zehn Gründungsmitglieder &lt;a href=&quot;https://denktmit.de/&quot;&gt;der DenktMit-Genossenschaft&lt;/a&gt; ihren Wohnsitz.&lt;/p&gt;
&lt;p&gt;Die Frage, wie Digitalisierung gelingen kann und welche gesellschaftliche Transformation
es braucht — vor allem auch in Hinblick zur Steigerung erfolgreicher Startups in der
IT-Szene — beschäftigt uns als Unternehmer, die wir auch in der Genossenschaft
explizit sind, seit langer Zeit. Hierzu gibt es wahrscheinlich so viele Meinungen
wie Menschen, und die Diskussionen sind oft lebendig (und häufig konstruktiv).&lt;/p&gt;
&lt;p&gt;In diesem Essay möchte ich eine Antwort schreiben auf Marius Vision vom &lt;em&gt;Silicon Oschel&lt;/em&gt;.
Als ich mit diesem Text anfing, fühlte ich mich nur in meinem eigenen Lokalpatriotismus
als Nicht-Oberurseler verletzt. Aber eigentlich war mir klar, dass sich Modernisierung
nur schwer in kommunalen Grenzen denken lässt. Ich möchte mich in diesem Text auf das
Rhein-Main-Gebiet als geografisch kleinsten gemeinsamen Nenner beschränken und eine
in meinen Augen realistischere Vision oder Handlungsoption herausarbeiten. Was muss
eine Stadt wie Oberursel tun, um in der digitalen Welt konkrurenzfähig zu bleiben?&lt;/p&gt;
&lt;h2&gt;Über Grenzen auf Karten und in Köpfen&lt;/h2&gt;
&lt;p&gt;Klar ist: Der Vergleich zwischen Oberursel und dem Silicon Valley ist hyperbolisch,
ein &lt;em&gt;David gegen Goliath&lt;/em&gt; mit Ansage, ein unmöglich zu gewinnendes Rennen. Aber
was ist, wenn man statt Oberursel das &lt;a href=&quot;https://de.wikipedia.org/wiki/Rhein-Main-Gebiet&quot;&gt;Rhein-Main-Gebiet&lt;/a&gt;
gegen Silicon Valley antreten lässt?&lt;/p&gt;
&lt;p&gt;Das Rhein-Main-Gebiet ist ungefähr so groß und hat ungefähr so viele Einwohner
wie das Silicon Valley. Beide Metropolregionen bestehen aus einer Vielzahl von
unterschiedlichen Verwaltungsbezirken (Städten, Landkreisen, Counties u.ä.).
Sie sind die Heimat mehrerer Universitäten und großer Firmen. Sicherlich bringen
sie eine komplett unterschiedliche Geschichte mit sich, in denen die Anfänge der
Digitalwirtschaft im liberalen San Francisco ebenso wie die Klischees von
Ivy League-Universitäten eine große Rolle spielen.
Aber es gibt auch eine einfache Formel, die dem Rhein-Main-Gebiet bis heute fehlt
und die viele andere Metropolregionen deutlich besser können: Eine gemeinsames Branding,
eine gemeinsame Strategie, ein gewisser Zusammenhalt.&lt;/p&gt;
&lt;p&gt;Ich möchte an dieser Stelle eine europaweit beispielhafte geschichtsträchtige Region nennen,
die darin recht erfolgreich ist: Das Ruhrgebiet. Die Gründe
dafür mögen vielfältig sein, die jahrhunderealte (relativ homogene)
Wirtschaftslandschaft der Kohle- und Montanindustrie hat sicher eine anderes
Denken produziert als es der Einfluss der hochspezialisierten Bankenindustrie
in Frankfurt auf das Umland tat. Heute macht der Regionalverband Ruhr
mit einem gemeinsamen Namen Werbung: &lt;a href=&quot;https://metropole.ruhr/&quot;&gt;Metropole.Ruhr&lt;/a&gt;.
Dieser Name ist brilliant, weil er niemanden benachteiligt. Anders der erheblich
leisere &lt;a href=&quot;https://www.region-frankfurt.de/&quot;&gt;Regionalverband FrankfurtRheinMain&lt;/a&gt;,
der schon alleine vom Namen her sehr auf Frankfurt fokussiert ist und in meinen Augen
nur wenig Erfolge verbuchen kann. Seit enigen Jahren kooperieren die hiesigen
Universitäten unter dem Namen
»&lt;a href=&quot;https://www.rhein-main-universitaeten.de/&quot;&gt;Rhein-Main Universitäten&lt;/a&gt;« und wiederholten
dabei nicht den Fehler, Frankfurt als &lt;em&gt;Primus inter pares&lt;/em&gt; herauszustellen.&lt;/p&gt;
&lt;p&gt;Mein Eindruck vom Ruhrgebiet ist sicherlich sehr oberflächlich, da ich nie direkt in
einer Ruhr-Stadt gewohnt habe. In der Geschichte  ist das Gebiet oft von den Interessen
diverser nationaler und regionale Anreiner &amp;quot;zerrissen&amp;quot; worden.
Und auch heute teilen sich die drei Regierungsbezirke
Münster, Arnsberg und Düsseldorf die Region auf. Dennoch gibt es einiges,
wonach man sich in Rhein-Main nur die Finger lecken könnte: Zum Beispiel
ein gemeinsames Stadtbahn-Netz (nicht S-Bahn), für welches im Nachkriegsdeutschland die Weichen
gestellt wurden. Anders in Rhein-Main: Versucht man aus Frankfurt, die Umgebung
zu erreichen, dann merkt man schnell: Die Stadtbahn (U-Bahn) fährt nur in zwei andere Städte,
eine davon Oberursel, eine Bad Homburg. Beide zusammen sind das &lt;em&gt;Powerhorse&lt;/em&gt;
des Hochtaunuskreises, wobei Bad Homburg als Kur- und Kreisstadt noch etwas die Nase vorne
hat. Als jemand, der mehr als 20 Jahre lang im angrenzenden Main-Taunus-Kreis (MTK)
gewohnt hat, kann ich den Stolz und Ehrgeiz dieser beiden Mittelstädte
nachvollziehen: Sie behaupten sich wacker im regionalen Konkurrenzkampf um den &amp;quot;Platz
an der Sonne&amp;quot;. Diesen Kampf haben im Frankfurter Umland schon zu viele Städte aufgegeben,
sich vollends ihrem Schicksal als &lt;em&gt;Schlafstadt&lt;/em&gt; vor den Toren der Metropole hingegeben.&lt;/p&gt;
&lt;h2&gt;Biontech und seine neidischen Nachbarn&lt;/h2&gt;
&lt;p&gt;Nirgendwo ist die Grenzführung im Rhein-Main-Gebiet offensichtlicher als zwischen den
Landeshauptstädten Mainz und Wiesbaden. Historisch durch den Rhein geprägt, den in
der Region auch heute nur wenige Autostraßen und Zugtrassen queren, herrscht eine
Konkurrenz nicht nur hinsichtlich Stadt- und Landkreisgrenzen, sondern
ganzer Bundesländer. Mainz hat 2021 etwas hervorgebracht, was man in Gründerkreisen ein
&lt;em&gt;Unicorn&lt;/em&gt; nennt, ein Einhorn, One-in-a-Billion, das es nach ganz oben schafft. Die
Rede ist natürlich von &lt;a href=&quot;https://biontech.de/&quot;&gt;Biontech&lt;/a&gt;, dem Biotech-Unternehmen
von dem seit einem Jahr die ganze Welt spricht. Und selbst wer sich nicht für
Startups interessiert, merkt nun zum Jahresanfang 2022, welchen Einfluss ein Einhorn
auf seinen Standort ausübt: Mainz macht dank Biontech unvorhergesehene
&lt;a href=&quot;https://www.welt.de/politik/deutschland/article234943142/Mainz-macht-1-09-Milliarden-Euro-Ueberschuss-dank-Biontechs-Gewerbesteuer.html&quot;&gt;Gewerbesteuereinnahmen im Milliarden-Bereich&lt;/a&gt;,
und letzte Woche melden die Medien, dass Biontechs Einfluss sich sogar mit &lt;a href=&quot;https://www.manager-magazin.de/politik/deutschland/biontech-steigert-bruttoinlandsprodukt-in-deutschland-um-0-5-prozent-a-c649697c-fde5-4af9-a425-3cbfef39d534&quot;&gt;0,5%
des Bruttoinlandsproduktes in Deutschland&lt;/a&gt;
messen lässt. Selbst die größten Kritiker der Startup-Bubble recken nun ihre Köpfe
und fragen sich, wie sie diesen Erfolg in ihrem Bundesland, ihrer Region, ihrem
Landkreis, ja sogar ihrer Stadt wiederholen können.&lt;/p&gt;
&lt;p&gt;Stolz kann sich die Universitätsstadt Mainz mit ihren Standortfaktoren
brüsten, sie haben schließlich Biontech hervorgebracht.
Da schaut eine Kurstadt wie Wiesbaden, die nur die eine oder andere
(private) Fachhochschule beheimatet, blöd aus der Wäsche. Die Distanz zwischen den
Stadtzentren von Wiesbaden und Mainz: 10 Kilometer. Zwischen Oberursel und
Frankfurt: 10 Kilometer. Dass Oberursel und Frankfurt zwei verschiedene Städte
sind, das liegt an Generationen zurückliegenden Entscheidungen. Wenn die
&lt;a href=&quot;https://de.wikipedia.org/wiki/Gebietsreform_in_Hessen&quot;&gt;hessische Gebietsreform in den 1970er-Jahren&lt;/a&gt;
anders ausgegangen wäre, dann würde die
&lt;a href=&quot;https://de.wikipedia.org/wiki/Regionalstadt_Frankfurt&quot;&gt;Regionalstadt Frankfurt&lt;/a&gt; heute
große Teile von Main- und Hoch-Taunus-Kreis (inklusive Oberursel, Eschborn und
Bad Homburg) enthalten und fast an Wiesbaden und Mainz grenzen.&lt;/p&gt;
&lt;p&gt;Da die Stadtgrenzen nun aber so sind, wie sie sind, beheimatet das ehemalige Dorf
Niederursel, das bereits seit 1910 Teil Frankfurts ist,
nun Teile einer Universität sowie Max-Planck-Institute, während flussaufwärts Oberursel
(in dieser Hinsicht) leer ausgeht. Was Biontech für Wiesbaden und das Land Hessen ist,
das ist der
&lt;a href=&quot;https://www.uni-frankfurt.de/38074744/campus_riedberg&quot;&gt;Campus Riedberg der Goethe-Universität&lt;/a&gt; für Oberursel und den Hochtaunuskreis.
Diese scheinbare Niederlage des Standortverlierers folgt offensichtlich einer
willkürlichen Logik. Ich hab viele Jahre in Niederursel gewohnt,
die Grenze zu Oberursel kann man nur auf der Karte sehen,
in der echten Welt ist sie unsichtbar. Ironischerweise verläuft sie nicht einmal an
der Bundesautobahn A5, sondern auf unscheinbaren Feldern. Wenn Oberursel an seine
Stadtgrenze Glaspaläste für Thinktanks und Studierendenwohnheime bauen würde, sie
könnten von dort nicht einmal den Unicampus sehen. Die menschgemachte Grenze, sie hat
die Oberurselerinnen und Oberurseler scheinbar ausgesperrt vom Erfolg. Sie ist
offensichtlich irrational, denn in Frankfurt wird wie verrückt gebaut, bis an die
unsichtbaren Stadtgrenzen werden die letzten Frischluftschneisen zugebaut, hauptsache
die formale Zugehörigkeit ist Frankfurt. Die Schere wirkt: Frankfurt top, Umland flop.
Diese Logik macht was mit den Menschen, und sie ist toxisch für den Listenplatz
auf dem Wettbewerb der Regionen. Ein Silicon Valley holt man mit städtischem
Egoismus nicht in das hessische Baryzentrum.&lt;/p&gt;
&lt;p&gt;Das führt uns zu der Kernfrage: Welche Umgebung muss man überhaupt schaffen, um
die moderne digitale Wirtschaft am eigenen Standort zu befördern?&lt;/p&gt;
&lt;h2&gt;Das Oxymoron des Digitalstandortes&lt;/h2&gt;
&lt;p&gt;Seit der weltweiten Covid-19-Pandemie ist die Digitalisierung auch im letzten
Wohnzimmer angekommen: In Deutschland haben sehr viele Menschen zum ersten mal die
Erfahrungen gemacht, die für &lt;em&gt;Teleheimarbeiter:innen&lt;/em&gt;, digitale Normaden oder
Mitarbeiter von &lt;em&gt;Remote First&lt;/em&gt; bzw. &lt;a href=&quot;https://en.wikipedia.org/wiki/Distributed_company&quot;&gt;Remote Only&lt;/a&gt;-Unternehmen seit vielen Jahren
täglich machen: Standort spielt so gut wie keine Rolle mehr.&lt;/p&gt;
&lt;p&gt;Ein digitales Unternehmen kann seinen Standort nach wirtschaftlichen Gesichtspunkten
aussuchen: Niedrige Gewerbesteuer, lokale Wirtschaftsförderung, geringe Bürokratie.
Im europäischen Binnenmarkt ist Estland mit seiner effizienten digitalen Verwaltung
für viele digital Natives attraktiv. Für die Situation der Gründer:innen ist das meine Utopie:
Wohnen, wo man will — ob Großstadt, wo Kunst und Kultur locken, oder naturnaher
Kleinstadt. Die Wirklichkeit ist natürlich etwas komplizierter: &lt;em&gt;Remote Only&lt;/em&gt;
sind nur wenige Softwareunternehmen. Das Rhein-Main-Unicorn Biontech hingegen
braucht Laborräume und als medizinnahes Biotechnologieunternehmen auch die Nähe
zu einem Uniklinikum — sicher ein Grund, warum sich der Firmensitz auf/neben dem Campus der
Mainzer Universitätsklinik befindet. In Deutschland gibt es &lt;a href=&quot;https://www.uniklinika.de/die-deutschen-universitaetsklinika/uebersicht-der-universitaetsklinika/&quot;&gt;knapp 40 Uniklinken&lt;/a&gt;,
dazu kommen &lt;a href=&quot;https://de.wikipedia.org/wiki/Liste_der_akademischen_Lehrkrankenh%C3%A4user_in_Deutschland&quot;&gt;ca. 600 Lehrkrankenhäuser&lt;/a&gt;, an
denen manchmal auch geforscht wird. Auf dem Stadtgebiet Oberursel steht übrigens
kein einziges davon (wohl aber in Bad Homburg).&lt;/p&gt;
&lt;p&gt;Die Vielfalt des Startup-Marktes und die entsprechend unterschiedlichen Anforderungen
werden oft ignoriert, wenn man Gründer:innen unterstützen will. Oft entsteht
im Kopf ein Bild vom Teenager Mark Zuckerberg mit seiner Gefolgschaft, der sich
möglicherweise durch einen hippen Coworkingspace in einem Szeneviertel anlocken
lässt. Die Gewerbemieten in angesagten Innenstädten sind teuer, doch der Preis ist
die gute Nachbarschaft wert, wenn &amp;quot;Ideenräume&amp;quot; entstehen und all die Art von
gegenseitiger Befruchtung, die &lt;a href=&quot;https://www.de-hub.de/&quot;&gt;digital Hubs&lt;/a&gt; bewerben.
Zu einer intakten Gründerszene gehört am Ende des Tages das Standortangebot
von Netzwerk, Geld und hochqualifizierten Mitarbeitern: All das ist in Klein- und Mittelstädten rar.&lt;/p&gt;
&lt;p&gt;Es gibt in Deutschland diverse Institute und Lehrstühle, die untersuchen, welche
Bedingungen aufeinandertreffen müssen, damit neue Ideen entstehen. Die können
Ursache und Wirkung sicher besser aufzählen als ich.
Zum Beispiel der
&lt;a href=&quot;https://deutschestartups.org/&quot;&gt;Bundesverband deutscher Startups e.V.&lt;/a&gt;, der
regelmäßig den &lt;a href=&quot;https://deutscherstartupmonitor.de/&quot;&gt;deutschen Startup-Monitor&lt;/a&gt;
herausbringt. Lezterer bringt sogar regionale Studien heraus, z.B.
den &lt;a href=&quot;https://deutschestartups.org/wp-content/uploads/2021/02/Hessen_Startup_Monitor_2021.pdf&quot;&gt;Hessen Startup Monitor 2021&lt;/a&gt;.
Ähnlich wie die Hub-Initiative erkennt man Frankfurt als &amp;quot;Cluster der
Fintech-Szene&amp;quot;, das überrascht mich nicht. Welche Rolle kann da ein großer
Vorort wie Oberursel spielen?&lt;/p&gt;
&lt;h2&gt;Die &amp;quot;Lebensqualität&amp;quot; soll es richten&lt;/h2&gt;
&lt;p&gt;Als Freund des Städtischen ist meine Antwort darauf eintönig: Kultur und
Szene schaffen, moderne (nicht schrullige) Eigenschaften stärken, junge Menschen
anlocken — mit Bildungsangeboten, günstigem Wohnraum, moderner Infrastruktur und
Überwindung von tradierten Mustern. Die Banalitäten gipfeln in Kampfbegriffen wie
&lt;em&gt;Lebensqualität&lt;/em&gt;,
eine Eigenschaft mit der sich viele Städte gerne selbst adeln. Da die Präferenzen,
was denn nun Lebensqualität ausmacht, stark auseinandergehen, halte ich von dem
Begriff gar nichts. Geht es darum, wo man am besten mit seinem Lastenfahrrad
parken kann, um einen achtsamen veganen Hafer-Capuccino in einer hippen
Kraft-Beer-Rösterei mit zeitgemäßem Freifunk zu trinken? Oder darum, wo man
günstig eine möglichst große Doppelhaushälfte/-garage für seine Familie und die zwei Autos bekommt?
In Statistiken steht steht in Deutschland sehr oft München vornean. Das widerspricht
meinen Klischees über diese Stadt, die ich aber tatsächlich nur wenig besser kenne
als das Ruhrgebiet. Ausgerechnet in der deutschen Hochburg von Tradition und Tracht
wird die Zukunft gemacht -- in meinen Augen ein großer Gegensatz, aber Startup-Szene
ist eben mehr als Wohlfühlatmosphäre. München ist teuer und das Netzwerk stimmt:
An der TU-München (TUM) schätzt man sein
&lt;a href=&quot;https://unternehmertum.de/&quot;&gt;erfolgreiches Ausgründungszentrum UnternehmerTUM&lt;/a&gt;, was
sich selbst als das größte seiner Art in Europa bezeichnet. Vielleicht kommt in
München einfach alles zusammen, was zusammen gehört.
Also &lt;em&gt;Adieu&lt;/em&gt;, Oberursel, Rhein-Main-Gebiet, auf in den Süden?&lt;/p&gt;
&lt;h2&gt;Eschborn und Garching: Wenn der Vorort profitiert&lt;/h2&gt;
&lt;p&gt;Ich war im Rahmen meiner Promotion häufig an der TUM. Sie befindet sich zusammen auf dem
&lt;a href=&quot;https://de.wikipedia.org/wiki/Hochschul-_und_Forschungszentrum_Garching&quot;&gt;Campus Garching&lt;/a&gt;,
ein typischer naturwissenschaftlicher Campus der außerhalb der Stadt errichtet wurde —
wie der Frankfurter Riedberg, nur ein paar Jahre früher und deutlich größer.
Interessanterweise profitiert davon enorm die Stadt &lt;em&gt;Garching&lt;/em&gt;, innerhalb deren
Grenzen der Campus steht. Mittlerweile mit U-Bahn-Anschluss, stehen die Hotels dieses
kleinen 20.000-Seelen-Dorfes vor den Toren Münchens preislich denen der Innenstadt kaum
nach. Die Universitäts- und Forschungseinrichtungen sind ein riesiger Jobmotor.&lt;/p&gt;
&lt;p&gt;Es wäre verkehrt, Garching mit dem Frankfurter Niederursel zu vergleichen. Dafür stimmen
die Verhältnisse nicht, eigentlich profitiert in Niederursel nur
&lt;a href=&quot;https://lahmer-esel.de/&quot;&gt;der lahme Esel&lt;/a&gt; und das Nordwestzentrum vom nahen Unicampus.
Ein deutlich besserer Vergleich ist die Erfolgsgeschichte, die die Stadt Eschborn
im Main-Taunus-Kreis verbuchen konnte: Es hat es erfolgreich mit
günstigen Gewerbeimmobilien und -Steuern große Dienstleistungsunternehmen aus der Frankfurter
Innenstadt herausgelockt, wie etwa die Deutsche Bank, Börse, Telekomm, Ernst &amp;amp; Young,
IBM, etlicher Behörden wie der BAFA und viele mehr.&lt;/p&gt;
&lt;p&gt;Eschborn hat zwar keinen U-Bahn-Anschluss, aber auf dieses Firmenportfolio dürfte
wiederum Oberursel ganz schön neidisch sein. Und die Prominenz wirkt international: Auf den
Papers, die ruhmreiche Münchner Wissenschaftler:innen schreiben, steht als Adresse Garching,
nicht München. Und das berühmte hessische Radrennen &lt;em&gt;Rund um den Henninger Turm&lt;/em&gt; hat dank des
prominenten Eschborner Finanzplatzes den Namen &lt;a href=&quot;https://www.eschborn-frankfurt.de/&quot;&gt;Eschborn-Frankfurt&lt;/a&gt;.
Eschborn hat das geschafft, wovon Oberursel träumt. Bleibt die Frage: War das ein »Aufbäumen«
des Knechts gegen seinen Wirt? Leidet Frankfurt darunter, dass Eschborn namenhafte Firmen
&lt;em&gt;abzieht&lt;/em&gt;?&lt;/p&gt;
&lt;h2&gt;Zukunft groß denken&lt;/h2&gt;
&lt;p&gt;Die Vision des &lt;em&gt;Silicon Oschel&lt;/em&gt; ist eigentlich eine einer funktionstüchtigen Digitalisierung
aus der Perspektive eines IT-affinen Menschen. Sie ist nicht auf Oberursel begrenzt und
lässt sich als Blaupause auf jede Region der Erde anwenden.&lt;/p&gt;
&lt;p&gt;Dem schönen Traum vom &lt;em&gt;Silicon Oschel&lt;/em&gt; ging die Gründung des
&lt;a href=&quot;https://www.oberursel.de/de/presse-artikel/2022-01/digitalrat/&quot;&gt;Digitalrats der Stadt Oberursel&lt;/a&gt;
voraus. Der wagt es ebenfalls zu träumen, doch die selbstgesteckten Zielen (oder Visionen)
einer &lt;a href=&quot;https://www.taunus-nachrichten.de/oberursel/nachrichten/oberursel/smart-city-vision-fuer-zukunftsfaehigkeit-stadt-id114655.html&quot;&gt;Smart City im Oberurseler Sinne&lt;/a&gt;
bleiben in meinen Augen weit hinter denen eines &lt;em&gt;Silicon Oschels&lt;/em&gt; zurück.
Wer nicht groß denkt, wird auch keine großen Projekte ergreifen. Für Oberursel sind
Garching und Eschborn gute Vorbilder, wie Trabantenstädte und Vororte von der Metropole
gewinnen können. Um meine obige rhetorische Frage selbst zu beantworten: Nein, die
Innenstadt leidet natürlich nicht darunter, Wachstum in die Breite und Wachstum in die Höhe
schließen sich nicht gegenseitig aus. Leider sind für meinen Geschmack weder Garching, noch
Eschborn (und ehrlich gesagt auch nicht Oberursel) lebenswert, da ich dort mit meinem
Lastenfahrrad keinen guten veganen Sojamilch-Capuccino bekomme ;-). Aber das ist ein anderes
Thema.&lt;/p&gt;
&lt;h2&gt;Zum Weiterlesen&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Das Buch &lt;a href=&quot;https://www.ullstein-buchverlage.de/nc/buch/details/sprunginnovation-9783430210638.html&quot;&gt;Sprunginnovation&lt;/a&gt;
vom Direktor der &lt;a href=&quot;https://www.sprind.org/de/&quot;&gt;Bundesagentur für Sprunginnovationen&lt;/a&gt;,
Rafael Laguna de la Vera, zeichnet nicht nur ein gutes Bild von der Startupsituation
in Deutschland, sondern gibt auch viele Ideen, was gemacht werden muss.&lt;/li&gt;
&lt;li&gt;Die &lt;a href=&quot;https://www.e-fi.de/&quot;&gt;Expertenkommision für Forschung und Innovation&lt;/a&gt;
schreibt u.a. über Bürokratieabbau und Innovationsmanagament.&lt;/li&gt;
&lt;li&gt;Die meisten Unis haben mittlerweile gut ausgestattete Ausgründungszentren
und Lehrstühle für Gründungsmanagament, wo es häufig interessante Literatur
gibt. So wartet zB. das Potsdamer Hassno Plattner Institut mit der
Forschungsrichtung &lt;a href=&quot;https://hpi.de/hoelzle/it-entrepreneurship.html&quot;&gt;IT-Entrepreneurship&lt;/a&gt;
auf.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Big Data Accounting with Python and other tools: An experience report</title>
      <link>https://denktmit.de/blog/2022-02-03-Accounting-Auditing-Big-Data-Python-Data-Warehousing/</link>
      <pubDate>2022-02-03T00:00:00Z</pubDate>
      <guid>https://denktmit.de/blog/2022-02-03-Accounting-Auditing-Big-Data-Python-Data-Warehousing/</guid>
      <description>&lt;p&gt;This post is an experience report of a project carried out by two persons at &lt;a href=&quot;https://denktmit.de/&quot;&gt;DenktMit eG&lt;/a&gt;
a short while ago. We will illustrate our approaches, with a technical focus, and we
will ensure the anonymity of our client. In fact, this client was contacting us for
helping him auditing a large German company. The initial problem was easily formulated: They used
to analyze accounting journals with &lt;em&gt;Microsoft Excel&lt;/em&gt;, but this very company subject to be
audited submitted such a large journal that &lt;em&gt;Excel failed&lt;/em&gt;. This is a somewhat classical initial
problem which results in consulting IT experts.&lt;/p&gt;
&lt;p&gt;For me, this is one of the first projects carried out with &lt;a href=&quot;https://denktmit.de/&quot;&gt;DenktMit eG&lt;/a&gt;, the newly founded
partnership of IT professionals in mid 2021. Given my weird career which involves both a computer
museum and astrophysics, this story will be probably somwhat unsual.&lt;/p&gt;
&lt;h2&gt;A history lession of batch processed accounting data&lt;/h2&gt;
&lt;p&gt;Historically, there is hardly any domain in industry which was winded up as quickly by automated
computation as the financial sector, for instance banking, accounting and auditing.
Beginning with &lt;a href=&quot;https://technikum29.de/en/computer/electro-mechanical.php&quot;&gt;early 20th century desk calculators&lt;/a&gt;,
&lt;a href=&quot;https://technikum29.de/en/computer/punchcard.php&quot;&gt;punch card computing&lt;/a&gt; was intensively
used for massive (semi) automated processing of accounting data. The single card with 80 characters
(columns in traditional &lt;a href=&quot;https://en.wikipedia.org/wiki/EBCDIC&quot;&gt;EBCDIC charset&lt;/a&gt;) was ideal for
representing single transactions. On dedicated machines, where typically one machine could
carry out only one job, decks of these cards could be sorted, values could be accumulated,
reports of sub accounts could be made, and many more. With no or orders of hundreds bytes of
random access memory (RAM), many aspects of banking could be covered. This is where terms such as
&lt;em&gt;batch processing&lt;/em&gt; originate from, and these tasks were, by nature, heavily I/O bound.
Later on, these computers were replaced by more compact successors, a branch generally known
as &lt;a href=&quot;https://technikum29.de/en/computer/commercial.php&quot;&gt;commercial computing&lt;/a&gt; in distinction to
&lt;a href=&quot;https://technikum29.de/en/computer/early-computers.php&quot;&gt;scientific computing&lt;/a&gt;. In it&#39;s
extreme forms, commercial computing evventually lead to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Mainframe_computer&quot;&gt;mainframe computer architectures&lt;/a&gt;
whereas scientific computing lead to what we call
&lt;a href=&quot;https://en.wikipedia.org/wiki/Supercomputer&quot;&gt;supercomputers&lt;/a&gt;. The architecture of these two
computers is fundamentally different: A mainframe has a focus on correctness, fault tolerance,
high throughtput and reproducability. In the end, it&#39;s still batch processing what drives
banking in general. In contrast, high performance (super)computing has a focus on exploiting parallelity
in order to reduce the &lt;em&gt;time to solution&lt;/em&gt;. Processing of &lt;em&gt;big data&lt;/em&gt; is of course also about
&lt;a href=&quot;https://en.wikipedia.org/wiki/Embarrassingly_parallel&quot;&gt;embarrassingly parallel&lt;/a&gt; batch
processing, but the art of supercomputing is to exploit the available ressources to the maximum.
Typically this requires different attemps from traditional serial computing approaches.&lt;/p&gt;
&lt;h2&gt;Doing banking with an high performance computing approach&lt;/h2&gt;
&lt;p&gt;I run a &lt;a href=&quot;https://technikum29.de/en/&quot;&gt;computer museum that holds a vintage punch card processing center&lt;/a&gt;,
and yet I am a &lt;a href=&quot;https://svenk.org/research/&quot;&gt;computational scientist&lt;/a&gt; who spent good times on
writing codes that can keep millions of CPUs busy in large computer centers, while maintaining
good efficiency and delivering relevant scientific results.&lt;/p&gt;
&lt;p&gt;Over Christmas 2021, I carried out a data processing and analysis project with a client having
trouble auditing one of the largest exchanges in Germany. The client&#39;s client has carried out
millions of trades within a year, which results in a huge accounting journal, speaking of
almost 100GB of transactional rows in a single CSV file. Just to give an idea of such data,
this is a classical double-entry accounting journal with a general format such as the following
table, with a shape of roughly 300 million rows and 50 columns:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Row&lt;/th&gt;
&lt;th&gt;account&lt;/th&gt;
&lt;th&gt;conter account&lt;/th&gt;
&lt;th&gt;debit amount&lt;/th&gt;
&lt;th&gt;credit amount&lt;/th&gt;
&lt;th&gt;date&lt;/th&gt;
&lt;th&gt;receipt&lt;/th&gt;
&lt;th&gt;Purpose text&lt;/th&gt;
&lt;th&gt;…&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1234&lt;/td&gt;
&lt;td&gt;5678&lt;/td&gt;
&lt;td&gt;123,45&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;01.01.2020&lt;/td&gt;
&lt;td&gt;abcdef&lt;/td&gt;
&lt;td&gt;Some free text here&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;5678&lt;/td&gt;
&lt;td&gt;1234&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;123,45&lt;/td&gt;
&lt;td&gt;01.01.2020&lt;/td&gt;
&lt;td&gt;abcdef&lt;/td&gt;
&lt;td&gt;Some free text here&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;300,000,000&lt;/td&gt;
&lt;td&gt;1838123&lt;/td&gt;
&lt;td&gt;78748132&lt;/td&gt;
&lt;td&gt;789,01&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;31.12.2020&lt;/td&gt;
&lt;td&gt;abcdef&lt;/td&gt;
&lt;td&gt;Some free text here&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;300,000,001&lt;/td&gt;
&lt;td&gt;78748132&lt;/td&gt;
&lt;td&gt;1838123&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;789,01&lt;/td&gt;
&lt;td&gt;31.12.2020&lt;/td&gt;
&lt;td&gt;abcdef&lt;/td&gt;
&lt;td&gt;Some free text here&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Traditionally, &lt;em&gt;big data&lt;/em&gt; is defined as data that cannot fit into a single computer. However,
100GB is something which can clearly be put into memory in a large machine, so this is not
contemprary big data. In data science, we work with much larger data sets.
However, the shape of this single table is disadvantageous for many traditional data processing
attemps (see more below). Millions of rows is also by no means a larg number in a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Relational_database#RDBMS&quot;&gt;relational database managament system (RDBMS)&lt;/a&gt;.
And yet, quickly after launching this project, we were surprised about the difficulty of dealing
with a single table of that size.&lt;/p&gt;
&lt;p&gt;As a last excursion into history, it should be said that, mainly due to reasons of trust and
compliance, we carried out the project remotely on a clients workstation dedicated for this job. When it
compes to modern day computing, in the past decades we have percieved &lt;em&gt;convergence&lt;/em&gt; of
different architectures. Today&#39;s supercomputing is in many times putting together a cluster
of commodity personal computers. And instead of dedidacted and expensive mainframes, cheap
cloud computing is applied on standard server architectures. When it comes to hardware, the
line is heavily blurred between the domains of science and commerce. Interestingly, when
it comes to software, the situation is quite different. It might be said that the general
term refering to modern day big data batch processing are
&lt;a href=&quot;https://en.wikipedia.org/wiki/External_memory_algorithm&quot;&gt;external memory or out-of-core algorithms&lt;/a&gt;.
As it is with punched cards, these jobs are I/O bound and the size of the memory plays a
tangential role.&lt;/p&gt;
&lt;p&gt;From the perspective of a data scientist, one of the first
jobs when encountering a new data set is to obtain a &lt;em&gt;feeling&lt;/em&gt; for the data, or as a
matter-of-fact, getting the correct idea of data type and distribution in the individual table
rows and columns. This requires representing the tabular data in a suitable file format and
having tools at hand for in-depth analysis.&lt;/p&gt;
&lt;h2&gt;Using astrophysical tools for accounting: Welcome to Vaex.&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://vaex.io/&quot;&gt;Vaex&lt;/a&gt; is the Python library which was chosen by the leaving IT guy at
the client&#39;s office at the time we started taking over. Incidentally, this is a data
processing framework originating from big data analysis in astrophysics, the subject where
I carried out my PhD in a few years ago. Despite the library is advertised as a general
purpose tool &lt;a href=&quot;https://vaex.io/&quot;&gt;on its website&lt;/a&gt;, the origins are clearly visible when
inspecting &lt;a href=&quot;https://vaex.io/docs/api.html&quot;&gt;the vaex API&lt;/a&gt;, which has for instance
(geometric) region based filtering and a focus on geometry based visualization.&lt;/p&gt;
&lt;p&gt;Vaex is an instance in a general class of python data processing libraries which tries to
provide a parallel implementation of the &lt;a href=&quot;https://pandas.pydata.org/&quot;&gt;pandas API&lt;/a&gt; and
datatypes (which itself is a clone of the
&lt;a href=&quot;http://www.r-tutor.com/r-introduction/data-frame&quot;&gt;data frames&lt;/a&gt; type in the
&lt;a href=&quot;https://www.r-project.org/&quot;&gt;R language for statistical computing&lt;/a&gt;). Another popular
candidate within this class of libraries is &lt;a href=&quot;https://dask.org/&quot;&gt;dask&lt;/a&gt;, advertising itself
as providing &lt;em&gt;advanced parallelism for analytics, natively scaling in Python&lt;/em&gt;. The
promise of this libraries: Low learning curve and tight integration with other analytics
code written in Python (such as the legendary &lt;a href=&quot;https://scikit-learn.org/&quot;&gt;scikit-learn&lt;/a&gt;
machine learning toolbox). From the perspective of the programmer, the extra steps are
typically:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An initial &lt;em&gt;read in&lt;/em&gt; which transforms the raw data (for instance given in a CSV format)
to some tailored format such as &lt;a href=&quot;https://arrow.apache.org/&quot;&gt;Apache arrow&lt;/a&gt; or
some custom format ontop of &lt;a href=&quot;https://arrow.apache.org/&quot;&gt;HDF5&lt;/a&gt;. This target format allows
for memory mapping and optimal distributed access with minimal overhead.
In case of &lt;em&gt;dask&lt;/em&gt;, it
also allows for streaming remote data the initial conversion step can be skipped.&lt;/li&gt;
&lt;li&gt;Queries on these data are composed at run-time in form of a delayed &lt;em&gt;task graph&lt;/em&gt; which is
then executed on the available compute ressources (which typically can spawn several
processors or machines in a client-server fashion, boiling down to classical
map-reduce approaches of big data).&lt;/li&gt;
&lt;li&gt;Query results can be fed to in-memory representations typically falling back to traditional
pandas dataframes. These dataframes can be processed with numpys
&lt;a href=&quot;https://en.wikipedia.org/wiki/Single_instruction,_multiple_data&quot;&gt;SIMD vectorization&lt;/a&gt; but
not with manycore, which is not that practical for many gigabytes of in-memory tables.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Considerering Vaex vs. Dask&lt;/h2&gt;
&lt;p&gt;When it comes to raw performance and time to solution,
my impression is that &lt;em&gt;nothing beats vaex&lt;/em&gt;. With the given
dataset, stored on a local SSD, it can exploit all 24 cores of the Intel i9 processor with a
decent load on memory and provide answers to complex accumulation and grouoping operations
within fractions of a second.&lt;/p&gt;
&lt;p&gt;For my feeling, &lt;em&gt;vaex&lt;/em&gt; is at least one order of magnitude faster then &lt;em&gt;dask&lt;/em&gt; with similar
tasks/codes. However, &lt;em&gt;dask&lt;/em&gt; feels much more mature, versatile and general purpose. There are
many cases where (at least for me), &lt;em&gt;vaex&lt;/em&gt; did not implement the features according to the
API. In constrast, dask provided even a web based dashboard for visualizing various metrics.
Given their abstraction over
parallelization strategies, both libraries are quite sensitive to the host setup. Unfortunately,
we had to use Microsoft Windows, were vaex was notoriously instable and unreliable, ending up
in crashes which lacked any stacktrace, providing no chance for debugging and improving.&lt;/p&gt;
&lt;p&gt;Just to give some numbers, here are some performance metrics when doing a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Histogram&quot;&gt;Histogram&lt;/a&gt; (counting unique entries) on a column with
around 300M records:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Library&lt;/th&gt;
&lt;th&gt;Typical Code&lt;/th&gt;
&lt;th&gt;Runtime&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Vanilla&lt;/td&gt;
&lt;td&gt;&lt;code&gt;for row, column in zip(file, columns): unique_values[k].update(row[column])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;3 min&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dask&lt;/td&gt;
&lt;td&gt;&lt;code&gt;unique_data = ddf[column].value_counts().compute()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2 min&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vaex&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tab = df.groupby(column, agg=[vaex.agg.count(column)]).to_pandas_df()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;7 sec&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here, &lt;em&gt;vanilla&lt;/em&gt; refers to an approach with &lt;a href=&quot;http://protocolostomy.com/2010/01/22/what-batteries-included-means/&quot;&gt;batteries included&lt;/a&gt;,
i.e. using the standard library modules &lt;a href=&quot;https://docs.python.org/3/library/csv.html&quot;&gt;csv&lt;/a&gt; and
&lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.Counter&quot;&gt;Counter&lt;/a&gt; with serial processing
line by line and column by column on the raw CSV file.&lt;/p&gt;
&lt;p&gt;Obviously, for more challenging tasks such as writing out particular data or doing more sophisticated
&lt;em&gt;map reduce&lt;/em&gt; cycles, your milage may greatly vary. Vaex puts quite some effort to optimizing custom
mappers with &lt;a href=&quot;https://vaex.io/docs/tutorial.html#Just-In-Time-compilation&quot;&gt;just in time compilation&lt;/a&gt;
using &lt;a href=&quot;https://numba.pydata.org/&quot;&gt;numba&lt;/a&gt;, &lt;a href=&quot;https://pythonhosted.org/pythran/&quot;&gt;pythron&lt;/a&gt; or
&lt;a href=&quot;https://developer.nvidia.com/cuda-zone&quot;&gt;CUDA&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My conclusion: Try first with vaex, best by avoiding Microsoft Windows as much as possible. If this
does not work well, try Dask.&lt;/p&gt;
&lt;h2&gt;Data Warehousing for Data Integration&lt;/h2&gt;
&lt;p&gt;The decent answer for properly managing this amount and type of data is &lt;em&gt;data warehousing&lt;/em&gt;. This
term collects the tooling and attempts for managing heterogenous data in a structured manner.
One of the biggest problems of the single large CSV table is the massive amount of duplication.
Think of a table named &lt;em&gt;name of booking person&lt;/em&gt; and holding 100M lines the name &lt;em&gt;foo&lt;/em&gt; and 100M
lines the name &lt;em&gt;bar&lt;/em&gt;, resulting in at least 1.2GB of ASCII data, whereas the information content
in this case is only around 200M booleans or bits. In a relational schema, this colum clearly
screams for a seperate table and a foreign index column.&lt;/p&gt;
&lt;p&gt;Setting up a sane SQL schema for this type of data is an obvious task. Most accumulation and filtering
tasks could then be implemented by simple SQL queries, running on a single or distributed database
cluster (such as &lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt;) in a very classic fashion.&lt;/p&gt;
&lt;p&gt;Further considerations would imply in a proper data warehouse (DWH) which defines common schemas for
common data types. A DWH also allows for carefully controlled data duplication and provides various
interfaces such as a &lt;a href=&quot;https://hadoop.apache.org/&quot;&gt;Apache Hadoop&lt;/a&gt; cluster which allows to interface
with high performance computing frameworks as presented above, without worring about data
representation.&lt;/p&gt;
&lt;p&gt;Given the tight timeline of the project in discussion, we carried out all demanded tasks within the
timeline of a few days. We mostly &lt;a href=&quot;https://en.wikipedia.org/wiki/Space%E2%80%93time_tradeoff&quot;&gt;traded CPU time against memory&lt;/a&gt;
and filled the hard disk with tons of redundant data, differently filtered or splitted. This was
not very clever, but &lt;em&gt;got the job done&lt;/em&gt;. Interestingly, the open source
&lt;a href=&quot;https://www.hitachivantara.com/de-de/products/data-management-analytics/pentaho-platform/pentaho-data-integration.html&quot;&gt;Pentaho Data Integration&lt;/a&gt;
platform by HITACHI saved the day for some queries. This is a visual programming toolkit optimized
for streaming dataflows which we abused for batch data processing. It won&#39;t win a prize when it
comes to &lt;em&gt;time to solution&lt;/em&gt; performance, as parallelization is only performed on individual
data processing steps (which means no meaningful parallelization in a serial processing queue).
However, it is stable and tested and in this respect as good as any serial programming attempt
in any suitable programming language.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This was a short and fun project on a kind of dataset I never worked before with. Despite the
number of analyses asked for were very basic (thinking of histograms, simple statistical analysis
such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Benford%27s_law&quot;&gt;Benford&#39;s law&lt;/a&gt; and data filtering
and searching), the primary client&#39;s choice of &lt;em&gt;Windows and Python&lt;/em&gt; and the strong focus on
&lt;em&gt;interactive performance&lt;/em&gt; was a real show stopper. This kind of tooling is a particular choice on
superficial goals (such as time to solution) but neglects important basics such as proper data
sanatization and representation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Importance of Expressive Domain Models</title>
      <link>https://denktmit.de/blog/2022-03-15-express-your-domain-model-with-asciidoctor-and-plantUML/</link>
      <pubDate>2022-03-15T00:00:00Z</pubDate>
      <guid>https://denktmit.de/blog/2022-03-15-express-your-domain-model-with-asciidoctor-and-plantUML/</guid>
      <description>&lt;h2&gt;The Importance of Expressive Domain Models&lt;/h2&gt;
&lt;p&gt;Expressive and rich domain models gained a growing popularity with the rise of Domain-Driven Design, which was
coined by Eric Evans by his book &lt;a href=&quot;https://www.domainlanguage.com/ddd/&quot;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/a&gt; and the growing popularity of the Ports-and-Adapters software architecture.&lt;/p&gt;
&lt;p&gt;Key to an expressive domain is the ubiquitous language, which is used both by the developers and the business people
in your team. Developing such a ubiquitous language requires extensive collaboration between these two parties
throughout a software development project. Discussing a well formatted diagram together with the business people is a
lot easier, than looking at the actual code.&lt;/p&gt;
&lt;p&gt;However, keeping such diagram up-to-date is a boring task, which can
easily be forgotten. That is one reason why so many wiki pages are outdated one minute after you hit the save button
on it.&lt;/p&gt;
&lt;p&gt;Instead of having to update such pages, we want to generate the relevant documentation based on the actual code.
This post will present you one easy way to integrate a workflow to generate a UML diagram based on your domain
classes and render it within a asciidoc HTML document, which can be easily published as a static website.&lt;/p&gt;
&lt;p&gt;Visualizing our domain classes in a HTML document, which can be easily published e.g. as a static website,
is a two-step process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We need to generade a PlantUML diagram file, which can be rendered into a PNG file&lt;/li&gt;
&lt;li&gt;We need to add an asciidoc to our project, which includes and renders the generated PlantUML file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can find a running example of the code described in this post on &lt;a href=&quot;https://github.com/DenktMit-eG/de.denktmit.blog.domain-diagram-example&quot;&gt;github.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;1. Generate a PlantUML Diagram&lt;/h2&gt;
&lt;p&gt;There are multiple maven plugins available, which can generate PlantUML syntax for given Java classes.
We decided to use the &lt;a href=&quot;https://github.com/devlauer/plantuml-generator&quot;&gt;plantuml-generator-maven-plugin&lt;/a&gt;, since it
includes various well documented configuration options and includes support for generating the asciidoc wrapper.&lt;/p&gt;
&lt;p&gt;The plugin can be configured within the &lt;code&gt;plugin&lt;/code&gt; section of our &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;plugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;plantuml-generator-maven-plugin&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;de.elnarion.maven&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;1.2.0&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;executions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;execution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;generate-simple-diagram&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;goals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;goal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;generate&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;goal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;goals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;phase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;generate-test-sources&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;phase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;configuration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;outputDirectory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;${build.directory}/classes/docs&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;outputDirectory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;outputFilename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;domain.puml&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;outputFilename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;scanPackages&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;scanPackage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;de.denktmit.domain&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;scanPackage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;scanPackages&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;enableAsciidocWrapper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;true&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;enableAsciidocWrapper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;configuration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;execution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;executions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;plugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All classes within the package &lt;code&gt;de.denktmit.domain&lt;/code&gt; will be included in the generated PlantUML file. The file will be
generated in the directory &lt;code&gt;/target/classes/docs&lt;/code&gt;. This directory is crucial, since we need to reference this file
from within our asciidoc later.&lt;/p&gt;
&lt;h2&gt;2. Render Diagram within an Asciidoc&lt;/h2&gt;
&lt;p&gt;In this step we integrate the generated PlantUML file into an asciidoc file, which can be part of an existing
documentation. The following asciidoc is a minimal example for rendering our PlantUML file:&lt;/p&gt;
&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;= Diagram Example

&lt;span class=&quot;token key atrule&quot;&gt;// Configuration for external diagram rendering service&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;:diagram-server-url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//kroki.io/
&lt;span class=&quot;token key atrule&quot;&gt;:diagram-server-type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; kroki_io

== Domain Diagram

This is a simple asciidoc example to illustrate how to efficiently generate a domain class diagram from code.

// include the PlantUML diagram file
include&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;domain.puml&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This files can be rendered into an HTML document with the help of the asciidoctor toolchain, which is also
conveniently available as a maven plugin:&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;plugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org.asciidoctor&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;asciidoctor-maven-plugin&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;${asciidoctor.version}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dependencies&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;org.asciidoctor&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;asciidoctorj-diagram&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;${asciidoctor.version}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dependencies&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;configuration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;sourceDirectory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;${build.directory}/classes/docs&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;sourceDirectory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;requires&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;asciidoctor-diagram&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;requires&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;configuration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;executions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;execution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;generate-html-doc&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;phase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;generate-test-resources&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;phase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;goals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;goal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;process-asciidoc&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;goal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;goals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;configuration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;backend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;html5&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;backend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;attributes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;toc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;left&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;toc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;attributes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;configuration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;execution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;executions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;plugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rendering a PlantUML diagram into a PNG file actually requires (graphviz)[https://graphviz.org] to be installed on
the build host. Since this can be an issue especially in CI-environments, asciidoc includes support to use external
services to render PlantUML and other diagram types. (Kroki)[https://korki.io] is one of these services which can
also be self-hosted to avoid sending sensitive data to public webservices. In our example we configured the public Kroki
instance to be used to render our diagram within the asciidoc:&lt;/p&gt;
&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;:diagram-server-url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//kroki.io/
&lt;span class=&quot;token key atrule&quot;&gt;:diagram-server-type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; kroki_io&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Publish Documentation&lt;/h2&gt;
&lt;p&gt;Running &lt;code&gt;mvn package&lt;/code&gt; will execute the PlantUML generation and render the asciidoc as a HTML document afterwards.
The result will look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://denktmit.de/2022-03-20-uml-diagram.webp&quot; alt=&quot;Domain UML Diagram&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The document will be generated into the directory &lt;code&gt;target/generated-docs&lt;/code&gt;. From here it can easily be published as a
static website, e.g. using GitHub or Gitlab Pages.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python ist das BASIC des 21. Jahrhunderts</title>
      <link>https://denktmit.de/blog/2022-04-06-Python-the-modern-Basic-lingua-franca/</link>
      <pubDate>2022-04-06T00:00:00Z</pubDate>
      <guid>https://denktmit.de/blog/2022-04-06-Python-the-modern-Basic-lingua-franca/</guid>
      <description>&lt;p&gt;Viele Menschen lästern gerne. Gerade im Berufsleben ist das eine willkommene Ablenkung,
und kaum ein Lästerthema ist so harmlos und sagt doch so viel aus wie &lt;em&gt;Programmiersprachen&lt;/em&gt;.
Es ist überhaupt eine der liebsten Pausenbeschäftigungen von Programmierer:innen, über
ihre täglichen Sprachen zu philosophieren. Ganz hervorragend kann man damit die eigene
Überlegenheit demonstrieren und die Anhängerschaft unliebsamer Sprachen degradieren.&lt;/p&gt;
&lt;h2&gt;Allgemeinplätze allenthalben&lt;/h2&gt;
&lt;p&gt;Bei Programmiersprachen geht es manchmal um Trivialitäten wie Semikolons, die Position
von Klammern oder Namenskonventionen. Oder es geht um die Art der &lt;em&gt;Objektorientierung&lt;/em&gt;
(OOP), die eine Sprache umsetzt. Dieser Begriff trendete eigentlich in den 1990er-Jahren,
als die ersten Hochsprachen mit OOP trendeten und das Konzept gerade aus der Programmierung
grafischer Benutzerschnittstellen (GUIs) aus den Kinderschuhen entwuchs. In diese Phase
fällt der 1994er-Designklassiker der &lt;a href=&quot;https://de.wikipedia.org/wiki/Entwurfsmuster_(Buch)&quot;&gt;Gang of Four&lt;/a&gt;.
Wer heute Advokat für starke typisierte Programmiersprachen ist, hat entweder 30 Jahre lang
geschlafen oder will mit seiner akademischen Ausbildung prahlen. Denn was in den Lehrbüchern
nach einer tollen Idee klingt, muss es in der Praxis noch lange nicht sein. Schöne Beispiele
für solche Extreme ist &lt;em&gt;LISP&lt;/em&gt;, einer der Väter funktionaler Programmiersprachen
(gerne auch in Form seines Urenkels &lt;em&gt;Haskell&lt;/em&gt; genommen) oder
die objektorientierte, stark typisierte Programmiersprache &lt;em&gt;Java&lt;/em&gt;. Während funktionale
Programmierung seit Jahrzehnten im Ausbildungsbetrieb und akademischen Umfeld Erfolge feiert,
ist Java berühmt-berüchtigt für seinen Einsatz im &amp;quot;Enterprise&amp;quot;-Umfeld, und gehasst für seine
Ausführlichkeit, seinen &amp;quot;Boilerplate&amp;quot;.&lt;/p&gt;
&lt;p&gt;Doch die Zeit ist nicht stehengeblieben. Multiparadigmensprachen, einst erwachsen aus dem
Scriptumfeld, sind seit Jahrzehnten in der Praxis angekommen und werden auch auf
&amp;quot;Enterprise&amp;quot;-Plattformen wie der Java Virtual Machine (JVM) akzeptiert. In der Genossenschaft
ist hier zum Beispiel &lt;em&gt;Kotlin&lt;/em&gt; sehr populär. Die Übergänge zwischen untypisiertem Script
und &amp;quot;eventually typed&amp;quot; Enterprise-Programming sind hier fließend.&lt;/p&gt;
&lt;p&gt;Doch damit genug zu den Allgemeinplätzen.&lt;/p&gt;
&lt;h2&gt;BASIC, die Lingua Franca der 70er und 80er-Jahre&lt;/h2&gt;
&lt;p&gt;Lange bevor die meisten der Mitglieder der Genossenschaft geboren waren, gab es eine
erfolgreiche Hochsprache, die noch auf die Zeit vor den Mikrocomputern zurückdatiert.
Die Rede ist von &lt;em&gt;BASIC&lt;/em&gt;, der Sprache die durch ihre &lt;em&gt;GOTO&lt;/em&gt;-Befehle und nummerierten Zeilen
berühmt geworden ist. BASIC hatte eine unglaublich niedrige Einstiegshürde, jeder konnte
damit loslegen, es war auch die Sprache der Wahl um Computern Kindern näher zu bringen.
Ein Basic-Interpreter passt in wenige Kilobyte und war auch später Teil von vielen
DOS-Distributionen früher PC-Heimsysteme oder gar kleinerer Computer.&lt;/p&gt;
&lt;p&gt;Und hier kommt mein &amp;quot;bold Statement&amp;quot;, meine gar nicht so kühne Behauptung: &lt;strong&gt;Python ist das
BASIC unserer Tage&lt;/strong&gt;. Tatsächlich ist kaum eine Scriptsprache heute so verbreitet wie
Python. Quer durch die Kompetenzbereiche, wie Umfragen von &lt;a href=&quot;https://insights.stackoverflow.com/survey/2021&quot;&gt;Stackoverflow&lt;/a&gt;
oder dem &lt;a href=&quot;https://arxiv.org/pdf/2203.12466.pdf&quot;&gt;Chaos Computer Club&lt;/a&gt; zeigen, ist Python
die am häufigsten verwendete Programmiersprache. Wie jede erfolgreiche Sprache scheiden sich
die Geister an seinen Designentscheidungen, etwa der Strukturierung durch Einrückung,
dem Ducktyping, dem Umgang mit Namensräumen und Modulen. Das Erfolgsrezept zum Start von
Pythons Aufstieg ist eine Kombination von einfacher Syntax und der großen Standardbibliothek
(&amp;quot;Batteries Included&amp;quot;). Mittlerweile gibt es auch in Python viele langsame und große
Legacy-Codes, die unter ihrer schlechten Struktur ächtzen. Aber wie jede große Programmiersprache
wurde auch Python weiterentwickelt, verfügt mittlerweile über ein algebraisches Typensystem
welches nachträgliche Typisierung (&amp;quot;Evventual Typing&amp;quot;) ermöglicht. Und wie jede große Sprache
hat es eine Achillesferse, die ihren Erfolg bedroht: Bei Python vor allem die Ausführungsgeschwindigkeit,
die fehlende Multithreading-Fähigkeit (der berühmt-berüchtigte &lt;em&gt;Global Interpreter Lock&lt;/em&gt;),
die &lt;a href=&quot;https://xkcd.com/1987/&quot;&gt;Installations-Routine&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Der Fluch von Legacy und Personal&lt;/h2&gt;
&lt;p&gt;Eine Community, der ich angehaftet bin und die stark auf Python setzt(e), ist die des wissenschaftlichen
Rechnens. Python hat es durch jahrzehntelange Arbeit einer globalen Community aus Wissenschaftler:innen
geschafft, Profi-Frameworks wie &lt;em&gt;Matlab&lt;/em&gt; die Pfründe zu stehlen. Moderne Biotechnologie-Codes
entstehen nicht mehr in Matlab, sondern in Python, auf Open Source. Python dient dabei in der
Regel als &lt;em&gt;Glue Language&lt;/em&gt;, um effizientem Code (der etwa in C++ geschrieben ist) eine benutzerfreundliche
und vor allem einfache API vorzusetzen. Seine wir ehrlich, dabei geht es vor allem darum,
Typisierungs-Boilerplate zu verhindern und die Syntax aufzuhübschen.&lt;/p&gt;
&lt;p&gt;Natürlich dreht die Zeit sich aber weiter. So gibt es zum Beispiel die Programmiersprache
&lt;a href=&quot;https://julialang.org/&quot;&gt;Julia&lt;/a&gt;, die in jenem wissenschaftlichen Umfeld als bewusster &amp;quot;Nachfolger&amp;quot;
von Python auftritt und viele &amp;quot;Shortcomings&amp;quot; von Python überwindet. Auf einmal sieht sich eine neue Generation
von Programmierer:innen dem Problem von Legacy-Code begegnet.&lt;/p&gt;
&lt;p&gt;Und ein weiteres Problem ist durch den Platzhirsch zementiert: Dank dem
&lt;a href=&quot;https://de.wikipedia.org/wiki/Matth%C3%A4us-Effekt&quot;&gt;Matthäus-Effekt&lt;/a&gt; gibt es mehr Python-Entwickler als
zu kleineren Programmiersprachen. Wer heute einen neuen Software-Stack entwirft, trifft mit Python keine
grundsätzlich falsche Entscheidung. Und zementiert doch die Skalierungsprobleme von Python in seine
personelle Struktur mit ein. Sprachen wie Go, Kotlin oder Julia versuchen den Wechsel einfach zu gestalten,
sei es mit ähnlicher Syntax oder Adapterbibliotheken. Und doch ist der Wechsel einer Programmiersprache
in einer großen Software ein riskantes Mammutprojekt.&lt;/p&gt;
&lt;p&gt;Letztlich bleibt zu sagen: Egal für welches Software-Ökosystem man sich entscheidet, es gibt immer
die Art von Entwickler:innen, die das System derart verbiegen und missbrauchen, dass daraus Spaghetticode
und ein Performance-Grab wird. Wenig verbreitete Sprachen tendieren dazu, eher von Expert:innen genutzt zu
werden, die wissen was sie tun – und die damit ein Scheinargument für die Überlegenheit dieser Sprache
liefern. Wer guten Python-Code lesen will, der schaue sich zB. mal die &lt;a href=&quot;https://github.com/norvig/pytudes&quot;&gt;Pytudes von Peter Norvig&lt;/a&gt;
an. Eine &lt;a href=&quot;https://github.com/pamoroso/free-python-books&quot;&gt;Übersicht zu Python-Büchern&lt;/a&gt; hilft dabei, die
nötige Lektüre zu finden, eine Domäne mithilfe von Python zu meistern.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finding Love For Nerds: A Guide</title>
      <link>https://denktmit.de/blog/2022-05-13-Finding-Love-for-Nerds/</link>
      <pubDate>2022-05-13T00:00:00Z</pubDate>
      <guid>https://denktmit.de/blog/2022-05-13-Finding-Love-for-Nerds/</guid>
      <description>&lt;p&gt;On this day, it&#39;s been 10 years when I have found my love, the partner of my life.
I&#39;ve been in my 20s, and it was quite a different life compared to the 10 years before. In my teenager time,
my friends had names like &lt;a href=&quot;https://www.perl.org/&quot;&gt;Perl&lt;/a&gt; or &lt;a href=&quot;https://www.gentoo.org/&quot;&gt;Gentoo Linux&lt;/a&gt;.
I probably was the perfect stereotypical basement dweller. It was not so much of a
compliment being called a &lt;em&gt;nerd&lt;/em&gt; in the 2000s.&lt;/p&gt;
&lt;h2&gt;Suffering and the wish for a change&lt;/h2&gt;
&lt;p&gt;If you are a happy nerd, stay a happy nerd. There&#39;s nothing wrong with it, despite people
tend to say so. If you have the luxury to be resident in a democratic country, where the
free development of one&#39;s personality is possible, the only outside pressure you may feel
is social pressure from your relatives, your fellows or peers (in your family, class, school,
college, university, etc). Hopefully the only thing these people can do is speaking (probably
in a harmful or violent manner), but not acting harmfully in a physical way. I don&#39;t know
you as a reader, so all I assume is that you have a similar life to what I had. I experienced
extensive (mental and physical) bullying over most of my middle and high school time.
Bullying has its own logic, and from my perspective, adaption to the aggressor is not a valid long term
path from escaping these situation. It is up to you how you reply to outbreaks of violence.&lt;/p&gt;
&lt;p&gt;The nice thing of nerds is that we have a microcosmos where we spend time with things we love
and understand, such as technology. It is logical, rational, predictable. It may have its quirks and
little challenges of problem solving. It may be complex and challenging. But ultimately it
can be controlled, mastered and governed. That are moments of power we experience, and there
is little need for other valves for blowing off steam of accumulated frustation. We acknowledge
that the situation might be very different for other people. Many teenagers spend much of their
time doing sports and hanging around with their peer group. Acting physically is the natural
expression for these people, they don&#39;t even act much different with you as with their peers.
The important question for you is: Do you want to put yourself on the same level, answering
violence with violence? Doing a killing spree is not an option for an educated person as you.
If people dare you to kill someone, the situation is quite fragile and you better make sure
to find professional help (maybe some specialized charity or the police). If you want to survive
such a bad time, try to avoid being part of a massacre.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://denktmit.de/3l8314.webp&quot; alt=&quot;Never Again Meme&quot; /&gt;
&lt;a href=&quot;https://knowyourmeme.com/photos/1675256-owlturd-comix-vulnerable-parodies-never-again&quot;&gt;Know Your Meme: Owlturd Vulnerable&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For me, school time has not been the time for a change. It was basically surviving hellscape
and there was hardly anybody of the same age which was peaceful or even trustworthy. It was
a situation of hatred. Where to find love? This question get&#39;s quite philosophical in this
context.
For you, it may be neccessary to get out of some toxic environment which helds you down. This
might be your family, relatives or your town, maybe even the culture and country where you live
in.
In my case, the change of situation when moving from high school to university already did
most of it. Being surrounded by people who have some basic level of manners makes quite a
difference. Being allowed to exist is the fundament for living it up. Finding a place where
your basic rights are respected is the big challenge of their life for some people.&lt;/p&gt;
&lt;p&gt;Once you found peace, there might be something growing inside you. This is what I mean with
the &lt;em&gt;which for a change&lt;/em&gt;. For me, the starting point for this have been a traumatizing
experience, when I realized (well aged beyond 20) that I never experienced love. I could not
do different then developing a strong wish for changing that. Evventually, this desire
overwhelmed everything else, dramatically decreasing my performance on daily tasks.
Congratulations, this is lovesickness, or heartache. Next to loosing a loved one, this
has been one of the strongest emotions in my life. It took me a few months to name this feeling.
Unfortunately, I still had not a single clue what to do in order to overcome.&lt;/p&gt;
&lt;h2&gt;Carrying out the change&lt;/h2&gt;
&lt;p&gt;Here&#39;s a thing: As nerds, we do care less about the physical world and more about our imagination.
In the internet -- I mean the real one, with IRC and discussion boards, not Instagram --
there is no such thing as physical appearance. Within a text based interface, the concept of
self-confidence can be easily made up. It is easy to escape situations, just by closing
programs on your computer. Surprise: Things are dramatically different in the real world.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://denktmit.de/bfa.webp&quot; alt=&quot;Internet dog Meme&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://knowyourmeme.com/memes/on-the-internet-nobody-knows-youre-a-dog&quot;&gt;Know Your Meme: On the Internet, Nobody Knows You&#39;re a Dog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For being loved by somebody else, first of all you must be loved by yourself. This includes
your physical presence, defined by your body, clothes, look and even things like smell.
It is easy to change your attitude towards what you think
about your mind, but it is quite hard to change your attitude towards what you think about
your body. Ironically, this is the situation where you should consider re-evaluating everything
you know (or think to know) about the world. For instance, I always hated sports. It was the
root of all evil in my childhood. What people called &amp;quot;sports&amp;quot; is however only a small part of
it. School sports is typically solely team sports and competitions. But there is so much more,
thinking of all kind of individual sports where you don&#39;t need to care about others. In fact,
in a free country, nobody has the interpretatioanl sovereignty of what actually is sports and
what not. What about trying something you never did before? There is so much deeply weird
shit, such as climbing, doing yoga or deep diving. I know a professor
who once made his transition from basement gamer to extreme sports. In fact, working out has
such a dramatic effect in (self-)perception and inner balance that it is non-acceptable for
your mental and physical health to exclude this topic from your life.&lt;/p&gt;
&lt;p&gt;What comes next is a decent understanding of personal hygiene. No need to cut your hairs or
change your dress style. Instead, it is all about doing things intentional and by purpose.
If you want to be a metalhead, do so with style and confidence. Do so by means of a deliberate
and conscious decision, and not because you always have been one. Look for trustable people and find out whether
they feel disturbed or attracted by your appearance. Just ask them, and do not accept a neutral
answer.&lt;/p&gt;
&lt;p&gt;You should do all this with the purpose of increasing your self-awareness and self-confidence.
Consider this: You have probably spent already one quarter of your life. Look up your life
expectancy, time is running up. You feel a pressing
need to change. The world won&#39;t change so much in the future (except you opt in for moving
around, exploring other cultures). It is about you to make a difference. I know, this sounds
like surrendering, but it really is not. Instead, it is installing micro-corrections to your
personality, increasing the compatibility between you and your environment.&lt;/p&gt;
&lt;p&gt;Should you adopt to the world or should the world adopt to you? There is an easy answer to
this philosophical question, and it is: Let you and the world meet somewhere inbetween. This
is just based on evidence: Your previous way of doing things has not brought you to finding
love, so there is no way of keeping things the same. Carrying out the change means changing
yourself.&lt;/p&gt;
&lt;h2&gt;Where to find love&lt;/h2&gt;
&lt;p&gt;It may be part of your world view that the vast majority of people are dumb. This perception
comes from the places and groups where you have been. I cannot state whether your perception
is representative (for the whole world). However, (hopefully) you can change the societies
where you spend time in. Going to university is a perfect example, as it filters out all
people without qualification. It is also quite obvious that you will be in different company
when you are within a yoga class or within a football stadium. For me, the single decision
with the biggest effect with this respect was the decision to join a (laymen) acting academy.
This group of people was diverse and profound in a way completely different to students in
natural sciences. In acting, people are naturally in trying theirself new roles, which is
basically the essence of trying out a new self, experimenting with identity and perception.
The reverse psychological, paradoxical nature of theatre was a door opener for me to understand
and merge into the general society. By doing the complete opposite of what I used to do,
I explored the whole spectrum of human activities. This enabled me for opening to other
people and evventually getting familiar with another single person.&lt;/p&gt;
&lt;p&gt;In my twenties, social life evventually took place in cafes, bars and house parties. Of course, alcohol
simplified a lot of things. In contrast, discos and clubs never got suitable for me to become
acquainted with others. Nevertheless, all these localities are for rather superficial conversations.
If you want to get known to others, join some recreational activity (those which take place
in afternoons, not in the night). It is probably not a coincidence that the more exotic
and weird such activities are, the more interesting the people are.&lt;/p&gt;
&lt;p&gt;The good part of dating is: Nerd dating is a thing. There is little need to lower your
expectations considering a partner. However, what is also true is the little female share in
STEM. If this is a problem for you depends on your (sexual) preference and most of all your
location. For instance, in German higher education landscape, this phenomenon is much more
severe on technical universities compared to classical full universities. I don&#39;t like the
dramatic form of speech of supplies and demand, and reality is more then statistics and
stereotypes. If you are searching for queer and trans people, you might be used to the fact that the
community is very sparse, in particular offside big cities.
Changing your location is the easiest way of getting a new perspective. You will be
surprised how much better things look in other communities.&lt;/p&gt;
&lt;h2&gt;Everything will be okay in the end. If it&#39;s not okay, it&#39;s not the end.&lt;/h2&gt;
&lt;p&gt;Evventually, I met my crush in the acting academy. Turned out, she even
was a theoretical physicist, just as me. It has been an amazing journey of 10 years, we
both graduated and carried out our academic carriers.
We even have a little nerd child. After 10 years, all
these sorrows seem so far away. It is somewhat similar to educational achievements
which look so insignificant in retrospective. Of course, each stage of life brings its own
little problems, and it is difficult to compare different ages. What a time to be here
and being able to say all this about loving nerds.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zur Rolle der Programmierer und Entwickler bei künstlicher Intelligenz</title>
      <link>https://denktmit.de/blog/2022-06-27-KI-Programmierer-Diktatur/</link>
      <pubDate>2022-06-27T00:00:00Z</pubDate>
      <guid>https://denktmit.de/blog/2022-06-27-KI-Programmierer-Diktatur/</guid>
      <description>&lt;p&gt;Kaum ein Thema eignet sich in der modernen »Business-Welt« so sehr, die Gemüter
zu erhitzen, wie &lt;em&gt;künstliche Intelligenz&lt;/em&gt;. Hier glaubt jeder, mitreden zu können.
Wenn Zukunftsforschende die Arbeitswelt von morgen erklären, machen sie das gerne
auf eine polarisierende Art und Weise. Offensive Dramatik sorgt auch in den
sozialen Medien für Aufmerksamkeit. So zitiert
&lt;a href=&quot;https://www.linkedin.com/posts/aiinsider_k%C3%BCnstliche-intelligenz-beendet-die-diktatur-activity-6946008887342845952-1Yah&quot;&gt;Peter Seeberg auf LinkedIn&lt;/a&gt;
einen Artikel von einem IT-Journal:
&lt;a href=&quot;https://www.it-journal.de/121179-kuenstliche-intelligenz-beendet-die-diktatur-der-programmierer.html&quot;&gt;Künstliche Intelligenz beendet die Diktatur der Programmierer&lt;/a&gt;.
Hier ein paar Zitate dieses Postings:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GPT-3 ist der Anfang vom Ende der heimlichen Diktatoren unserer Zeit: Programmierer, Tekkis, Nerds, Entwickler… „Das geht so nicht“ oder „Das dauert aber sehr lange“ sind die Standardsätze, mit denen Programmier-Erhabene jeden Tag Tausende innovativer Projekte verhindern, weltweit dürften die Schäden durch willkürliche Projektverhinderung in den sehr hohen Milliarden-Bereich gehen&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Die Abhängigkeit der Innovatoren in Unternehmen von den Gralshütern der Codes ist ähnlich der eines Schwerkranken von einer künstlichen Beatmungsmaschine. Nur entscheidet hier ein/e Coding-ExperteIn darüber „was geht“. Will das Programmiergenie nicht, geht gar nichts. Wochenlang, monatelang. Da an den Schaltstellen der Chips sitzende Menschen perfekt darin sind, immer nur einen kleinen Teil ihrer Arbeit nachvollziehbar zu dokumentieren, sind sie meist unkündbar, selbst bei subtiler Arbeitsverweigerung. Denn mit ihnen geht oft wenig, ohne sie gar nichts&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Statt dass &lt;a href=&quot;https://denktmit.de/&quot;&gt;wir&lt;/a&gt; uns von dieser feindselige Art beleidigt fühlen, sollen die Argumente
im folgenden einmal sachlich auseinandergenommen werden.&lt;/p&gt;
&lt;h2&gt;Über Rollen- und Ausbildungswege in Firmen&lt;/h2&gt;
&lt;p&gt;Die meisten Firmen beschäften Menschen, die eine Vielzahl von unterschiedlichen
Qualifikationen aufweisen. Sicherlich sind für Buchhaltung und Rechnungswesen
andere Fähigkeiten nötig als für Personalwesen und Mitarbeiteraquise. Oft gehen
Berufsbilder, Ausbildungswege und Charaktereigenschaften auch einher und führen
zu prägenden Klischees, wie das einer verschlafenen Inventur, einer peniblen
Sekretärin oder eines überheblichen Administrators. In solchen negativen
Klischees ist viel Unglück verpackt, welches beteiligte Personen erfahren haben.&lt;/p&gt;
&lt;p&gt;Der &lt;a href=&quot;https://de.wikipedia.org/wiki/System_Administrator_Appreciation_Day&quot;&gt;System Administrator Appreciation Day&lt;/a&gt;
ist ein Versuch, Rollenbilder speziell im Zusammenhang mit Systemadministrator:innen
zu überdenken und hinter die Kulissen zu schauen,
warum sich Personen so verhalten wie sie es tun. Gerade Systemadministrator:innen
stecken häufig in festen Strukturen fest, wo sie gegenüber verschiedenen Stellen
widersprüchliche Ziele erreichen sollen. Das führt zu Frust, nicht zu letzt bei
den Systemadmistrator:innen selber.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://denktmit.de/FVrpjj4X0AATpqR.jpeg&quot; alt=&quot;Karikatur mit Text: Eigentlich sind wir von der IT wie Gott.
Ich ziehe einen Stecker und ihr habt Kaffeepause statt Montag. Einfach So.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;It-Sören, Quelle:&lt;a href=&quot;https://twitter.com/daskritzelt/status/1538799027533266944&quot;&gt;@daskritzelt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/denktmit/status/1538816812153987072&quot;&gt;Admins sind Hausmeister&lt;/a&gt;,
schrieb ich neulich als Reaktion auf
&lt;a href=&quot;https://twitter.com/daskritzelt/status/1538799027533266944&quot;&gt;obige Karikatur&lt;/a&gt;.
Nur gehen ihre Befugnisse in modernen Firmen noch viel weiter. In der Regel ist die
Informationsabteilung (IT)
deswegen -- anders als Hausmeister -- direkt der Geschäftsführung untergeordnet,
der Vertrauensvorschuss ist sehr groß. Selbstredend, dass eine unzureichend ausgebildete
Geschäftsführung vor ihrer übermächtigen IT Angst hat. Geholfen ist damit niemandem.&lt;/p&gt;
&lt;h2&gt;IT auf Augenhöhe&lt;/h2&gt;
&lt;p&gt;Einer &lt;a href=&quot;https://denktmit.de/&quot;&gt;unserer Leitsätze&lt;/a&gt; ist »IT auf Augenhöhe«. Als »Programmierer, Tekkis, Nerds
[und] Entwickler« wollen wir die Menschen, mit denen wir zusammenarbeiten, von
denen wir beauftragt wurden und für die wir arbeiten zu selbstbewussten Individuen
machen, die ihre informationstechnischen Probleme wenn nicht lösen, dann zumindest
verstehen können. Natürlich fallen dabei auch Sätze wie »Das geht so nicht« oder
»Das dauert aber sehr lange«. Sie &lt;em&gt;müssen&lt;/em&gt; fallen, wenn der ehrliche Dialog über
IT-Probleme und -Lösungen gesucht wird und ein Wissenstransfer stattfinden soll.
Natürlich eignen sich solche Aussagen auch zur Verschleierung und Aufgabenverweigerung.
Für IT-Kunden ist es manchmal schwer das zu erkennen. Dies ist ein typisches Problem
der Beraterszene, bei welcher Kunden in einem ungesunden Abhängigkeitsverhältnis
leben. Gute Berater:innen sorgen dafür, dieses Abhängigkeitsverhältnis aufzulösen,
während schlechte es möglichst lange versuchen aufrecht zu halten.&lt;/p&gt;
&lt;p&gt;Softwareentwicklung besteht zum überwiegenden Teil aus Kommunikation und nur zu einem
geringfügigeren Teil aus technischer Umsetzung. Dieser Umstand ist vielen
Entwickler:innen nicht bewusst. Zu Kommunikation gehört auch, anderen Menschen die
eigenen Beweggründe darzulegen und ihnen zu ermöglichen, die gebauten Systeme zu
verstehen. Diese Tätigkeiten werden meist unter &lt;em&gt;Dokumentation&lt;/em&gt; zusammengefasst und
sind für nachhaltige Softwareentwicklung unabdingbar. Es handelt sich um ein
vergleichsweise einfaches Qualitätskriterium, mit dem man gute von schlechten
Softwareentwickler:innen unterscheiden kann.&lt;/p&gt;
&lt;h2&gt;Können wir Software-Entwicklung loswerden?&lt;/h2&gt;
&lt;p&gt;Ein Versprechen des &lt;em&gt;No-Code movements&lt;/em&gt; ist eine Demokratisierung des IT-Sektors.
Dazu gibt es unglaublich viele Informationen im Netz, etwa dieses
Interview mit &lt;a href=&quot;https://www.techrepublic.com/article/the-no-code-movement-is-in-the-early-stages-but-will-bring-exciting-new-possibilities-expert-says/&quot;&gt;Vlad Magdalin bei TechRepublic&lt;/a&gt;.
No-Code hat erst einmal nichts mit künstlicher Intelligenz zu tun: Es gibt viele
Plattformen, die unerfahrenen Anwender:innen versprechen, ohne Programmierung komplexe
Aufgaben zu erledigen. Tatsächlich findet dort aber meist nur eine Verschiebung der
Komplexität von einer &lt;em&gt;Programmierung&lt;/em&gt; hin zu einer &lt;em&gt;Konfiguration&lt;/em&gt; eines generischen
Systems statt. Diese Konfiguration kann dann aber selbst so komplex werden, dass
(im wissenschaftstheoretischen Sinne) wieder von einer &lt;em&gt;Programmierung&lt;/em&gt; die Rede
sein kann. Meines Erachtens handelt es sich daher bei diesen Versprechen um hohle Phrasen,
die wenig Substanz haben. Für mich als Autor dieser Zeilen ist das im doppelten Sinne
tragisch, da ich eine Befähigung der Nutzer im Sinne einer
[&lt;a href=&quot;https://gutezitate.com/zitat/208565&quot;&gt;Kant&#39;schen Aufklärung&lt;/a&gt; sehr hilfreich finde.
Nur sollte sie auch wirklich zu einem &lt;em&gt;Ausgang aus der Unmündigkeit&lt;/em&gt; führen und nicht
bloß in eine neue Abhängigkeit führen, wie es bei No-Code-Plattformen häufig der
Fall ist.&lt;/p&gt;
&lt;p&gt;Eine komplett andere Frage ist: Was kann künstliche Intelligenz dafür tun, das
Programmieren zu vereinfachen? Diese Frage will ich recht kurz beantworten: Auf
absehbare Zeit ist KI ein Spezialwerkzeug, für dessen korrekte Bedienung es eine solide
Grundausbildung in statistischen Methoden benötigt. Eindrucksvolle
Benutzerschnittstellen wie die Textschreibefähigkeit von &lt;a href=&quot;https://en.wikipedia.org/wiki/GPT-3&quot;&gt;GPT-3&lt;/a&gt;
oder die Bildsynthese von &lt;a href=&quot;https://en.wikipedia.org/wiki/DALL-E&quot;&gt;DALL-E&lt;/a&gt; scheinen meine
These zu verneinen, sind aber tatsächlich eher Spielzeuge oder nur oberflächlich
zu gebrauchen. Hier im Blog schrieb ich letztes Jahr &lt;a href=&quot;https://denktmit.de/2021/07/02/repl-cli-ide-wars.html&quot;&gt;über Github Copilot&lt;/a&gt;, wo die resultierenden Texte als Programmbauteile mindestens einen kritischen
Blick vor der Weiterverarbeitung bekommen sollten. Vor wenigen Tagen war dieses Tool
wieder in den Nachrichten, so titulierte &lt;a href=&quot;https://www.heise.de/news/KI-Programmiergehilfe-GitHub-Copilot-ist-fertig-7146814.html&quot;&gt;Heise: Github Copilot lässt sich nun abonnieren&lt;/a&gt;.
Das ist State-of-the-Art KI: Der Menschheitstraum, dass Computer sich selber programmieren,
wurde noch nicht erreicht.&lt;/p&gt;
&lt;h2&gt;Fazit&lt;/h2&gt;
&lt;p&gt;Wenn man die letzten Jahrzehnte Softwaretechnik betrachtet, dann hat sich das Berufsfeld
der Softwareentwickler:in gewandelt, vor allem ist es in die Breite gewachsen. Jobs, die
früher noch nichts mit IT zu tun hatten, erfordern heute zumindest ein Grundverständnis.
Es ist davon auszugehen, dass diese Entwicklung vorangehen wird. Mit diesem Trend geht
auch ein gewisser Ausschluss von Lernunwilligen und -unfähigen einher, welches zu
gesellschaftlichen Verwerfungen wie dem oben zitierten Artikel führt. Mehr als
früher ist aber das Zwischenmenschliche nötig, denn Software und Unternehmertum benötigen
Teamgeist. Moderne Unternehmen haben schon lange erkannt, dass BWLer und Informatiker sich
nicht ausschließen, sondern zukunftsfähige Geschäftsmodelle in der Symbiose dieser
Berufsgruppen liegen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ein Jahr DenktMit eG – die Generalversammlung tagt</title>
      <link>https://denktmit.de/blog/2022-06-30-Generalversammlung/</link>
      <pubDate>2022-06-30T00:00:00Z</pubDate>
      <guid>https://denktmit.de/blog/2022-06-30-Generalversammlung/</guid>
      <description>&lt;p&gt;Die Genossenschaft feiert Jubiläum: Am 07. Mai 2021 wurde sie gegründet, das Rumpfgeschäftsjahr ist
abgeschlossen, drei neue Genoss:innen und viele wertvolle Kunden wurden gewonnen:
In dieser positiven Tonalität begann gestern abend
die Generalversammlung der Genoss:innen der &lt;a href=&quot;https://denktmit.de/&quot;&gt;DenktMit eG&lt;/a&gt;. In einem hybriden Format wurde sowohl der
schöne neue Seminarraum der Genossenschaft in den historischen Gemäuern der Oberurseler Herrenmühle
eingeweiht, als auch die über Deutschland weit verteilten Genoss:innen abgeholt.&lt;/p&gt;
&lt;h2&gt;Basisdemokratie trifft am virtuellen »Platz der Republik« auf Unternehmergeist&lt;/h2&gt;
&lt;p&gt;Bis tief in die Abendstunden wurden nicht nur vergangene Zahlen präsentiert, sondern auch zukünftige
diskutiert: Wie soll die Genossenschaft zukünftig arbeiten und funktionieren, wie werden die
Einnahmen verwendet, welche Ausgaben getätigt? Die größten Posten sind dabei natürlich Personalkosten
in Form von Angestellten der eG. Auch über die angemessene Entlohnung des ehrenamtlich arbeitenden Vorstands
wurde diskutiert. Um diese sensiblen Themen zukünftig effizienter bearbeiten zu können und für ihr
erwartetes Wachstum über 20 Mitglieder hinaus gewappnet zu sein, hat sich die Genossenschaft dazu
entschlossen, einen Aufsichtsrat zu gründen. Von fünf Kandidaturen wurden schließlich drei gewählt,
die nunmehr zur Aufgabe haben, die Interessen der Genoss:innen (Gesellschafter) gegenüber dem Vorstand
zu vertreten und gleichzeitig über die Tätigkeiten des Vorstands zu blicken. Zu den Amtsträgern
in der Genossenschaft gehört – im Vertrauen durch die Genoss:innen bestätigt – der Vorstand,
in seiner Person der Vorsitzende Marius Schmidt, Johannes Ernst und Christian Keller, sowie nun der
Aufsichtsrat, in seiner Person der Vorsitzende Denis Malolepszy, Daniel Roth und Dr. Sven Köppel.
Alle Amtsträger bedanken sich für das durch die basisdemokratische Wahl entgegengebrachte Vertrauen
und bildeten heute im firmeninternen &lt;em&gt;Slack&lt;/em&gt;-Chat bereits einen &lt;em&gt;Platz der Republik&lt;/em&gt;, wo beide
Organe für alle Genoss:innen transparent gemeinsame Themen besprechen können.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://denktmit.de/2022-06-30-Meeting-Owl-Generalversammlung.webp&quot; alt=&quot;&quot; /&gt;
Der neue Besprechungsraum in der Herrenmühle ist ideal für ein 360°-Panorama mit der &lt;a href=&quot;https://owllabs.de/products/meeting-owl-pro/&quot;&gt;Meeting Owl®&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Mitbestimmung statt Frust im Hamsterrad&lt;/h2&gt;
&lt;p&gt;Die Generalversammlung endete tief in der Nacht – aber nicht ohne noch einmal einen Blick auf die
aktuellen Medien zu werfen:
&lt;a href=&quot;https://www.golem.de/news/code-genossenschaften-mitbestimmung-und-einheitsgehalt-statt-frust-im-hamsterrad-2206-166397.html&quot;&gt;Code-Genossenschaften: Mitbestimmung und Einheitsgehalt statt Frust im Hamsterrad&lt;/a&gt;
titulierte gerade gestern die IT-Nachrichtenplattform &lt;em&gt;Golem&lt;/em&gt;. Im Artikel geht es um die Berliner
Softwaregenossenschaft &lt;a href=&quot;https://ctrl.alt.coop/&quot;&gt;ctrl.alt.coop&lt;/a&gt;, mit der wir viele Werte
teilen. Wo Gemeinsamkeiten sind, gibt es aber auch Unterschiede: So sehen wir keinen Widerspruch
zwischen kooperativem Wirtschaften und freiberuflicher Unabhängigkeit. Das Agieren der Genoss:innen
als Selbstständige und nicht als Angestellte ist in der &lt;a href=&quot;https://denktmit.de/pitch.html&quot;&gt;DNA der DenktMit eG&lt;/a&gt;
eingewoben. Statt »Einheitsgehalt« bietet jeder Genosse der DenktMit seine Leistung zum selbst kalkulierten Preis an und führt einen Obulus von ca. 10€ pro abgerechneter Stunde zum Unterhalt der genossenschaftlichen
Leistungen und Infrastruktur ab. Den Weg vom abhängigen Angestelltenverhältnis in die Selbstständigkeit
gehen viele Neugenoss:innen vor oder während ihrer Aufnahme in die Genossenschaft und werden von der
Gemeinschaft dabei nach Kräften unterstützt. Bislang hat ihn noch niemand bereut.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Was ist Bootstrapping und warum ist es so wichtig?</title>
      <link>https://denktmit.de/blog/2022-08-20-Bootstrapping-Programming-Languages/</link>
      <pubDate>2022-08-20T00:00:00Z</pubDate>
      <guid>https://denktmit.de/blog/2022-08-20-Bootstrapping-Programming-Languages/</guid>
      <description>&lt;p&gt;Das laufende Jahrzehnt fängt großartig an: Wir haben Smartphones und das Internet,
großartige komplizierte Dinge wie Blockchains oder kybernetisch anmutende Anwendungen,
die alle miteinander kommunizieren, geschrieben in Programmiersprachen, die Menschen
bei der Befehligung des Computers unterstützen. Doch wie kommt all die Großartigkeit
in die Welt? Sie steht doch scheinbar »auf den Schultern der Giganten«, wie man
sprichwörtlich sagt: Neuere Roboter wurden durch ältere gebaut, neuere Computer durch
ältere. Es reicht alles zurück in die Zeit der einfacheren Werkzeuge und weniger
komplexen Systeme.&lt;/p&gt;
&lt;h2&gt;Bootstrapping erzeugt wünschenswerte Komplexität&lt;/h2&gt;
&lt;p&gt;Tatsächlich kommt Komplexität nicht ohne Arbeit in die Welt. In der Softwaretechnik
sprechen wir von einem Henne-Ei-Problem: Wenn eine mächtige Plattform oder Technik
in der Lage sein soll, sich selbst zu replizieren bzw. von Grund auf zu erschaffen.
Ein Beispiel sei eine neue &amp;quot;höhere&amp;quot; Programmiersprachen, sei es einmal das in der
Genossenschaft so beliebte &lt;em&gt;Kotlin&lt;/em&gt;, für die es einen sogenannten Compiler benötigt,
der aus dem typischerweise in Textform vorliegenden Programmcode maschinenlesbare
Anweisungen erzeugt. Es gibt viele Gründe, warum es interessant ist, diesen Compiler
in der neuen Sprache selbst zu schreiben. Einer davon ist, dass es für die an der
neuen Programmiersprache abeitende Menschen interessanter ist, die Funktionen
ihres neuen Zöglings auch zu nutzen, statt eine ältere Programmiersprache zu verwenden.
Wenn eine Sprache diesen evolutionären Schritt geschafft hat, nennt man sie
&lt;em&gt;selfhosting&lt;/em&gt;, sie ist also ihr eigener Gast.&lt;/p&gt;
&lt;p&gt;Die technische Umsetzung dieses Vorhabens ist gar nicht einmal so einfach: In der Regel
werden ältere Compiler einer Sprache verwendet, um neuere zu entwickeln. So ist es
in der Java-Welt üblich, dass sich ohne &lt;em&gt;Java Development Kit&lt;/em&gt; kein neues
&lt;em&gt;Java Development Kit&lt;/em&gt; entwickeln lässt. Diese Abhängigkeiten lassen sich zurückverfolgen
bis zu den ältesten Versionen von Java, für die es Compiler in der Sprache &lt;em&gt;C&lt;/em&gt; gibt.
Eine saubere Methode, solche Ketten zu durchbrechen, zeigen etwa die Sprachen &lt;em&gt;Go&lt;/em&gt; und
&lt;em&gt;Zig&lt;/em&gt;, für die es kleine Bootloader oder &amp;quot;Vorstufen-Compiler&amp;quot; gibt, aus denen sich
ein Compiler für eine einfache Version der Programmiersprache übersetzen lässt, aus dem
sich schließlich ein Compiler entwickeln lässt, der alle Funktionen der Sprache
versteht. Die Art und Weise, wie diese kaskadierten Compilerstufen funktionieren, erinnern
an den Prozess des &lt;em&gt;Bootens&lt;/em&gt; eines Computers, den viele ältere noch von ihrem Personalcomputer
kennen und der heute im Prinzip nur wenig verändert weiterhin anhält, aber in der
mobilen Gegenwart oft nicht mehr so stark in Erscheinung tritt. Dabei starten Prozessoren
sogar meist mit einem einfacheren 16bit-Vorprogrammiersystem (früher von dem BIOS
bespielt) um sich dann in 32bit und danach 64bit &amp;quot;upzugraden&amp;quot;. Auch der Linux-Ladeprozess
mit einem &lt;em&gt;Bootloader&lt;/em&gt;, der defakto selber (im Moment des Bootens) ein Betriebssystem darstellt,
ist noch heutigen Linux-Benutzenden oft ein Begriff. Auch wenn solche Fragestellungen als
&amp;quot;erledigt und abgehakt&amp;quot; und damit eher theoretischer Natur erscheinen, sind sie dennoch
hoch relevant für die Zukunft und erfordern eine regelmäßige Überarbeitung.&lt;/p&gt;
&lt;h2&gt;Bootstrapping hilft zur Resilienz und Vertrauen in der Softwaretechnik&lt;/h2&gt;
&lt;p&gt;Tatsächlich gibt es aber auch viele andere Gründe, warum Systeme &lt;em&gt;bootstrappable&lt;/em&gt;
sein sollen, sich also an den eigenen Stiefelriemen aus dem imaginären Sumpf der
Trivialität ziehen können sollen. Das Webprojekt &lt;a href=&quot;https://bootstrappable.org/&quot;&gt;bootstrappable.org&lt;/a&gt;
etwa listet eine ganze Liste von Vorteilen auf und beinhaltet viele interessante
weiterführende Links. Ein wesentlicher Vorteil ist das &lt;em&gt;Vertrauen&lt;/em&gt;, welches
bootstrap-fähige Systeme genießen können: Sie können mit keinen oder zumindest erheblich
geringeren Abhängigkeiten erzeugt werden. Besonders interessant wird das in
Zusammenhang mit &lt;a href=&quot;https://reproducible-builds.org/&quot;&gt;reproduzierbaren Builds&lt;/a&gt;, welche
eine hundertprozentige Vorhersagbarkeit (Determinismus) von Kompilaten zum Ziel haben.
Diese Zugänge können als Versuch verstanden werden, die Komplexität moderner
Softwaresysteme wieder zu bändigen und &lt;em&gt;nachhaltiger zu Programmieren&lt;/em&gt;. Über die
enorme Bedeutung der Beherrschung von Komplexität füllt &lt;a href=&quot;https://www.schatten.info/&quot;&gt;Alexander Schatten&lt;/a&gt; in der
&lt;a href=&quot;https://shop.heise.de/ix-13-2022/PDF&quot;&gt;iX Spezial 2022 – Green IT&lt;/a&gt; fast eine gesamte
Ausgabe des Magazins im Alleingang.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to get started with technical writing</title>
      <link>https://denktmit.de/blog/2022-08-30-Tipps-for-Technical-Writing/</link>
      <pubDate>2022-08-30T00:00:00Z</pubDate>
      <guid>https://denktmit.de/blog/2022-08-30-Tipps-for-Technical-Writing/</guid>
      <description>&lt;p&gt;This blog post is about an important topic in engineering jobs. It is about
doing your paperwork, the documentation, the (technical) writing. This is
something science and engineering have in common: Without proper documentation,
your work can easily become unusable and/or meaningless. In the era of
self-explaining and explorative user interfaces, proper code documentation,
project reporting, written design decisions and architectural explanations
mark the difference of high quality work and unmaintainable &amp;quot;single-use projects&amp;quot;
with limited lifespan.&lt;/p&gt;
&lt;p&gt;The web is full of advices how to write. &lt;a href=&quot;https://herbertlui.net/dont-think-to-write-write-to-think/&quot;&gt;Don&#39;t think to write, write to think&lt;/a&gt; is an article I just read
today. Ironically, in the era of Covid-19, video conferencing and remote work,
the written word becomes once more very important in particular in the context
of protocols, digital meeting artifacts and chats and short messages. And yet
many developers have a natural resistance against bringing their thoughts to
the sheet (or the screen). Since I am somewhat the &lt;em&gt;house poet&lt;/em&gt; of
&lt;a href=&quot;https://denktmit.de/&quot;&gt;DenktMit eG&lt;/a&gt;, I feel somewhat obligated to add my thoughts to the pile of
tips.&lt;/p&gt;
&lt;h2&gt;Getting started: Overcoming barriers&lt;/h2&gt;
&lt;p&gt;Many people (including me!) have problems entering a big illumnated stage and start
giving a keynote. The more you think about it and prepare for it, the bigger the
problem can get. What is the textual correspondence to &lt;em&gt;stage fright&lt;/em&gt;? Probably
sitting in front of a big white paper, either physical or in form of MS Word or
your favourite text editor for code (documentation).&lt;/p&gt;
&lt;p&gt;There are different strategies
how to cope with that. Do you remember what you do when starting a new coding project
in a new programming language from the scratch? You never start with an empty document.
There is always some tutorial, some demo code which you can build up on. It is the
code equivalent of a textual outline, a table of contents. Start with your favourite
note-taking app and write down some bullet points of what you want to write about.
Do some nesting and voila, you are done with a table of contents. Did you notice that
I suggested you do this work in your regular note-taking app (suggesting that you have
such a thing, like Evernote, Notion.io, Apple Notes, Google Keep, Microsoft OneNote, etc.)?
If you don&#39;t have such an app, why not take some other &lt;em&gt;familiar environment&lt;/em&gt; such as your
e-mail client or some chat window with a friend? This is somewhat similar to training
your big keynote show act in a familiar environment in front of your best friend.&lt;/p&gt;
&lt;h2&gt;Improve iteratively&lt;/h2&gt;
&lt;p&gt;Something else you probably naturally do when changing situation is making use of your
everyday voice. No need for pretending a vocabulary which is not yours. If it helps,
talk and write colloquially! Even when you want to set high standards on your text,
it is better to get started with a bad text then with no text. The same is true for
language: If you want or need to write in English but are much more fluent, say, in German,
then write down a German text. Machine learning translation (such as with Linguee/DeepL)
got very good in the last years even in highly technical texts and can be a great starting
point when doing the language transition.&lt;/p&gt;
&lt;p&gt;When it comes to iterating texts, forget about formatting technicalities for the moment.
Exclude correct hyperlinking, footnotes, citations, images, headings, everything which
makes text complicated. If it helps, also skip all your fancy versioning tools (such as git)
or the correct markup (such as Latex, HTML or markdown).
Just work with plain text, which is most interoperable between your tooling.
This makes it easy to copy and paste to Microsoft Word in order to quickly run spell
and grammar checking. You want to come into a mood where you really &lt;em&gt;work&lt;/em&gt; with text the
same way as you do cooking: Words and sentences are your ingredients and subject to be
cut here and there, put into form, being rearranged, temporarily deleted and retrieved
again.&lt;/p&gt;
&lt;h2&gt;Know your audience&lt;/h2&gt;
&lt;p&gt;Something you should consider while improving your texts is asking yourself who is the
target audience and what questions you want to answer. Sure, these are questions which
are relevant to answer &lt;em&gt;before&lt;/em&gt; writing a text, but why not improve while iterating over
your texts. It is quite likely that you recognize you can make two texts from one starting
point.&lt;/p&gt;
&lt;p&gt;If you wonder about the audience, here are a few good starting points: Think of yourself
but before the project started. What questions would you like have to be answered? Or ask
team mates, friends and/or coworkers for what questions they would raise about your project.&lt;/p&gt;
&lt;h2&gt;Writing is not that different to coding&lt;/h2&gt;
&lt;p&gt;In the end, a good technical writeup shares quite some details with good code: It is concise,
answers a particular question by using a particular vocabulary. It is typically highly
structured. References of various kinds, a glossary, good searchability are
vital to code documentation or a good scientific paper. Since you are probably used to
formal methods such as a computer programming language or the mathematical language of
your specific scientific problem, why not treat your documentation similarly formal? Sooner
or later you will find a way of how you would like to read literature and be able to replicate
that style on your own.&lt;/p&gt;
&lt;h2&gt;Epilog: Making money with writing&lt;/h2&gt;
&lt;p&gt;I have to admit that I spend a good portion of my day with writing texts. Let it be proposals
or reports, there is always a majority of text which replicates previous work (done by me or
others) and only a minority of novel ideas. Most of the time when I start a new text, I do it
by copying some old one, deleting all text and building up on the template, thus seldomly starting
with an empty page or empty line. But from time to time I also enjoy writing a LaTeX document
from the scratch or exploring all the features of a new code documentation system (something
like Javadoc). I am kind of a &lt;em&gt;agnostic purist&lt;/em&gt;, not into emacs or vim but just using any plain
text editor available on the system (such as gedit, kwrite, notepad++) which has low background
noise (no distraction). But most of all, I enjoy writing texts in a single run, from a single
cast. This gives them a rather spontaneous note, and it is in fact the same way as I handle my
stage fright: I just start talking, without much preparation, and evventually come to an end.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zum Programmierpraktikum in der Entwickler-Agentur: Ein Bericht aus Betreuerperspektive</title>
      <link>https://denktmit.de/blog/2022-09-13-Bericht-Programmier-Praktikum-Internship/</link>
      <pubDate>2022-09-13T00:00:00Z</pubDate>
      <guid>https://denktmit.de/blog/2022-09-13-Bericht-Programmier-Praktikum-Internship/</guid>
      <description>&lt;p&gt;Ein Unternehmen aufzubauen bedeutet immer auch, Nachwuchskräfte zu gewinnen. In der
Genossenschaft haben wir uns &lt;a href=&quot;https://denktmit.de/2022/06/30/Generalversammlung&quot;&gt;ein Jahr nach der Gründung&lt;/a&gt;
dazu entschlossen, für ein paar Wochen eine Praktikantin aufzunehmen. Es handelt sich
um eine Naturwissenschaftlerin mit Master-Abschluss, die uns in der Firmenzentrale
in Oberursel vor den Toren Frankfurts vor einer Weile besucht hat und großes Interesse
daran hat, professionell zu Programmieren und das Tätigkeitsfeld von freiberuflichen
Software-Entwickler:innen, oft einfach »Freelancer« genannt, kennenzulernen.&lt;/p&gt;
&lt;p&gt;Um unseren Aufwand für das bezahlte Praktikum auf die vielen Schultern in der Genossenschaft
zu verteilen, haben wir uns dazu entschlossen, der Praktikantin jede Woche eine andere
Betreuungsperson zuzuweisen. Durch dieses rotierende Prinzip bekam sie viele verschiedene
Perspektiven, wohingegen der zeitliche Aufwand für jeden von uns gedeckelt blieb.&lt;/p&gt;
&lt;h2&gt;Die Begleitung im Remote-Praktikumsbetreuung&lt;/h2&gt;
&lt;p&gt;In der vergangene Woche im September 2022 hab ich mich bereiterklärt, die Praktikantin
zu betreuen bzw. bei ihrem Lernprojekt zu begleiten. Wir hatten einen intensiven Austausch
zu einem Projekt, mit dem Ziel es in einer 5-Tages-Arbeitswoche zu absolvieren. Tatsächlich
kommt also die Formulierung &amp;quot;Betreuer begleitet Praktikanten&amp;quot; eher hin als die paktikumstypischere
Formulierung &amp;quot;Praktikant begleitet Betreuer&amp;quot;. Von meinem Arbeitsalltag mit seinen vielen
Meetings bekam die Praktikantin nämlich eigentlich nichts mit.&lt;/p&gt;
&lt;p&gt;Erschwerend kam hinzu, dass das Praktikum &lt;em&gt;remote&lt;/em&gt; betreut wurde, ich also in Oberursel
nicht vor Ort war. Ein Grund dafür war das wenige Wochen alte Baby, um welches ich mich (mangels
städtischer Kinderbetreuung und mangels Elternzeit für Menschen in ungewöhnlichen Lebensphasen)
werktags kümmern musste, während meine Partnerin 10-Stunden-Schichten im Krankenhaus absolvierte.
Während das physische Begleiten und &amp;quot;Über die Schulter schauen&amp;quot; in einem Remote-Praktikum
schwieriger abzubilden ist, hat diese Betreuungsform immerhin den Vorteil, dass die Situation es
ebensowenig zulässt, in unprofessionelle Muster zu fallen, Stichwort &amp;quot;Praktikant kocht Kaffee&amp;quot;
oder &amp;quot;Praktikant macht Babysitting&amp;quot;.&lt;/p&gt;
&lt;p&gt;Wir haben die Betreuung letzte Woche so ausgelegt, dass wir in Anbetracht meines eng getakteten
Terminkalenders täglich mittags eine Stunde und dann abends ab ca. 19 Uhr mehrere Stunden
eine Videotelefonie gemacht haben und dabei intensiv und ohne nennenswerter Ablenkung gearbeitet
haben. So kamen wir in der Woche auf ungefähr zwölf Betreuungsstunden, die in meinem Fall zur
regulären Arbeitswoche dazukamen und im Falle der Praktikantin mehr als die Hälfte ihrer vertraglichen
Wochenarbeitszeit abdeckten.&lt;/p&gt;
&lt;p&gt;Tatsächlich hätte ich so ein Pensum mit einer Vor-Ort-Betreuung nur schwer realisieren können.
Erst der schnelle Kontextwechsel, der durch Remote-Arbeit möglich ist, ermöglichte mir zwischen
Standorten und Firmen schneller zu wechseln, als dem Neugeborenen seine Windel. Als großer Freund
von asynchroner Kommunikation (etwa im firmenweiten Slack-Chat) sind synchrone Einheiten
(im Videotelefonat) stets ein Zugeständnis an ein Stück besondere Zeit, die im Tempo des Praktikanten
verbracht wird. Wichtig war mir, dass diese Telefonate nicht zwischen Tür und Angel, auf dem Mobiltelefon
mit schlechtem Empfang stattfanden, sondern stets so, dass beide Beteiligten an einem Schreibtisch
saßen, an einem eingerichteten Computer mit Entwicklungsumgebung, Terminal und allem anderen, was
es zum &lt;em&gt;Coden&lt;/em&gt; braucht.&lt;/p&gt;
&lt;h2&gt;Das Konzept des Programmierens Lernen&lt;/h2&gt;
&lt;p&gt;Die Praktikantin hatte die letzten Wochen die Grundlagen der Programmiersprache &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt;
unter anderem an &lt;a href=&quot;http://codekata.com/&quot;&gt;Katas&lt;/a&gt; geübt. Am Montag hatten wir eine Übergabe vom
Betreuer der Vorwoche gemacht, dabei fand ich ein Github-Repository mit einem &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt;-Demoprojekt vor.
Das Ziel war es, eine Anwendung zu entwickeln, die eine selektive Übersetzung eines
englisch- zu einem deutschsprachigen Text ermölichte, je nach klassifiziertem Lerngrad des Benutzers
(Sprachlern-Level A1, A2, B, C, etc.). Ich schlug vor, dieses Projekt und die Woche wie folgt zu
strukturieren:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Zunächst Aufbau eines &lt;a href=&quot;https://de.wikipedia.org/wiki/Textkorpus&quot;&gt;Textkorpus&lt;/a&gt; in Form einer
Wort-Übersetzungstabelle. Das ist eine klassische semi-automatisierbare &lt;em&gt;Data Science&lt;/em&gt;-Aufgabe,
die domänenspezifisches Wissen erfordert.&lt;/li&gt;
&lt;li&gt;Erprobung von Übersetzungsmechanismen im Terminal mit meinem favorisierten REPL-Ansatz, d.h.
Entwicklung eines kurzen, freistehenden Programmes von dem man jede Zeile versteht und welches
den Fokus auf der &lt;em&gt;Buisnesslogik&lt;/em&gt; und nicht der umfangreichen Verwendung von Bibliotheken und APIs hat.&lt;/li&gt;
&lt;li&gt;Erstellung einer grafischen Benutzeroberfläche (GUI) für dieses Programm in Form einer
Webschnittstelle.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Während der Woche haben wir festgestellt, dass Wortlisten sich gut mit &lt;a href=&quot;https://www.deepl.com/translator&quot;&gt;DeepL&lt;/a&gt;
sowie &lt;a href=&quot;https://translate.google.de/&quot;&gt;Google Translate&lt;/a&gt; übersetzen lassen. Natürlich sind wir sofort
darauf gestoßen, dass die Übersetzung eines Textes ein quasi beliebig kompliziertes Unterfangen ist
und Ansätze wie &lt;a href=&quot;https://en.wikipedia.org/wiki/Lexical_analysis#Tokenization&quot;&gt;Tokenization zur lexikalischen Analyse&lt;/a&gt;
sich zwar gut zur kontextfreien Übersetzung einzelner Wörter eignen, es aber keine brauchbaren
fertigen &lt;em&gt;detokenizer&lt;/em&gt; gibt, welche wieder die originale Textformatierung herstellen. Stattdessen haben
wir den Algorithmus als Quick-and-Dirty regulären Ausdruck mit &lt;a href=&quot;https://pcre.org/original/doc/html/pcrepattern.html#SEC11&quot;&gt;word boundaries&lt;/a&gt;
realisiert. Damit war dann entgültig klar, dass eine relationale Datenbank uns keinen Mehrwert schaffen
wird, sodass wir statt Django das deutlich einfachere &lt;a href=&quot;https://flask.palletsprojects.com/en/2.2.x/&quot;&gt;Flask-Webframework&lt;/a&gt;
gewählt haben. Letztlich hätten wir auch auf Flask verzichten können und einen HTTP-Server &amp;quot;from the scratch&amp;quot;
schreiben können, doch diesen Luxus haben wir uns an der Stelle gegönnt. Die Bearbeitung von HTML und CSS
rundeten das Projekt zum Ende der Woche ab, außerdem wurde es zwecks Deploying bei
&lt;a href=&quot;https://www.pythonanywhere.com/&quot;&gt;PythonAnywhere&lt;/a&gt; hochgeladen, womit die Praktikantin bereits aus Vorwochen Erfahrung
hatte.&lt;/p&gt;
&lt;h2&gt;Schwerpunkte&lt;/h2&gt;
&lt;p&gt;Von Anfang an lag mein Fokus in dieser Woche darauf, Grundlagen zu lernen, so etwa&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Die interaktive, explorative Benutzung von Python in der Konsole mittels der &lt;code&gt;help()&lt;/code&gt;-Funktion
(in &lt;a href=&quot;https://ipython.org/&quot;&gt;IPython&lt;/a&gt; mit nachgestelltem Fragezeichen &lt;code&gt;?&lt;/code&gt; erreichbar).&lt;/li&gt;
&lt;li&gt;Das Erlernen klassischer Ein- und Ausgabe mithilfe von Textdateien (C-Idiom &lt;code&gt;open()&lt;/code&gt;, &lt;code&gt;readline()&lt;/code&gt;
sowie auf CSV-Ebene), die Auseinandersetzung mit Zeichensätzen.&lt;/li&gt;
&lt;li&gt;Den funktionalen Zugang mittels &lt;a href=&quot;https://pythongeeks.org/list-comprehensions-in-python/&quot;&gt;List Comprehension&lt;/a&gt;
sowie den elementaren Datenstrukturen von Python (Strings, Tupel, Listen, Dictionaries) zu erlernen.&lt;/li&gt;
&lt;li&gt;Den Unterschied zwischen Groß- und Kleinschreibung beim Suchen-und-Ersetzen sowie der Abgrenzung
zu regulären Ausdrücken zu erlernen. Reguläre Sprachen reihen sich nahtlos in die Thematik zwischen natürlicher
Sprachverarbeitung und künstlicher, Turing-vollständiger Programmiersprache ein.&lt;/li&gt;
&lt;li&gt;Grundlegendes Verständnis für objektorientierte Programmierung auch mithilfe des Schreibens eigener Klassen
zu vermitteln.&lt;/li&gt;
&lt;li&gt;Grundlegendes Verständnis für hierarschie Dateisystem und das Pfadkonzept zu vermitteln, welches
sowohl beim lokalen Arbeiten mit Dateien als auch im Kontext von Webservern relevant ist.&lt;/li&gt;
&lt;li&gt;Die Funktionsweise einer Client-/Server-Anwendung sowie von HTML-Tags und HTML-Formularen zu
vermitteln, ohne sie von einem Framework wegzuabstrahieren.&lt;/li&gt;
&lt;li&gt;Praktische Erfahrung im Debugging lokal in der Konsole (Stack Trace) vs. einer IDE (Visual Studio, interaktives Debugging)
vs. auf dem Server (PythonAnywhere mithilfe von Error Logs) zu vermitteln.&lt;/li&gt;
&lt;li&gt;Aufmerksamkeit für Sicherheitslücken zu vermitteln, etwa einer &lt;em&gt;Cross Site Scripting&lt;/em&gt;-Attacke die wir durch
Replying von unsicheren Benutzereingaben im HTML erzeugt haben.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wie man an vielen Stellen in (diesem Blog)[/blog] merkt, bin ich ein großer Verfechter von einfachen
und prägnanten Programmen die in völligem Bewusstsein Libraries und APIs verwenden. Deswegen haben wir
mithilfe unseres Ansatzes einen &amp;quot;MVP&amp;quot;, einen &amp;quot;Minimum Viable Prototype&amp;quot; gebaut, der auf einer lokalen,
vorgefertigten Datenbasis arbeitet. Wir haben beispielsweise mit dem &lt;a href=&quot;https://www.nltk.org/&quot;&gt;Python Natural Language Toolkit&lt;/a&gt;
experimentiert, waren aber mit den Tokenization-Routinen unglücklich und haben von dieser Abhägigkeit
daher wieder Abstand genommen. Auch von der Benutzung von Tooling welches zum Deploying verwendet werden, etwa
&lt;em&gt;python virtual environments&lt;/em&gt; oder &lt;em&gt;Docker&lt;/em&gt; haben wir während der Woche abgesehen.&lt;/p&gt;
&lt;h2&gt;Verwendete Werkzeuge&lt;/h2&gt;
&lt;p&gt;In der Regel haben wir einfach nur eine Videotelefoniesoftware (Zoom, Jitsi und vergleichbar) genutzt. Die
Praktikantin hatte im Büro eine Linux-Workstation und privat einen Windows-Laptop, auf beiden waren vergleichbare
Benutzungsumgebungen installiert. Dank &lt;em&gt;Teamviewer&lt;/em&gt; konnten wir spontan auch interaktiv arbeiten. Ansonsten
haben wir uns mit wechselseitigen Bildschirmfreigaben beholfen. Wichtige Links und Arbeitsanweisungen wurden
per Slack festgehalten.&lt;/p&gt;
&lt;h2&gt;Fazit&lt;/h2&gt;
&lt;p&gt;Für mich als Betreuer war dieses Remote-Praktikum eine interessante Erfahrung. Die Betreuungswoche fiel auf
eine Zeit, bei der ich privat wie beruflich sehr stark eingebunden war, weswegen die intensive Videotelefonie
für mich sehr herausfordern war. Als Vorteile des Remote-Praktikums habe ich empfunden, dass&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dank der Kombination von synchronem (Telefonie) und asynchronem (Chat) Kontakt eigentlich
eine kontinuierliches Betreuungsangebot möglich war,&lt;/li&gt;
&lt;li&gt;ich auch die Zeit der Videokonferenzen prinzipiell gut parallel nutzen konnte und sie dank großer
zeitlicher Flexibilität auch in den Abendstunden ging -- etwas, was man im Büro wahrscheinlich nicht
tun würde,&lt;/li&gt;
&lt;li&gt;verhältnismäßig viele digitale Assets angefallen sind, die es mir jetzt etwa im Nachhinein auch
einfach machen, die Woche zusammenzufassen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Als Nachteile ist klar zu nennen, dass&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;der zwischenmenschliche Kontakt auf der Strecke blieb. Ein Praktikum lebt viel davon, die Arbeitsumstände
im Alltag kennenzulernen, von dem die Pausen zuweilen die wichtigste Zeit zur Konversation sind. Die
wortwörtliche &amp;quot;gemeinsame Zeit in der Kaffeeküche&amp;quot; oder in einem Restaurant fand nicht statt.
Als Menschen haben wir uns dadurch eigentlich nicht kennengelernt,&lt;/li&gt;
&lt;li&gt;der Umweg über Chat &amp;quot;die schnelle Frage zwischendurch&amp;quot; signifikant schwieriger macht. Ich nehme das
schriftliche &amp;quot;schnelle Anschreiben zwischendurch&amp;quot; als Hürde wahr, die der Praktikant erst überwinden
muss. Das findet oft nicht statt, dadurch geht dem Praktikanten wertvolle Zeit verloren,&lt;/li&gt;
&lt;li&gt;diese Form der Zusammenarbeit sehr anstrengend für alle Beteiligten ist: Stundenlange Videotelefonate
sind (nicht nur zu später Stunde) ermüdend, die &amp;quot;Zoom fatigue&amp;quot; ist zu Covid-Lockdown-Zeiten einer
breiten Öffentlichkeit ein Begriff geworden. Normalerweise begrenze ich daher meine Videotelefonate auf
60 Minuten, das hat aber wegen der kompakten Woche nicht funktioniert.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Für die Praktikantin geht es jetzt übrigens weiter: Nach einer Übergabe am Montag ist sie bereits mitten
in der &amp;quot;nächsten&amp;quot; Woche mit einem weiteren Genossen und Folgeprojekten.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Öffentliches WLAN im eigenen Betrieb</title>
      <link>https://denktmit.de/blog/2023-08-07-Public-Wifi-eduroam-freifunk/</link>
      <pubDate>2023-08-06T10:40:00Z</pubDate>
      <guid>https://denktmit.de/blog/2023-08-07-Public-Wifi-eduroam-freifunk/</guid>
      <description>&lt;p&gt;Es ist 2023 und in &lt;a href=&quot;https://www.lte-anbieter.info/verfuegbarkeit/lte-karte.php&quot;&gt;Deutschland ist LTE flächendeckend verfügbar&lt;/a&gt;.
Bei theoretischen Bandbreiten von bis zu 500 Mbit/sec spricht da kaum noch jemand über öffentliches WLAN.
Das Thema war in den 2000ern von hoher Relevanz, als Mobilfunktarife in Deutschland noch teuer waren. Und so
las ich neulich einen Blogpost über &lt;a href=&quot;https://computer.rip/2023-07-29-Free-Public-WiFi.html&quot;&gt;Free Public Wifi&lt;/a&gt;
in dem nerdigen Blog &lt;a href=&quot;https://computer.rip/&quot;&gt;Computers are bad&lt;/a&gt;, der vor allem über die technische und gesellschaftliche
Entwicklung von (öffentlichem) Wifi diskutierte. In Deutschland führten wir in den 2000ern Debatten über
&lt;a href=&quot;https://de.wikipedia.org/wiki/St%C3%B6rerhaftung#WLAN-Betreiber&quot;&gt;Störerhaftung&lt;/a&gt;, eine Gesetzesregelung die heute noch
immer für kuriose Urteile sorgt, die aus der Zeit gefallen wirken und manch Klischee über den verstaubten Biedermeier der
Bundesrepublik bestätigen.&lt;/p&gt;
&lt;h2&gt;Wozu öffentliches Wifi im Jahr 2023?&lt;/h2&gt;
&lt;p&gt;Wer heutzutage einen Standort betreibt, etwa geschäftlich oder als private Wohnung, möchte seinen Gästen oft gerne eine
Grundversorgung bieten, die neben sanitären Bedürfnissen selbstverständlich auch eine »digitale Grundversorgung« umfasst.
In der Regel ist das die bewährte Kombination aus Strom und WLAN. Letzteres ist insofern universell, als dass vor allem
Tablets und Notebooks hierzulande häufig ohne LTE-Modem betrieben werden und bei datenintensiven Anwendungen, etwa
Videotelefonie, große Datenmengen anfallen, die die BesucherInnen ungerne über Roaming (Freigabe des Internets vom mitgebrachten
Mobilfunkgerät) abbilden. Außerdem verbraucht eben dieser &lt;em&gt;mobile Hotspot&lt;/em&gt; auf dem Mobilfunkgerät (sprich dem Smartphone)
eine Menge Strom, der dann wieder dazu führt, dass es aufgeladen werden muss. Gerade in größeren Gebäudekomplexen,
fernabgelegenen Gegenden oder in Fahrzeugen ist der Mobilfunkempfang manchmal auch nicht gut, sodass es keine Alternative
zu einem WLAN-Zugang vor Ort gibt.&lt;/p&gt;
&lt;p&gt;Und so ist es gängige Praxis, dass &amp;quot;das WLAN-Passwort&amp;quot; mündlich oder gar per Aushang mit den BesucherInnen geteilt wird.
In der Regel passiert das auf Vertrauensbasis, etwa weil eine Geschäftsbeziehung (auch bei Laufkundschaft) existiert
oder ein persönlicher Kontakt existiert. Technisch handelt es sich dann fast immer um ein WLAN, welches mit
&lt;a href=&quot;https://www.elektronik-kompendium.de/sites/net/0907111.htm&quot;&gt;WPA2 Personal Mode&lt;/a&gt; gegen Fremdzugriff und Lauschangriffe
geschützt ist.&lt;/p&gt;
&lt;p&gt;Durch diese Praxis ist eine persönliche Nachverfolgung des Besuchers in der Regel nur insofern möglich, als dass anhand
des Zeitpunkt eines potentiellen Missbrauchs der Internetverbindung die Menge potentieller Übeltäter anhand des
persönlichen Kalenders eingekreist werden kann – im privaten Bereich wohl realistischer als etwa in einem Cafe.&lt;/p&gt;
&lt;h2&gt;Die Freifunk-Bewegung&lt;/h2&gt;
&lt;p&gt;Es gibt eine wunderbare Initiative zur Förderung von kostenfreiem und unkompliziertem öffentlichen WLAN, die ihre Wurzeln in
Deutschland hat. Die Rede ist von &lt;a href=&quot;https://freifunk.net/&quot;&gt;Freifunk&lt;/a&gt;. Die Initiative hat eigentlich den Aufbau eines
unabhängigen &lt;a href=&quot;https://de.wikipedia.org/wiki/Vermaschtes_Netz&quot;&gt;vermaschten&lt;/a&gt; Funknetzes vor allem in städtischen Regionen im
Fokus, der den Datenaustausch zwischen zwei Knotenpunkten &lt;em&gt;unabhängig&lt;/em&gt; vom Internet ermöglicht. Um an dem Netz teilzunehmen,
benötigt man lediglich ein geeignetes Gerät, wobei dafür auf günstige Verbraucherhardware zurückgegriffen wird, die
mit Freifunk-spezifischer Software betrieben wird. Neben dem Aufbau eines solchen &amp;quot;Freifunk-Meshes&amp;quot; ist Teil der
Freifunk-Idee aber auch der Zugang zum öffentlichen Internet. Dieser wird technisch über eine Art &amp;quot;Exit-Knoten&amp;quot; realisiert.
Das bedeutet, dass man (anonym) einen Freifunk-Knoten betreiben kann und auch an seinem eigenen Internet-Anschluss Gästen
den Zugang zum Internet bieten kann. Dieser wird aber von den Gästen nicht direkt genutzt, sondern sie gehen über den &amp;quot;Exit-Knoten&amp;quot;
des regionalen Freifunk-Verbandes ins Internet: &lt;a href=&quot;https://anon.freifunk.net/&quot;&gt;Freifunk haftet dann im Sinne der Störerhaftung für den Datenverkehr&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Für die meisten Use-Cases ist Freifunk die ideale Lösung. Wenn man keine Freifunk-spezifische Hardware einsetzen möchte, dann
kann man einen &lt;a href=&quot;https://wiki.freifunk.net/Offloader&quot;&gt;Offloader&lt;/a&gt; verwenden. Das geht auch als virtuelle Maschine. Allerdings muss
das Netzwerk drumherum (etwa per VLAN oder dedizierter Verkabelung) ermöglichen, dass ein oderer mehrere WLAN-Hotspots ihren
Datenverkehr über den Offloader laden. Wie eine solche Netzwerk-Verkabelung aussieht, demonstriert der &lt;a href=&quot;https://www.freifunk-bochum.de/mitmachen/offloader/&quot;&gt;Freifunk Bochum in einem Schaubild&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ein Vorteil von Freifunk ist, dass es eine Komplett-Lösung vor allem im rechtlichen Sinne und vom Branding her ist.
Ein Nachteil ist ggf. das prinzipiell ungeschützte Funknetz (keine WPA-Verschlüsselung) und die je nach Standort schwierig zu
legitimierende Regionalität – zB. würde der Firmensitz der DenktMit eG sich wohl mit dem nächstgelegenen
&lt;a href=&quot;https://ffm.freifunk.net/&quot;&gt;Freifunk Frankfurt&lt;/a&gt; identifizieren, was in der eigenständigen Stadt Oberursel vielleicht
unerwünscht ist. In meinen Augen ist auch der Hardware- und Softwarebedarf ein Nachteil; technisch baut Freifunk auf der
&lt;a href=&quot;https://gluon.readthedocs.io/&quot;&gt;Gluon-Software&lt;/a&gt; auf, welche für AdministratorInnen eine echte Lernkurve darstellt.&lt;/p&gt;
&lt;h2&gt;Eudoram&lt;/h2&gt;
&lt;p&gt;Im akademischen Milieu gibt es mit &lt;a href=&quot;https://eduroam.org/&quot;&gt;Eduroam&lt;/a&gt; eine seit Jahrzehnten etablierte Technik für &lt;em&gt;sicheren&lt;/em&gt;
und &lt;em&gt;nicht-anonymen&lt;/em&gt; kostenfreien Internetzugang. Er funktioniert ganz anders als Freifunk: Die Gäste authentifizieren
sich an einem mit WPA2-Enterprise geschützten Funknetz mit ihrem Zugang, der als E-Mail-Adresse &lt;code&gt;local@domain.tld&lt;/code&gt; gestaltet
ist. Anhand der Domäne findet eine Zuordnung zu der Heimatorganisation statt, zu der der Gast gehört und die als Identitätsprovider
dient. In der Regel ist das eine Forschungseinrichtung oder Universität, die über eine nationale Mittelorganisation
(National Romaing Operator, in Deutschland das &lt;a href=&quot;https://www.dfn.de/&quot;&gt;Deutsche Forschungsnetz&lt;/a&gt;, kurz DFN) an dem Roaming-Projekt
partizipiert.&lt;/p&gt;
&lt;p&gt;Sobald man sich in einem Eduroam-Netzwerk authentifiziert hat, kann man den Internetanschluss nutzen, allerdings nutzt man
dabei stets den lokalen Internetanschluss der gastgebenenden Institution. Eine Weiterleitung des Datenverkehrs etwa über die
Heimatorganisation (im Sinne dem Exit-Knoten von Freifunk) findet &lt;em&gt;nicht&lt;/em&gt; statt. Damit entledigt sich der Betreiber nicht der
Störerhaftung, ist aber technisch in der Lage, den Störer explizit zu identifizieren.&lt;/p&gt;
&lt;p&gt;Leider beschränkt sich Eudoram auf die akademische Welt. Eine Partizipation als Anbieter ist möglich, dafür muss man in
Deutschland aber dem DFN beitreten. Er ist als Verein organisiert, und die Mitgliedschaft ist auch forschenden Unternehmen
möglich. Die Kosten sind allerdings beträchtlich und bewegen sich in der Größenordnung von 5-10TEUR pro Jahr. Immerhin ist
dem DFN e.V. zugute zu halten, dass er gemeinnützig ist und sich ausschließlich über kostendeckende Mitgliederbeiträge
finanziert. Auf dem von Freiwilligen betriebenen Hobby-Projekt &lt;em&gt;Freifunk&lt;/em&gt; würde ich kein Geschäft aufbauen, auf dem DFN-Internetzugang
hingegen ist das schon eher denkbar.&lt;/p&gt;
&lt;h2&gt;Alternativen und Fazit&lt;/h2&gt;
&lt;p&gt;Für den WLAN-Zugang gibt es noch unzählige weitere Möglichkeiten. Es gibt eine ganze Branche von Dienstleistern, die sich darauf
spezialisiert haben, schlüsselfertige Lösungen maßgeschneidert für die Industrie des Kunden bereitzustellen. Diese decken das
ganze Spektrum ab, von anonym über &lt;a href=&quot;https://de.wikipedia.org/wiki/Captive_Portal&quot;&gt;Captive Portals&lt;/a&gt; bis hin zu persönlich identifiziert,
zum Teil auch noch mit gedruckten Tickets, Gültigkeitszeiträumen und natürlich der Abwicklung einer Bezahlung, falls erwünscht.
Ich habe mich in meinem Blogpost auf zwei Varianten konzentriert: Die kostenlose Open-Source-Lösung von Freifunk sowie die
akademische Lösung, die für Nutzer ebenfalls kostenlos zu sein scheint aber als
&lt;a href=&quot;https://trustidentity.geant.org/&quot;&gt;Trust &amp;amp; Identity&lt;/a&gt;-Plattform von internationalen Forschungsinstituten finanziert wird.&lt;/p&gt;
&lt;p&gt;Eine Benutzererfahrung wie bei Eduroam hab ich bislang noch nie woanders gemacht: In der Regel hat sich das Endgerät bereits in
die lokalen Access Points eingewählt, noch bevor man die Frage zuende gestellt hat, ob es einen WLAN-Zugang gibt. Da ist Freifunk
noch eine Frage und ein Klick mehr (»Nutzen Sie einfach das WLAN mit dem Namen Freifunk; Ja, das ist von uns«). Beides ist einfacher,
als mit QR-Codes oder langen Passwortzetteln zu hantieren.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Local development for Kubernetes done right</title>
      <link>https://denktmit.de/blog/2024-02-28-local-development-for-kubernetes-done-right/</link>
      <pubDate>2024-02-01T10:40:00Z</pubDate>
      <guid>https://denktmit.de/blog/2024-02-28-local-development-for-kubernetes-done-right/</guid>
      <description>&lt;p&gt;When operating within a company that leverages modern cloud-native technologies, it&#39;s not uncommon to encounter a
shared &amp;quot;Development&amp;quot; Kubernetes cluster. This cluster serves as a testing ground for numerous developers, each granted
full access or extensive privileges. Intended for testing applications, deployment scripts (such as Helm charts), and
various integrations, this shared space quickly resembles a digital version of Pandora&#39;s box.&lt;/p&gt;
&lt;h2&gt;The shared development cluster problem&lt;/h2&gt;
&lt;p&gt;In practice, this cluster becomes a melting pot for pipelines deploying development branches or even individual feature
branches. Combined with engineers experimenting with diverse technologies, the result is an expansive Kubernetes cluster
teeming with namespaces. However, a staggering 90% of the pods often find themselves stuck in a perpetual state of
&amp;quot;CrashLoopBackoff&amp;quot;, leading to the demise of the cluster every other day. Unfortunately, this setup tends to be a
breeding ground for productivity issues across all teams.&lt;/p&gt;
&lt;p&gt;Several factors contribute to this predicament:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sandbox Mentality: With broad access, teams often treat the cluster as a sandbox environment, leading to clutter and
chaos.&lt;/li&gt;
&lt;li&gt;Testing Challenges: As infrastructure-as-code becomes integral, testing becomes crucial. Tools like Kuttl exist for a
reason, emphasizing the importance of testing Kubernetes configurations on an engineer&#39;s local machine.&lt;/li&gt;
&lt;li&gt;Resource Limitations: Unchecked resource consumption becomes a significant challenge, with resource limits becoming a
constant source of issues.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Engineers unfamiliar with Kubernetes face a steep learning curve and a frustrating experience. This frustration can
hinder motivation, discouraging them from properly delving into Kubernetes.&lt;/p&gt;
&lt;p&gt;Consider also the challenges faced by operations teams tasked with maintaining this sprawling cluster. Continuous
cleanup of broken deployments becomes a routine, with ops personnel constantly seeking permission to delete obsolete
resources. Amidst this, they grapple with the cacophony of alerts, gradually becoming immune to the noise within their
office.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://denktmit.de/unlucky-operator.webp&quot; alt=&quot;unlucky-operator.webp&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Teach to fish, feed for a lifetime&lt;/h2&gt;
&lt;p&gt;In tackling these challenges, we advocate for the use of local development clusters that are not only easy to set up
but, most importantly, easy to understand. We firmly believe that providing engineers with the right tools and knowledge
ensures a smoother experience, fostering collaboration and productivity for both developers and operations teams.&lt;/p&gt;
&lt;p&gt;Rather than giving out solutions directly, our philosophy is to teach the fundamentals. Kubernetes is a potent toolset,
intricately designed with well-thought-out core concepts. Instead of oversimplifying for developers, we advise against
hiding these core concepts. Avoid the temptation to automate every potential hiccup, as it may lead to a complex and
unwieldy setup. Instead, invest in your team&#39;s know-how, ensuring everyone comprehends how to manage a straightforward,
default Kubernetes cluster.&lt;/p&gt;
&lt;p&gt;Rather than maintaining a large development cluster, consider setting up a local Kubernetes environment that includes
everything your teams need to kickstart their work. Provide them with the opportunity and responsibility to run tests,
deploy applications, and conduct end-to-end testing on their own machines.&lt;/p&gt;
&lt;p&gt;Encourage engineers to take ownership of their clusters and machines. Foster their curiosity by allowing them to
experiment, break their clusters, and learn to fix issues independently. We strongly believe that Kubernetes is a
powerful, lovable, and remarkable technology when engineers have the chance to enjoy it.&lt;/p&gt;
&lt;p&gt;To create a more positive work environment, minimize the noise of failed pipelines and alerts from broken development
clusters. Let teams find joy and have fun while working on clusters and pipelines, aiming for green lights instead of
red ones.&lt;/p&gt;
&lt;h2&gt;Set up a local dev Kubernetes environment&lt;/h2&gt;
&lt;p&gt;We adhere to the best practice of ensuring that the local development environment closely mirrors the CI/CD, staging,
and production environments. Our primary objective is to foster development using real and configurable URLs, with
TLS/SSL-enabled data traffic as the default, even on local machines. It&#39;s time to bid farewell to the era of relying
solely on http://localhost.&lt;/p&gt;
&lt;p&gt;Certainly, there are challenges along the way, such as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Certificate Handling:&lt;/strong&gt; Managing certificates poses a challenge, but there are various approaches to tackle this
issue effectively.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Local DNS:&lt;/strong&gt; Local DNS setup is crucial for ensuring a seamless transition to real and configurable URLs in the
development environment. Multiple strategies exist to address this challenge.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Local Registries:&lt;/strong&gt; The need for local registries is recognized, and there are diverse solutions available to
manage this aspect efficiently.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Addressing these challenges is no small feat, and we are eager to present an effective strategy to handle them. By
surmounting these hurdles, we not only establish a local development environment that closely aligns with the production
setup but also elevates the development experience with authentic and secure configurations. This strategic approach
lays the groundwork for seamless transitions between different development stages, fostering a robust and reliable
development workflow.&lt;/p&gt;
&lt;h3&gt;DenktMit eG local-dev-cluster to the rescue&lt;/h3&gt;
&lt;p&gt;We prepared the &lt;strong&gt;&lt;a href=&quot;https://github.com/DenktMit-eG/local-dev-cluster&quot;&gt;local-dev-cluster&lt;/a&gt;&lt;/strong&gt; as a baseline to provide you with
such a local development environment. It includes local certificate management with certmanager, Ingress (Traefik),
Keycloak, and Kafka.&lt;/p&gt;
&lt;h3&gt;Certificate handling&lt;/h3&gt;
&lt;p&gt;There are several ways to serve your applications with https on your local machine.
With &lt;a href=&quot;https://github.com/FiloSottile/mkcert&quot;&gt;mkcert&lt;/a&gt; you can create a local CA and install them into your truststore
with just a few commands. Later you can use &lt;a href=&quot;https://cert-manager.io/&quot;&gt;certmanager&lt;/a&gt; to use your already trusted CA to
create certificates for your ingresses. You can also simply create a valid wildcard certificate using certbot
with &lt;a href=&quot;https://letsencrypt.org/de/&quot;&gt;Letsencrypt&lt;/a&gt; or &lt;a href=&quot;https://zerossl.com/&quot;&gt;ZeroSSL&lt;/a&gt; and reference them in your ingresses.
ZeroSSL even supports one year wildcard certificates, so you don&#39;t have to care about them that much.&lt;/p&gt;
&lt;h3&gt;Local DNS&lt;/h3&gt;
&lt;p&gt;When using a local DNS setup to test your deployments like &lt;a href=&quot;https://helm.sh/&quot;&gt;helm&lt;/a&gt;
charts, &lt;a href=&quot;https://argo-cd.readthedocs.io/en/stable/&quot;&gt;argocd&lt;/a&gt; apps and so on you might also want to test accessibility of
your application using ingress. There are a few ways to access them. Of course, you can put your ingresses into your
etc/hosts. But can potentially be very messy when you have lots of ingresses because you cant configure wildcards here.
You can use an actually dns zone and create an A entry that is pointing to 127.0.0.1 (or whatever your local ingresses
IP might be) Another option could be &lt;a href=&quot;https://wiki.ubuntuusers.de/Dnsmasq/&quot;&gt;dnsmasqs&lt;/a&gt; local DNS server which is a little
bit more complex to set up.&lt;/p&gt;
&lt;h3&gt;Local registries&lt;/h3&gt;
&lt;p&gt;Local kubernetes tools like &lt;a href=&quot;https://kind.sigs.k8s.io/&quot;&gt;kind&lt;/a&gt; or &lt;a href=&quot;https://minikube.sigs.k8s.io/docs/start/&quot;&gt;minikube&lt;/a&gt;
have the possibility to push your containers into the cluster using their cli. But there are several use cases where you
want to have an actually local container registry where you can build and push your containers into.&lt;/p&gt;
&lt;h2&gt;Wrap-Up&lt;/h2&gt;
&lt;p&gt;We outlined the pitfalls of shared development Kubernetes clusters and advocate for a shift towards local development
environments. The proposed approach encourages alignment with production setups, teaching core Kubernetes concepts, and
empowers your engineers. It addresses challenges like certificate handling, local DNS, and local registries, offering
practical solutions. The suggested &lt;a href=&quot;https://github.com/DenktMit-eG/local-dev-cluster&quot;&gt;local-dev-cluster&lt;/a&gt; serves as a
working example and foundational tool for creating an effective and enjoyable local development experience.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
